.. index:: pair: page; Chapter 8: Threads with libssh
.. _doxid-libssh_tutor_threads:

Chapter 8: Threads with libssh
==============================



.. _doxid-libssh_tutor_threads_1threads_with_libssh:

How to use libssh with threads
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

libssh may be used in multithreaded applications, but under several conditions :

* Threading must be initialized during the initialization of libssh. This initialization must be done outside of any threading context.

* If pthreads is being used by your application (or your framework's backend), you must link with libssh_threads dynamic library and initialize threading with the ssh_threads_pthreads threading object.

* If an other threading library is being used by your application, you must implement all the methods of the :ref:`ssh_threads_callbacks_struct <doxid-structssh__threads__callbacks__struct>` structure and initialize libssh with it.

* At all times, you may use different sessions inside threads, make parallel connections, read/write on different sessions and so on. You *cannot* use a single session (or channels for a single session) in several threads at the same time. This will most likely lead to internal state corruption. This limitation is being worked out and will maybe disappear later.



.. _doxid-libssh_tutor_threads_1threads_init:

Initialization of threads
-------------------------

To initialize threading, you must first select the threading model you want to use, using :ref:`ssh_threads_set_callbacks() <doxid-group__libssh__threads_1gaf473af3fbae6f1bb0e249fd1d079ff68>`, then call :ref:`ssh_init() <doxid-group__libssh_1ga3ebf8d6920e563f3b032e3cd5277598e>`.

.. ref-code-block:: cpp

	#include <libssh/callbacks.h>
	...
	ssh_threads_set_callbacks(ssh_threads_get_noop());
	ssh_init();

ssh_threads_noop is the threading structure that does nothing. It's the threading callbacks being used by default when you're not using threading.





.. _doxid-libssh_tutor_threads_1threads_pthread:

Using libpthread with libssh
----------------------------

If your application is using libpthread, you may simply use the libpthread threading backend:

.. ref-code-block:: cpp

	#include <libssh/callbacks.h>
	...
	ssh_threads_set_callbacks(ssh_threads_get_pthread());
	ssh_init();

However, you must be sure to link with the library ssh_threads. If you're using gcc, you must use the commandline

.. ref-code-block:: cpp

	gcc -o output input.c -lssh -lssh_threads





.. _doxid-libssh_tutor_threads_1threads_other:

Using another threading library
-------------------------------

You must find your way in the :ref:`ssh_threads_callbacks_struct <doxid-structssh__threads__callbacks__struct>` structure. You must implement the following methods :

* mutex_lock

* mutex_unlock

* mutex_init

* mutex_destroy

* thread_id

libgcrypt 1.6 and bigger backend does not support custom callback. Using anything else than pthreads (:ref:`ssh_threads_get_pthread() <doxid-callbacks_8h_1a117f2dff40905608871165129de1fbf7>`) here will fail. Good luck !

