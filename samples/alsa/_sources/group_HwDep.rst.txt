.. index:: pair: group; Hardware Dependant Interface
.. _doxid-group___hw_dep:

Hardware Dependant Interface
============================

.. toctree::
	:hidden:

	enum_snd_hwdep_iface_t.rst
	enum_snd_hwdep_type_t.rst

Overview
~~~~~~~~

The Hardware Dependant Interface. :ref:`More...<details-group___hw_dep>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// typedefs

	typedef struct _snd_hwdep_info :ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`;
	typedef struct _snd_hwdep_dsp_status :ref:`snd_hwdep_dsp_status_t<doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>`;
	typedef struct _snd_hwdep_dsp_image :ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`;
	typedef struct _snd_hwdep :ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`;

	// enums

	enum :ref:`snd_hwdep_iface_t<doxid-group___hw_dep_1ga288eb9342aaea8317a7bfa03b22feaca>`;
	enum :ref:`snd_hwdep_type_t<doxid-group___hw_dep_1ga839de1d3a2bf9495cc631c08099bca79>`;

	// global functions

	int
	:ref:`snd_hwdep_open<doxid-group___hw_dep_1gaade8a9030fadb398fdb6d139f360f07e>`(
		:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`** hwdep,
		const char* name,
		int mode
	);

	int
	:ref:`snd_hwdep_close<doxid-group___hw_dep_1ga35ba1e894c069b37012604abf1432314>`(:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep);

	int
	:ref:`snd_hwdep_poll_descriptors<doxid-group___hw_dep_1ga179b89384deb4c5a76b7017e6ba6af88>`(
		:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep,
		struct pollfd* pfds,
		unsigned int space
	);

	int
	:ref:`snd_hwdep_poll_descriptors_count<doxid-group___hw_dep_1gacc4e48e9d9fa90fb5e35b3502cfe6f7f>`(:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep);

	int
	:ref:`snd_hwdep_poll_descriptors_revents<doxid-group___hw_dep_1ga654b2c89f1e6bc16e590161340f1e3d9>`(
		:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep,
		struct pollfd* pfds,
		unsigned int nfds,
		unsigned short* revents
	);

	int
	:ref:`snd_hwdep_nonblock<doxid-group___hw_dep_1ga6eaa5f13367625587fdd955fb4cb4c51>`(
		:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep,
		int nonblock
	);

	int
	:ref:`snd_hwdep_info<doxid-group___hw_dep_1ga97f208875f4ec6a253f088e3c2c084c1>`(
		:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep,
		:ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`* info
	);

	int
	:ref:`snd_hwdep_dsp_status<doxid-group___hw_dep_1gaf071b6171019a11a72367cc7f9613f5d>`(
		:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep,
		:ref:`snd_hwdep_dsp_status_t<doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>`* status
	);

	int
	:ref:`snd_hwdep_dsp_load<doxid-group___hw_dep_1ga7316c8ce8d4ba06b58e6536e3cf96223>`(
		:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep,
		:ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* block
	);

	int
	:ref:`snd_hwdep_ioctl<doxid-group___hw_dep_1ga74f5260b0f5f779932bfe7afcf68ecb1>`(
		:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep,
		unsigned int request,
		void* arg
	);

	ssize_t
	:ref:`snd_hwdep_write<doxid-group___hw_dep_1ga4c158ce0db68b8bfac1a00abe5e2ffcd>`(
		:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep,
		const void* buffer,
		size_t size
	);

	ssize_t
	:ref:`snd_hwdep_read<doxid-group___hw_dep_1ga7ef0c6e7ae7b838d509dd09b800b321f>`(
		:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep,
		void* buffer,
		size_t size
	);

	size_t
	:ref:`snd_hwdep_info_sizeof<doxid-group___hw_dep_1gad39906514d5d04b7ebcc190382b8bd27>`(void);

	int
	:ref:`snd_hwdep_info_malloc<doxid-group___hw_dep_1gab6831cd666bea427ab3779710e90a857>`(:ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`** ptr);

	void
	:ref:`snd_hwdep_info_free<doxid-group___hw_dep_1ga9e19ef5118f808962689c3d947af1a00>`(:ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`* obj);

	void
	:ref:`snd_hwdep_info_copy<doxid-group___hw_dep_1ga3132936fc99968e59df02711d2927018>`(
		:ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`* dst,
		const :ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`* src
	);

	unsigned int
	:ref:`snd_hwdep_info_get_device<doxid-group___hw_dep_1ga23deebecc5e88b0124222ebf73999c24>`(const :ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`* obj);

	int
	:ref:`snd_hwdep_info_get_card<doxid-group___hw_dep_1ga04193d4395908c0e31ac826ac05d3824>`(const :ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`* obj);

	const char*
	:ref:`snd_hwdep_info_get_id<doxid-group___hw_dep_1ga80bb1ca217fa051086e7f2ab5821ee34>`(const :ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`* obj);

	const char*
	:ref:`snd_hwdep_info_get_name<doxid-group___hw_dep_1gaf7f6251acc0f26d6fefc2c28fcf90c6a>`(const :ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`* obj);

	:ref:`snd_hwdep_iface_t<doxid-group___hw_dep_1ga288eb9342aaea8317a7bfa03b22feaca>`
	:ref:`snd_hwdep_info_get_iface<doxid-group___hw_dep_1ga7d846bea699c0917f54d75fe5d76a58e>`(const :ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`* obj);

	void
	:ref:`snd_hwdep_info_set_device<doxid-group___hw_dep_1ga5f497ef1c3a675af203923d93eda4202>`(
		:ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`* obj,
		unsigned int val
	);

	size_t
	:ref:`snd_hwdep_dsp_status_sizeof<doxid-group___hw_dep_1ga54205faff69bdd35b996863094bafada>`(void);

	int
	:ref:`snd_hwdep_dsp_status_malloc<doxid-group___hw_dep_1ga444c5bd71b0a3756084450dfb7528c6d>`(:ref:`snd_hwdep_dsp_status_t<doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>`** ptr);

	void
	:ref:`snd_hwdep_dsp_status_free<doxid-group___hw_dep_1gaa7d3a0f8f01805b10342581893e9671e>`(:ref:`snd_hwdep_dsp_status_t<doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>`* obj);

	void
	:ref:`snd_hwdep_dsp_status_copy<doxid-group___hw_dep_1gacc06c08ac09beec6b50fddf5496ce25b>`(
		:ref:`snd_hwdep_dsp_status_t<doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>`* dst,
		const :ref:`snd_hwdep_dsp_status_t<doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>`* src
	);

	unsigned int
	:ref:`snd_hwdep_dsp_status_get_version<doxid-group___hw_dep_1ga52f6b403c2a4947c647043fdd7c5dbf7>`(const :ref:`snd_hwdep_dsp_status_t<doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>`* obj);

	const char*
	:ref:`snd_hwdep_dsp_status_get_id<doxid-group___hw_dep_1ga3f62477a689ef9e84048f7ba8e33a792>`(const :ref:`snd_hwdep_dsp_status_t<doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>`* obj);

	unsigned int
	:ref:`snd_hwdep_dsp_status_get_num_dsps<doxid-group___hw_dep_1gac49bce861455b700ba79c3eb9f73aae9>`(const :ref:`snd_hwdep_dsp_status_t<doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>`* obj);

	unsigned int
	:ref:`snd_hwdep_dsp_status_get_dsp_loaded<doxid-group___hw_dep_1ga6c5e57aaf95a248814897bd80e12edf4>`(const :ref:`snd_hwdep_dsp_status_t<doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>`* obj);

	unsigned int
	:ref:`snd_hwdep_dsp_status_get_chip_ready<doxid-group___hw_dep_1gaf49d8044583b6f0c890bbb6a493734e8>`(const :ref:`snd_hwdep_dsp_status_t<doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>`* obj);

	size_t
	:ref:`snd_hwdep_dsp_image_sizeof<doxid-group___hw_dep_1ga8a5e773b145d973ea5c75057974a371d>`(void);

	int
	:ref:`snd_hwdep_dsp_image_malloc<doxid-group___hw_dep_1gacf44ffc69400d7d195809c18cb71f89d>`(:ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`** ptr);

	void
	:ref:`snd_hwdep_dsp_image_free<doxid-group___hw_dep_1ga95c9c00e3b9b20ba6a92ac9d14c5cfdd>`(:ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* obj);

	void
	:ref:`snd_hwdep_dsp_image_copy<doxid-group___hw_dep_1ga4178c718645804dffde98bf210e447b5>`(
		:ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* dst,
		const :ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* src
	);

	unsigned int
	:ref:`snd_hwdep_dsp_image_get_index<doxid-group___hw_dep_1gada5fa0eaa5a4a941dc5b79ae1897db76>`(const :ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* obj);

	const char*
	:ref:`snd_hwdep_dsp_image_get_name<doxid-group___hw_dep_1ga025e4656f44f73d8c372b8b10285f202>`(const :ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* obj);

	const void*
	:ref:`snd_hwdep_dsp_image_get_image<doxid-group___hw_dep_1ga330539511a4fe2936351b34a26cf96ff>`(const :ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* obj);

	size_t
	:ref:`snd_hwdep_dsp_image_get_length<doxid-group___hw_dep_1gaf6087e4530245055c8cceaa74df629aa>`(const :ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* obj);

	void
	:ref:`snd_hwdep_dsp_image_set_index<doxid-group___hw_dep_1ga6e93c88a4595ac0915211dca5f46ab72>`(
		:ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* obj,
		unsigned int _index
	);

	void
	:ref:`snd_hwdep_dsp_image_set_name<doxid-group___hw_dep_1gab6529c1bf1aba5bf2abdbbf157a4e9e0>`(
		:ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* obj,
		const char* name
	);

	void
	:ref:`snd_hwdep_dsp_image_set_image<doxid-group___hw_dep_1ga3da9921e2aab7ab9ed91a39c4f3f6a0f>`(
		:ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* obj,
		void* buffer
	);

	void
	:ref:`snd_hwdep_dsp_image_set_length<doxid-group___hw_dep_1ga6de5750e29632c68af2648dcb11a1429>`(
		:ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* obj,
		size_t length
	);

	// macros

	#define :ref:`SND_HWDEP_DLSYM_VERSION<doxid-group___hw_dep_1gadbdb136d096a033b5a37da051334c311>`
	#define :ref:`SND_HWDEP_OPEN_DUPLEX<doxid-group___hw_dep_1ga65dd0ca8c1810b8e9c7f9d95a09d444f>`
	#define :ref:`SND_HWDEP_OPEN_NONBLOCK<doxid-group___hw_dep_1gaf29d78d2741d1b7dc2647cd2e6525a10>`
	#define :ref:`SND_HWDEP_OPEN_READ<doxid-group___hw_dep_1ga0c719693523de2875822c7c488aa46af>`
	#define :ref:`SND_HWDEP_OPEN_WRITE<doxid-group___hw_dep_1ga256f488476a56156609160ce2a8ff4fb>`
	#define :ref:`snd_hwdep_dsp_image_alloca<doxid-group___hw_dep_1ga228ee5cb7404cabc425d8aa135287475>`(ptr)
	#define :ref:`snd_hwdep_dsp_status_alloca<doxid-group___hw_dep_1gaa8ff5094038689503524a6c38e7064cd>`(ptr)
	#define :ref:`snd_hwdep_info_alloca<doxid-group___hw_dep_1ga209969eb18c5461a5cf2ce331c8d0898>`(ptr)

.. _details-group___hw_dep:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

The Hardware Dependant Interface.

Typedefs
--------

.. index:: pair: typedef; snd_hwdep_info_t
.. _doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct _snd_hwdep_info snd_hwdep_info_t

HwDep information container

.. index:: pair: typedef; snd_hwdep_dsp_status_t
.. _doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct _snd_hwdep_dsp_status snd_hwdep_dsp_status_t

HwDep DSP status container

.. index:: pair: typedef; snd_hwdep_dsp_image_t
.. _doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct _snd_hwdep_dsp_image snd_hwdep_dsp_image_t

HwDep DSP image container

.. index:: pair: typedef; snd_hwdep_t
.. _doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct _snd_hwdep snd_hwdep_t

HwDep handle

Global Functions
----------------

.. index:: pair: function; snd_hwdep_open
.. _doxid-group___hw_dep_1gaade8a9030fadb398fdb6d139f360f07e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_hwdep_open(
		:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`** hwdep,
		const char* name,
		int mode
	)

Opens a new connection to the HwDep interface.

Opens a new connection to the HwDep interface specified with an ASCII identifier and mode.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- hwdep

		- Returned handle (NULL if not wanted)

	*
		- name

		- ASCII identifier of the HwDep handle

	*
		- mode

		- Open mode



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_hwdep_close
.. _doxid-group___hw_dep_1ga35ba1e894c069b37012604abf1432314:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_hwdep_close(:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep)

close HwDep handle

Closes the specified HwDep handle and frees all associated resources.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- hwdep

		- HwDep handle



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_hwdep_poll_descriptors
.. _doxid-group___hw_dep_1ga179b89384deb4c5a76b7017e6ba6af88:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_hwdep_poll_descriptors(
		:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep,
		struct pollfd* pfds,
		unsigned int space
	)

get poll descriptors



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- hwdep

		- HwDep handle

	*
		- pfds

		- array of poll descriptors

	*
		- space

		- space in the poll descriptor array



.. rubric:: Returns:

count of filled descriptors

.. index:: pair: function; snd_hwdep_poll_descriptors_count
.. _doxid-group___hw_dep_1gacc4e48e9d9fa90fb5e35b3502cfe6f7f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_hwdep_poll_descriptors_count(:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep)

get count of poll descriptors for HwDep handle



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- hwdep

		- HwDep handle



.. rubric:: Returns:

count of poll descriptors

.. index:: pair: function; snd_hwdep_poll_descriptors_revents
.. _doxid-group___hw_dep_1ga654b2c89f1e6bc16e590161340f1e3d9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_hwdep_poll_descriptors_revents(
		:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep,
		struct pollfd* pfds,
		unsigned int nfds,
		unsigned short* revents
	)

get returned events from poll descriptors



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- hwdep

		- HwDep handle

	*
		- pfds

		- array of poll descriptors

	*
		- nfds

		- count of poll descriptors

	*
		- revents

		- returned events



.. rubric:: Returns:

zero if success, otherwise a negative error code

.. index:: pair: function; snd_hwdep_nonblock
.. _doxid-group___hw_dep_1ga6eaa5f13367625587fdd955fb4cb4c51:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_hwdep_nonblock(
		:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep,
		int nonblock
	)

set nonblock mode



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- hwdep

		- HwDep handle

	*
		- nonblock

		- 0 = block, 1 = nonblock mode



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_hwdep_info
.. _doxid-group___hw_dep_1ga97f208875f4ec6a253f088e3c2c084c1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_hwdep_info(
		:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep,
		:ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`* info
	)

get information about HwDep handle



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- hwdep

		- HwDep handle

	*
		- info

		- pointer to a snd_hwdep_info_t structure to be filled



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_hwdep_dsp_status
.. _doxid-group___hw_dep_1gaf071b6171019a11a72367cc7f9613f5d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_hwdep_dsp_status(
		:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep,
		:ref:`snd_hwdep_dsp_status_t<doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>`* status
	)

get the DSP status information



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- hwdep

		- HwDep handle

	*
		- info

		- pointer to a snd_hwdep_dsp_status_t structure to be filled



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_hwdep_dsp_load
.. _doxid-group___hw_dep_1ga7316c8ce8d4ba06b58e6536e3cf96223:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_hwdep_dsp_load(
		:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep,
		:ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* block
	)

load the DSP block



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- hwdep

		- HwDep handle

	*
		- block

		- pointer to a snd_hwdep_dsp_image_t structure to transfer



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_hwdep_ioctl
.. _doxid-group___hw_dep_1ga74f5260b0f5f779932bfe7afcf68ecb1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_hwdep_ioctl(
		:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep,
		unsigned int request,
		void* arg
	)

do hardware dependent ioctl



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- hwdep

		- HwDep handle

	*
		- request

		- ioctl command

	*
		- arg

		- ioctl argument



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_hwdep_write
.. _doxid-group___hw_dep_1ga4c158ce0db68b8bfac1a00abe5e2ffcd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	ssize_t
	snd_hwdep_write(
		:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep,
		const void* buffer,
		size_t size
	)

write bytes using HwDep handle



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- hwdep

		- HwDep handle

	*
		- buffer

		- buffer containing bytes to write

	*
		- size

		- output buffer size in bytes

.. index:: pair: function; snd_hwdep_read
.. _doxid-group___hw_dep_1ga7ef0c6e7ae7b838d509dd09b800b321f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	ssize_t
	snd_hwdep_read(
		:ref:`snd_hwdep_t<doxid-group___hw_dep_1ga1f13b151f43d06b257c71570010b2ed0>`* hwdep,
		void* buffer,
		size_t size
	)

read bytes using HwDep handle



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- hwdep

		- HwDep handle

	*
		- buffer

		- buffer to store the input bytes

	*
		- size

		- input buffer size in bytes

.. index:: pair: function; snd_hwdep_info_sizeof
.. _doxid-group___hw_dep_1gad39906514d5d04b7ebcc190382b8bd27:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	size_t
	snd_hwdep_info_sizeof(void)

get size of the snd_hwdep_info_t structure in bytes



.. rubric:: Returns:

size of the snd_hwdep_info_t structure in bytes

.. index:: pair: function; snd_hwdep_info_malloc
.. _doxid-group___hw_dep_1gab6831cd666bea427ab3779710e90a857:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_hwdep_info_malloc(:ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`** ptr)

allocate a new snd_hwdep_info_t structure

Allocates a new snd_hwdep_info_t structure using the standard malloc C library function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- returned pointer



.. rubric:: Returns:

0 on success otherwise a negative error code if fails

.. index:: pair: function; snd_hwdep_info_free
.. _doxid-group___hw_dep_1ga9e19ef5118f808962689c3d947af1a00:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_hwdep_info_free(:ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`* obj)

frees the snd_hwdep_info_t structure

Frees the given snd_hwdep_info_t structure using the standard free C library function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- pointer to the snd_hwdep_info_t structure to free

.. index:: pair: function; snd_hwdep_info_copy
.. _doxid-group___hw_dep_1ga3132936fc99968e59df02711d2927018:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_hwdep_info_copy(
		:ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`* dst,
		const :ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`* src
	)

copy one snd_hwdep_info_t structure to another



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dst

		- destination snd_hwdep_info_t structure

	*
		- src

		- source snd_hwdep_info_t structure

.. index:: pair: function; snd_hwdep_info_get_device
.. _doxid-group___hw_dep_1ga23deebecc5e88b0124222ebf73999c24:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_hwdep_info_get_device(const :ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`* obj)

get hwdep device number



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- pointer to a snd_hwdep_info_t structure



.. rubric:: Returns:

hwdep device number

.. index:: pair: function; snd_hwdep_info_get_card
.. _doxid-group___hw_dep_1ga04193d4395908c0e31ac826ac05d3824:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_hwdep_info_get_card(const :ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`* obj)

get hwdep card number



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to a snd_hwdep_info_t structure



.. rubric:: Returns:

hwdep card number

.. index:: pair: function; snd_hwdep_info_get_id
.. _doxid-group___hw_dep_1ga80bb1ca217fa051086e7f2ab5821ee34:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_hwdep_info_get_id(const :ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`* obj)

get hwdep driver identifier



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to a snd_hwdep_info_t structure



.. rubric:: Returns:

hwdep driver identifier

.. index:: pair: function; snd_hwdep_info_get_name
.. _doxid-group___hw_dep_1gaf7f6251acc0f26d6fefc2c28fcf90c6a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_hwdep_info_get_name(const :ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`* obj)

get hwdep driver name



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to a snd_hwdep_info_t structure



.. rubric:: Returns:

hwdep driver name

.. index:: pair: function; snd_hwdep_info_get_iface
.. _doxid-group___hw_dep_1ga7d846bea699c0917f54d75fe5d76a58e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`snd_hwdep_iface_t<doxid-group___hw_dep_1ga288eb9342aaea8317a7bfa03b22feaca>`
	snd_hwdep_info_get_iface(const :ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`* obj)

get hwdep protocol interface



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to a snd_hwdep_info_t structure



.. rubric:: Returns:

hwdep protocol interface

.. index:: pair: function; snd_hwdep_info_set_device
.. _doxid-group___hw_dep_1ga5f497ef1c3a675af203923d93eda4202:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_hwdep_info_set_device(
		:ref:`snd_hwdep_info_t<doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>`* obj,
		unsigned int val
	)

set hwdep device number



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to a snd_hwdep_info_t structure

	*
		- val

		- hwdep device

.. index:: pair: function; snd_hwdep_dsp_status_sizeof
.. _doxid-group___hw_dep_1ga54205faff69bdd35b996863094bafada:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	size_t
	snd_hwdep_dsp_status_sizeof(void)

get size of the snd_hwdep_dsp_status_t structure in bytes



.. rubric:: Returns:

size of the snd_hwdep_dsp_status_t structure in bytes

.. index:: pair: function; snd_hwdep_dsp_status_malloc
.. _doxid-group___hw_dep_1ga444c5bd71b0a3756084450dfb7528c6d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_hwdep_dsp_status_malloc(:ref:`snd_hwdep_dsp_status_t<doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>`** ptr)

allocate a new snd_hwdep_dsp_status_t structure

Allocates a new snd_hwdep_dsp_status_t structure using the standard malloc C library function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- returned pointer



.. rubric:: Returns:

0 on success otherwise a negative error code if fails

.. index:: pair: function; snd_hwdep_dsp_status_free
.. _doxid-group___hw_dep_1gaa7d3a0f8f01805b10342581893e9671e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_hwdep_dsp_status_free(:ref:`snd_hwdep_dsp_status_t<doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>`* obj)

frees the snd_hwdep_dsp_status_t structure

Frees the given snd_hwdep_dsp_status_t structure using the standard free C library function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- pointer to the snd_hwdep_dsp_status_t structure to free

.. index:: pair: function; snd_hwdep_dsp_status_copy
.. _doxid-group___hw_dep_1gacc06c08ac09beec6b50fddf5496ce25b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_hwdep_dsp_status_copy(
		:ref:`snd_hwdep_dsp_status_t<doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>`* dst,
		const :ref:`snd_hwdep_dsp_status_t<doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>`* src
	)

copy one snd_hwdep_dsp_status_t structure to another



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dst

		- destination snd_hwdep_dsp_status_t structure

	*
		- src

		- source snd_hwdep_dsp_status_t structure

.. index:: pair: function; snd_hwdep_dsp_status_get_version
.. _doxid-group___hw_dep_1ga52f6b403c2a4947c647043fdd7c5dbf7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_hwdep_dsp_status_get_version(const :ref:`snd_hwdep_dsp_status_t<doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>`* obj)

get the driver version of dsp loader



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to a snd_hwdep_dsp_status_t structure



.. rubric:: Returns:

the driver version

.. index:: pair: function; snd_hwdep_dsp_status_get_id
.. _doxid-group___hw_dep_1ga3f62477a689ef9e84048f7ba8e33a792:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_hwdep_dsp_status_get_id(const :ref:`snd_hwdep_dsp_status_t<doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>`* obj)

get the driver id of dsp loader



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to a snd_hwdep_dsp_status_t structure



.. rubric:: Returns:

the driver id string

.. index:: pair: function; snd_hwdep_dsp_status_get_num_dsps
.. _doxid-group___hw_dep_1gac49bce861455b700ba79c3eb9f73aae9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_hwdep_dsp_status_get_num_dsps(const :ref:`snd_hwdep_dsp_status_t<doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>`* obj)

get number of dsp blocks



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to a snd_hwdep_dsp_status_t structure



.. rubric:: Returns:

number of dsp blocks

.. index:: pair: function; snd_hwdep_dsp_status_get_dsp_loaded
.. _doxid-group___hw_dep_1ga6c5e57aaf95a248814897bd80e12edf4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_hwdep_dsp_status_get_dsp_loaded(const :ref:`snd_hwdep_dsp_status_t<doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>`* obj)

get the bit flags of the loaded dsp blocks



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- pointer to a snd_hwdep_dsp_status_t structure



.. rubric:: Returns:

the big flags of the loaded dsp blocks

.. index:: pair: function; snd_hwdep_dsp_status_get_chip_ready
.. _doxid-group___hw_dep_1gaf49d8044583b6f0c890bbb6a493734e8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_hwdep_dsp_status_get_chip_ready(const :ref:`snd_hwdep_dsp_status_t<doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>`* obj)

get the chip status of dsp loader



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to a snd_hwdep_dsp_status_t structure



.. rubric:: Returns:

non-zero if all DSP blocks are loaded and the chip is ready

.. index:: pair: function; snd_hwdep_dsp_image_sizeof
.. _doxid-group___hw_dep_1ga8a5e773b145d973ea5c75057974a371d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	size_t
	snd_hwdep_dsp_image_sizeof(void)

get size of the snd_hwdep_dsp_image_t structure in bytes



.. rubric:: Returns:

size of the snd_hwdep_dsp_image_t structure in bytes

.. index:: pair: function; snd_hwdep_dsp_image_malloc
.. _doxid-group___hw_dep_1gacf44ffc69400d7d195809c18cb71f89d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_hwdep_dsp_image_malloc(:ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`** ptr)

allocate a new snd_hwdep_dsp_image_t structure

Allocates a new snd_hwdep_dsp_image_t structure using the standard malloc C library function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- returned pointer



.. rubric:: Returns:

0 on success otherwise a negative error code if fails

.. index:: pair: function; snd_hwdep_dsp_image_free
.. _doxid-group___hw_dep_1ga95c9c00e3b9b20ba6a92ac9d14c5cfdd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_hwdep_dsp_image_free(:ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* obj)

frees the snd_hwdep_dsp_image_t structure

Frees the given snd_hwdep_dsp_image_t structure using the standard free C library function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- pointer to the snd_hwdep_dsp_image_t structure to free

.. index:: pair: function; snd_hwdep_dsp_image_copy
.. _doxid-group___hw_dep_1ga4178c718645804dffde98bf210e447b5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_hwdep_dsp_image_copy(
		:ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* dst,
		const :ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* src
	)

copy one snd_hwdep_dsp_image_t structure to another



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dst

		- destination snd_hwdep_dsp_image_t structure

	*
		- src

		- source snd_hwdep_dsp_image_t structure

.. index:: pair: function; snd_hwdep_dsp_image_get_index
.. _doxid-group___hw_dep_1gada5fa0eaa5a4a941dc5b79ae1897db76:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_hwdep_dsp_image_get_index(const :ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* obj)

get the DSP block index



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to a snd_hwdep_dsp_image_t structure



.. rubric:: Returns:

the index of the DSP block

.. index:: pair: function; snd_hwdep_dsp_image_get_name
.. _doxid-group___hw_dep_1ga025e4656f44f73d8c372b8b10285f202:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_hwdep_dsp_image_get_name(const :ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* obj)

get the name of the DSP block



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to a snd_hwdep_dsp_image_t structure



.. rubric:: Returns:

the name string of the DSP block

.. index:: pair: function; snd_hwdep_dsp_image_get_image
.. _doxid-group___hw_dep_1ga330539511a4fe2936351b34a26cf96ff:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const void*
	snd_hwdep_dsp_image_get_image(const :ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* obj)

get the image pointer of the DSP block



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to a snd_hwdep_dsp_image_t structure



.. rubric:: Returns:

the image pointer of the DSP block

.. index:: pair: function; snd_hwdep_dsp_image_get_length
.. _doxid-group___hw_dep_1gaf6087e4530245055c8cceaa74df629aa:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	size_t
	snd_hwdep_dsp_image_get_length(const :ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* obj)

get the length of the DSP block



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to a snd_hwdep_dsp_image_t structure



.. rubric:: Returns:

the length of the DSP block in bytes

.. index:: pair: function; snd_hwdep_dsp_image_set_index
.. _doxid-group___hw_dep_1ga6e93c88a4595ac0915211dca5f46ab72:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_hwdep_dsp_image_set_index(
		:ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* obj,
		unsigned int _index
	)

set the DSP block index



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to a snd_hwdep_dsp_image_t structure

	*
		- index

		- the index value to set

.. index:: pair: function; snd_hwdep_dsp_image_set_name
.. _doxid-group___hw_dep_1gab6529c1bf1aba5bf2abdbbf157a4e9e0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_hwdep_dsp_image_set_name(
		:ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* obj,
		const char* name
	)

set the name of the DSP block



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to a snd_hwdep_dsp_image_t structure

	*
		- name

		- the name string

.. index:: pair: function; snd_hwdep_dsp_image_set_image
.. _doxid-group___hw_dep_1ga3da9921e2aab7ab9ed91a39c4f3f6a0f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_hwdep_dsp_image_set_image(
		:ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* obj,
		void* buffer
	)

set the DSP block image pointer



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to a snd_hwdep_dsp_image_t structure

	*
		- image

		- the DSP image pointer

.. index:: pair: function; snd_hwdep_dsp_image_set_length
.. _doxid-group___hw_dep_1ga6de5750e29632c68af2648dcb11a1429:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_hwdep_dsp_image_set_length(
		:ref:`snd_hwdep_dsp_image_t<doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>`* obj,
		size_t length
	)

set the DSP block length



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to a snd_hwdep_dsp_image_t structure

	*
		- length

		- the length of the DSP block

Macros
------

.. index:: pair: define; SND_HWDEP_DLSYM_VERSION
.. _doxid-group___hw_dep_1gadbdb136d096a033b5a37da051334c311:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_HWDEP_DLSYM_VERSION

dlsym version for interface entry callback

.. index:: pair: define; SND_HWDEP_OPEN_DUPLEX
.. _doxid-group___hw_dep_1ga65dd0ca8c1810b8e9c7f9d95a09d444f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_HWDEP_OPEN_DUPLEX

open for reading and writing

.. index:: pair: define; SND_HWDEP_OPEN_NONBLOCK
.. _doxid-group___hw_dep_1gaf29d78d2741d1b7dc2647cd2e6525a10:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_HWDEP_OPEN_NONBLOCK

open mode flag: open in nonblock mode

.. index:: pair: define; SND_HWDEP_OPEN_READ
.. _doxid-group___hw_dep_1ga0c719693523de2875822c7c488aa46af:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_HWDEP_OPEN_READ

open for reading

.. index:: pair: define; SND_HWDEP_OPEN_WRITE
.. _doxid-group___hw_dep_1ga256f488476a56156609160ce2a8ff4fb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_HWDEP_OPEN_WRITE

open for writing

.. index:: pair: define; snd_hwdep_dsp_image_alloca
.. _doxid-group___hw_dep_1ga228ee5cb7404cabc425d8aa135287475:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define snd_hwdep_dsp_image_alloca(ptr)

allocate :ref:`snd_hwdep_dsp_image_t <doxid-group___hw_dep_1ga041c777902d3888a5b000ccd305f32ce>` container on stack

.. index:: pair: define; snd_hwdep_dsp_status_alloca
.. _doxid-group___hw_dep_1gaa8ff5094038689503524a6c38e7064cd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define snd_hwdep_dsp_status_alloca(ptr)

allocate :ref:`snd_hwdep_dsp_status_t <doxid-group___hw_dep_1ga904ac34d4d2af6c080aa01d9d70f6ef2>` container on stack

.. index:: pair: define; snd_hwdep_info_alloca
.. _doxid-group___hw_dep_1ga209969eb18c5461a5cf2ce331c8d0898:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define snd_hwdep_info_alloca(ptr)

allocate :ref:`snd_hwdep_info_t <doxid-group___hw_dep_1ga12be97323a913a065524c01fb163cb29>` container on stack

