.. index:: pair: group; Control Interface
.. _doxid-group___control:

Control Interface
=================

.. toctree::
	:hidden:

	group_HControl.rst
	group_SControl.rst
	enum_snd_ctl_elem_iface_t.rst
	enum_snd_ctl_elem_type_t.rst
	enum_snd_ctl_event_type_t.rst
	enum_snd_ctl_type_t.rst
	struct_snd_aes_iec958_t.rst

Overview
~~~~~~~~

The control interface. :ref:`More...<details-group___control>`

|	:ref:`High level Control Interface<doxid-group___h_control>`
|	:ref:`Setup Control Interface<doxid-group___s_control>`



.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// typedefs

	typedef struct _snd_ctl_card_info :ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`;
	typedef struct _snd_ctl_elem_id :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`;
	typedef struct _snd_ctl_elem_list :ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`;
	typedef struct _snd_ctl_elem_info :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`;
	typedef struct _snd_ctl_elem_value :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`;
	typedef struct _snd_ctl_event :ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`;
	typedef struct _snd_ctl :ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`;
	typedef struct _snd_sctl :ref:`snd_sctl_t<doxid-group___control_1ga89e065287b9deb65125cc5f1cfb48e07>`;

	// enums

	enum :ref:`snd_ctl_elem_iface_t<doxid-group___control_1ga14baa0febb91cc4c5d72dcc825acf518>`;
	enum :ref:`snd_ctl_elem_type_t<doxid-group___control_1gac42e0ed6713b62711af5e80b4b3bcfec>`;
	enum :ref:`snd_ctl_event_type_t<doxid-group___control_1ga76f2458eb5cde785a8fcdb555ed7fd57>`;
	enum :ref:`snd_ctl_type_t<doxid-group___control_1ga9d0e18b3c1b8cb729d4561b968296a76>`;

	// structs

	struct :ref:`snd_aes_iec958_t<doxid-structsnd__aes__iec958__t>`;

	// global functions

	int
	:ref:`snd_card_load<doxid-group___control_1gabb7a76fa905fbae6481f78d1eea4feb1>`(int card);

	int
	:ref:`snd_card_next<doxid-group___control_1ga6fccc8a2d7d5ebd072a552a05855c145>`(int* card);

	int
	:ref:`snd_card_get_index<doxid-group___control_1ga1881c5c04a532f5b9397745731ce7730>`(const char* name);

	int
	:ref:`snd_card_get_name<doxid-group___control_1gad48d44da8e3bfe150e928267008b8ff5>`(
		int card,
		char** name
	);

	int
	:ref:`snd_card_get_longname<doxid-group___control_1ga547dcead4a72f24db4a0f9f530f75228>`(
		int card,
		char** name
	);

	int
	:ref:`snd_device_name_hint<doxid-group___control_1gadf4ce9117fcfa454c523ed6e6bd8b353>`(
		int card,
		const char* iface,
		void*** hints
	);

	int
	:ref:`snd_device_name_free_hint<doxid-group___control_1gad4cacf29df4616c2458fc84c1fde708c>`(void** hints);

	char*
	:ref:`snd_device_name_get_hint<doxid-group___control_1ga8546500ca828392f03f5bba2e7813874>`(
		const void* hint,
		const char* id
	);

	int
	:ref:`snd_ctl_open<doxid-group___control_1ga58537f5b74c9c1f51699f9908a0d7f56>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`** ctl,
		const char* name,
		int mode
	);

	int
	:ref:`snd_ctl_open_lconf<doxid-group___control_1ga4a49cc71db1a7021be6ad880fcdbe4c9>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`** ctl,
		const char* name,
		int mode,
		:ref:`snd_config_t<doxid-group___config_1ga1c20905af775ae77d04d1a5696f67985>`* lconf
	);

	int
	:ref:`snd_ctl_open_fallback<doxid-group___control_1ga016fcf47dc9c17c06d6e0846ac0bba17>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`** ctl,
		:ref:`snd_config_t<doxid-group___config_1ga1c20905af775ae77d04d1a5696f67985>`* root,
		const char* name,
		const char* orig_name,
		int mode
	);

	int
	:ref:`snd_ctl_close<doxid-group___control_1gaf8510057afd178d7206221d85440ba5f>`(:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl);

	int
	:ref:`snd_ctl_nonblock<doxid-group___control_1ga0898e6fe7a63a1c301794357a160587b>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		int nonblock
	);

	static
	__inline__ int
	:target:`snd_ctl_abort<doxid-group___control_1ga6ff193775dfbaa5afade6320b77a756f>`(:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl);

	int
	:ref:`snd_async_add_ctl_handler<doxid-group___control_1ga23813430fb81fecb0e95d1dfd688337d>`(
		:ref:`snd_async_handler_t<doxid-group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d>`** handler,
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_async_callback_t<doxid-group___global_1gaf8937eadd968df14b64e54f49c29821c>` callback,
		void* private_data
	);

	:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`*
	:ref:`snd_async_handler_get_ctl<doxid-group___control_1gaa693260ccd944d874229257e54dee404>`(:ref:`snd_async_handler_t<doxid-group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d>`* handler);

	int
	:ref:`snd_ctl_poll_descriptors_count<doxid-group___control_1gad7761be890b679d7e7bb3a3e4453818b>`(:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl);

	int
	:ref:`snd_ctl_poll_descriptors<doxid-group___control_1gaae9e775c251024e253a4314b76c3c1f8>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		struct pollfd* pfds,
		unsigned int space
	);

	int
	:ref:`snd_ctl_poll_descriptors_revents<doxid-group___control_1gab4f2ac44c01f4ec3c02dca1945bf9155>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		struct pollfd* pfds,
		unsigned int nfds,
		unsigned short* revents
	);

	int
	:ref:`snd_ctl_subscribe_events<doxid-group___control_1gab56450393817e8ee1959fc4bcf5d2d15>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		int subscribe
	);

	int
	:ref:`snd_ctl_card_info<doxid-group___control_1gaaa78539d04df0f1642d00c07a86d0fe8>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* info
	);

	int
	:ref:`snd_ctl_elem_list<doxid-group___control_1gab631f366b743f5afa0bb0344b42aad4b>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* list
	);

	int
	:ref:`snd_ctl_elem_info<doxid-group___control_1gaa41caec9e14ea618fecfacfe68f1f7d7>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* info
	);

	int
	:ref:`snd_ctl_elem_read<doxid-group___control_1ga6577ee280d090136288fc5dd734867b9>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* data
	);

	int
	:ref:`snd_ctl_elem_write<doxid-group___control_1gac98376a37556e0d878b6aa43e7e64e27>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* data
	);

	int
	:ref:`snd_ctl_elem_lock<doxid-group___control_1ga1fba1f7e08ab11505a617af5d54f4580>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id
	);

	int
	:ref:`snd_ctl_elem_unlock<doxid-group___control_1gaf8b3191516b8b7debeb57192b71abf66>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id
	);

	int
	:ref:`snd_ctl_elem_tlv_read<doxid-group___control_1ga56f9ce14ec4227de4f3a6b573f069481>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id,
		unsigned int* tlv,
		unsigned int tlv_size
	);

	int
	:ref:`snd_ctl_elem_tlv_write<doxid-group___control_1gaaa2c2da0a41904db5809dd4eade24c9c>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id,
		const unsigned int* tlv
	);

	int
	:ref:`snd_ctl_elem_tlv_command<doxid-group___control_1ga34d5e31c5ff25ab780893ab7534ab2d2>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id,
		const unsigned int* tlv
	);

	int
	:ref:`snd_ctl_set_power_state<doxid-group___control_1ga11ec9933829235513853f89bffdfd4e1>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		unsigned int state
	);

	int
	:ref:`snd_ctl_get_power_state<doxid-group___control_1gae554fc52f0371161471520aa60e970c6>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		unsigned int* state
	);

	int
	:ref:`snd_ctl_read<doxid-group___control_1ga392a8f4afa2ba60e0ce6817f2a4f5e74>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* event
	);

	int
	:ref:`snd_ctl_wait<doxid-group___control_1ga7df5807d1853b39781078793afa7b895>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		int timeout
	);

	const char*
	:ref:`snd_ctl_name<doxid-group___control_1ga202bfd5f82126770a2a7f79fe75501b9>`(:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl);

	:ref:`snd_ctl_type_t<doxid-group___control_1ga9d0e18b3c1b8cb729d4561b968296a76>`
	:ref:`snd_ctl_type<doxid-group___control_1gafc6b41bf8de224f7b961cff768e41cc5>`(:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl);

	const char*
	:ref:`snd_ctl_elem_type_name<doxid-group___control_1gaca10189720995695e836e7bf39cce570>`(:ref:`snd_ctl_elem_type_t<doxid-group___control_1gac42e0ed6713b62711af5e80b4b3bcfec>` type);

	const char*
	:ref:`snd_ctl_elem_iface_name<doxid-group___control_1ga6e85042ad0ecb60292c3d06cfe7b2a5e>`(:ref:`snd_ctl_elem_iface_t<doxid-group___control_1ga14baa0febb91cc4c5d72dcc825acf518>` iface);

	const char*
	:ref:`snd_ctl_event_type_name<doxid-group___control_1gab06ee7470afa8d6ae55296d19bff1455>`(:ref:`snd_ctl_event_type_t<doxid-group___control_1ga76f2458eb5cde785a8fcdb555ed7fd57>` type);

	unsigned int
	:ref:`snd_ctl_event_elem_get_mask<doxid-group___control_1ga1a71c2546aef7d240185fd203240d890>`(const :ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj);

	unsigned int
	:ref:`snd_ctl_event_elem_get_numid<doxid-group___control_1gae1ecf3bdec2397722eaebbb2730de9d4>`(const :ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj);

	void
	:ref:`snd_ctl_event_elem_get_id<doxid-group___control_1ga84bad7e515406d566484e4faaa41962b>`(
		const :ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj,
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* ptr
	);

	:ref:`snd_ctl_elem_iface_t<doxid-group___control_1ga14baa0febb91cc4c5d72dcc825acf518>`
	:ref:`snd_ctl_event_elem_get_interface<doxid-group___control_1gaed43a3e150a98463b99993c8a4646595>`(const :ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj);

	unsigned int
	:ref:`snd_ctl_event_elem_get_device<doxid-group___control_1gaf96e6732e7d7d7d95e868518b7c47316>`(const :ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj);

	unsigned int
	:ref:`snd_ctl_event_elem_get_subdevice<doxid-group___control_1gaaa0de2acc99d1aa07aff9e0542134a9c>`(const :ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj);

	const char*
	:ref:`snd_ctl_event_elem_get_name<doxid-group___control_1ga79ef06a1957ccd0b784e1153e23ce25f>`(const :ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj);

	unsigned int
	:ref:`snd_ctl_event_elem_get_index<doxid-group___control_1gae69f9ba6fd89ac22af2421b801e69bbd>`(const :ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj);

	int
	:ref:`snd_ctl_elem_list_alloc_space<doxid-group___control_1ga504ad392b797b7f5277cd184aee96e66>`(
		:ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj,
		unsigned int entries
	);

	void
	:ref:`snd_ctl_elem_list_free_space<doxid-group___control_1ga7e8106e3e2f64d84d1c03ffe36bed388>`(:ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj);

	char*
	:ref:`snd_ctl_ascii_elem_id_get<doxid-group___control_1ga4e4f251147f558bc2ad044e836e449d9>`(:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id);

	int
	:ref:`snd_ctl_ascii_elem_id_parse<doxid-group___control_1ga2f530217bd896e3c0498b3e46624977a>`(
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* dst,
		const char* str
	);

	int
	:ref:`snd_ctl_ascii_value_parse<doxid-group___control_1ga05d994f242e8a524a94ea482689fa2c0>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* handle,
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* dst,
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* info,
		const char* value
	);

	size_t
	:ref:`snd_ctl_elem_id_sizeof<doxid-group___control_1gaf7047bf3d0336f2ed1bc876e512bfef7>`(void);

	int
	:ref:`snd_ctl_elem_id_malloc<doxid-group___control_1gaa261f3721050a0ad4a43f28bcd6b082d>`(:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`** ptr);

	void
	:ref:`snd_ctl_elem_id_free<doxid-group___control_1ga0bb98b09bc352074219a7866d20f5816>`(:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj);

	void
	:ref:`snd_ctl_elem_id_clear<doxid-group___control_1gad21c1d92e9f82b41330dba1146c88734>`(:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj);

	void
	:ref:`snd_ctl_elem_id_copy<doxid-group___control_1ga411575334b5f4d6602206df72c6ac01a>`(
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* dst,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* src
	);

	unsigned int
	:ref:`snd_ctl_elem_id_get_numid<doxid-group___control_1ga543f3de35c42f53f2ec2d24217fd4a43>`(const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj);

	:ref:`snd_ctl_elem_iface_t<doxid-group___control_1ga14baa0febb91cc4c5d72dcc825acf518>`
	:ref:`snd_ctl_elem_id_get_interface<doxid-group___control_1ga6932a5e3485140cd120dd8a9be8e6770>`(const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj);

	unsigned int
	:ref:`snd_ctl_elem_id_get_device<doxid-group___control_1ga54c863a0cdc7c501b3e1d520137cfc69>`(const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj);

	unsigned int
	:ref:`snd_ctl_elem_id_get_subdevice<doxid-group___control_1ga5f3bb5a80842261a07c4ed99b05921b8>`(const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj);

	const char*
	:ref:`snd_ctl_elem_id_get_name<doxid-group___control_1gaa6cfea3ac963bfdaeb8189e03e927a76>`(const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj);

	unsigned int
	:ref:`snd_ctl_elem_id_get_index<doxid-group___control_1gaebca4d84c661a50504b01b847f89289e>`(const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj);

	void
	:ref:`snd_ctl_elem_id_set_numid<doxid-group___control_1ga212d5ffe15e223dee2ebc58e3d57a7cd>`(
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj,
		unsigned int val
	);

	void
	:ref:`snd_ctl_elem_id_set_interface<doxid-group___control_1ga33855eaf0261c321cbf0a88baf290418>`(
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj,
		:ref:`snd_ctl_elem_iface_t<doxid-group___control_1ga14baa0febb91cc4c5d72dcc825acf518>` val
	);

	void
	:ref:`snd_ctl_elem_id_set_device<doxid-group___control_1ga2c893cc444dbc0e4293e3a6fec7b27a8>`(
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj,
		unsigned int val
	);

	void
	:ref:`snd_ctl_elem_id_set_subdevice<doxid-group___control_1ga8eb060cb64d7cce2c82d04560bf675eb>`(
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj,
		unsigned int val
	);

	void
	:ref:`snd_ctl_elem_id_set_name<doxid-group___control_1ga813d02a44a9d01a4a2fe81eda7a8670a>`(
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj,
		const char* val
	);

	void
	:ref:`snd_ctl_elem_id_set_index<doxid-group___control_1ga65af30a51becd092f6da1e357fc46094>`(
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj,
		unsigned int val
	);

	size_t
	:ref:`snd_ctl_card_info_sizeof<doxid-group___control_1ga5cfad24c04eb3576a1945757ff420944>`(void);

	int
	:ref:`snd_ctl_card_info_malloc<doxid-group___control_1ga518166f64f41361629ee7bfe0caca9fc>`(:ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`** ptr);

	void
	:ref:`snd_ctl_card_info_free<doxid-group___control_1ga62360e5fdd3c5644ca7e260099fba67e>`(:ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* obj);

	void
	:ref:`snd_ctl_card_info_clear<doxid-group___control_1ga3a4851500ca8a98927b16b772cda8787>`(:ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* obj);

	void
	:ref:`snd_ctl_card_info_copy<doxid-group___control_1gac2afd00836fb59d31cf759a8e48a622e>`(
		:ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* dst,
		const :ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* src
	);

	int
	:ref:`snd_ctl_card_info_get_card<doxid-group___control_1ga14863e13659cd0a02d3716923512dd85>`(const :ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* obj);

	const char*
	:ref:`snd_ctl_card_info_get_id<doxid-group___control_1gaadadbd2d4aef000a30ec4c1c949326cc>`(const :ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* obj);

	const char*
	:ref:`snd_ctl_card_info_get_driver<doxid-group___control_1ga4abf685f77a8fa8dd14232397cab6f71>`(const :ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* obj);

	const char*
	:ref:`snd_ctl_card_info_get_name<doxid-group___control_1gae71617c9deadee635b0ad38ca9aaf746>`(const :ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* obj);

	const char*
	:ref:`snd_ctl_card_info_get_longname<doxid-group___control_1ga54a54f4b1cc3740eafba54b1cc1b8111>`(const :ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* obj);

	const char*
	:ref:`snd_ctl_card_info_get_mixername<doxid-group___control_1gae2a4719572de955480043dd34840579b>`(const :ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* obj);

	const char*
	:ref:`snd_ctl_card_info_get_components<doxid-group___control_1ga2181aa6bf919fd1342b259d2f3af755b>`(const :ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* obj);

	size_t
	:ref:`snd_ctl_event_sizeof<doxid-group___control_1ga56f526a146d913e36802b6c4a0daf86b>`(void);

	int
	:ref:`snd_ctl_event_malloc<doxid-group___control_1ga2b38df9f5233dd8290a80682011f7907>`(:ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`** ptr);

	void
	:ref:`snd_ctl_event_free<doxid-group___control_1ga63ff10dda4a7e6b4055a0f3438c7781f>`(:ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj);

	void
	:ref:`snd_ctl_event_clear<doxid-group___control_1ga784c560c92df4179019bb3a29e1a4791>`(:ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj);

	void
	:ref:`snd_ctl_event_copy<doxid-group___control_1ga6d8375f54af11001b829f1e3054eccef>`(
		:ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* dst,
		const :ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* src
	);

	:ref:`snd_ctl_event_type_t<doxid-group___control_1ga76f2458eb5cde785a8fcdb555ed7fd57>`
	:ref:`snd_ctl_event_get_type<doxid-group___control_1ga2a7d413bb515e07dc4f933aa187324d9>`(const :ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj);

	size_t
	:ref:`snd_ctl_elem_list_sizeof<doxid-group___control_1ga6a2a5b5258da9959ddbcacf94a0619f2>`(void);

	int
	:ref:`snd_ctl_elem_list_malloc<doxid-group___control_1gab57f2acf2e5abdc9c46c19fe2bad9397>`(:ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`** ptr);

	void
	:ref:`snd_ctl_elem_list_free<doxid-group___control_1ga9141e579ac00e56fa01af4cd710acef5>`(:ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj);

	void
	:ref:`snd_ctl_elem_list_clear<doxid-group___control_1ga0aac385223908ae12a8d2f68d6105990>`(:ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj);

	void
	:ref:`snd_ctl_elem_list_copy<doxid-group___control_1gab945b6a9107a41d5cca414098711511e>`(
		:ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* dst,
		const :ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* src
	);

	void
	:ref:`snd_ctl_elem_list_set_offset<doxid-group___control_1gadc7b2d590c27c684ad2a076f11a8b31f>`(
		:ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj,
		unsigned int val
	);

	unsigned int
	:ref:`snd_ctl_elem_list_get_used<doxid-group___control_1ga2462c05a56bab424686f3d442ba8820f>`(const :ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj);

	unsigned int
	:ref:`snd_ctl_elem_list_get_count<doxid-group___control_1ga0a1206d8f19aa67a32577f523ee92c12>`(const :ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj);

	void
	:ref:`snd_ctl_elem_list_get_id<doxid-group___control_1ga73fe33f4f45b80d36137dd1371e34ea1>`(
		const :ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj,
		unsigned int idx,
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* ptr
	);

	unsigned int
	:ref:`snd_ctl_elem_list_get_numid<doxid-group___control_1ga6ee1e4b5b790f08bdcc78f3a2685aa5e>`(
		const :ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj,
		unsigned int idx
	);

	:ref:`snd_ctl_elem_iface_t<doxid-group___control_1ga14baa0febb91cc4c5d72dcc825acf518>`
	:ref:`snd_ctl_elem_list_get_interface<doxid-group___control_1ga72a7235ee8e366a4b8e7c63b0189f512>`(
		const :ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj,
		unsigned int idx
	);

	unsigned int
	:ref:`snd_ctl_elem_list_get_device<doxid-group___control_1gae906aa0c657dd15300ab451436a318b1>`(
		const :ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj,
		unsigned int idx
	);

	unsigned int
	:ref:`snd_ctl_elem_list_get_subdevice<doxid-group___control_1ga809aec8df62a6cc5a289829e4171f5b3>`(
		const :ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj,
		unsigned int idx
	);

	const char*
	:ref:`snd_ctl_elem_list_get_name<doxid-group___control_1ga819a69351b60fd868a09ae41323deb22>`(
		const :ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj,
		unsigned int idx
	);

	unsigned int
	:ref:`snd_ctl_elem_list_get_index<doxid-group___control_1ga1d2c5fea3dcdc132d40dce39e9ca9f00>`(
		const :ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj,
		unsigned int idx
	);

	size_t
	:ref:`snd_ctl_elem_info_sizeof<doxid-group___control_1ga0758621321c3b86a5bcb542b8b931236>`(void);

	int
	:ref:`snd_ctl_elem_info_malloc<doxid-group___control_1ga54387df99f25dc01635568fbc6bf6ad0>`(:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`** ptr);

	void
	:ref:`snd_ctl_elem_info_free<doxid-group___control_1ga8c55080b76401a03eede7d92e4e1cc4d>`(:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	void
	:ref:`snd_ctl_elem_info_clear<doxid-group___control_1ga4b7173cf1df342a66dbc44dc9ebd07ec>`(:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	void
	:ref:`snd_ctl_elem_info_copy<doxid-group___control_1ga763d0832ab8b9096e96f5a15021f73d8>`(
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* dst,
		const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* src
	);

	:ref:`snd_ctl_elem_type_t<doxid-group___control_1gac42e0ed6713b62711af5e80b4b3bcfec>`
	:ref:`snd_ctl_elem_info_get_type<doxid-group___control_1ga0fec5d22ee58d04f14b59f405adc595e>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	int
	:ref:`snd_ctl_elem_info_is_readable<doxid-group___control_1gabe355f33a84b3c3d18b3c72f5981dc6e>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	int
	:ref:`snd_ctl_elem_info_is_writable<doxid-group___control_1ga3289cc7acb4fc4de184cd67c295f1866>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	int
	:ref:`snd_ctl_elem_info_is_volatile<doxid-group___control_1ga7d191b706824318c943a6b172a7531fd>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	int
	:ref:`snd_ctl_elem_info_is_inactive<doxid-group___control_1ga387a4cb6a4d80b3ca2b4d734368eb219>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	int
	:ref:`snd_ctl_elem_info_is_locked<doxid-group___control_1ga1d37f2ff9ff7b1b367b7d804f7b2b7ad>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	int
	:ref:`snd_ctl_elem_info_is_tlv_readable<doxid-group___control_1gaac6bb412e5a9fffb5509e98a10de45b5>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	int
	:ref:`snd_ctl_elem_info_is_tlv_writable<doxid-group___control_1gacfbaae80d710b6feac682f8ba10a0341>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	int
	:ref:`snd_ctl_elem_info_is_tlv_commandable<doxid-group___control_1ga7625ff65bed60802f15bf143de4860a6>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	int
	:ref:`snd_ctl_elem_info_is_owner<doxid-group___control_1ga7d40439e43a49e1ac6c694b7b617329c>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	int
	:ref:`snd_ctl_elem_info_is_user<doxid-group___control_1ga34dc2e7013fe367a5acac79a1a13a814>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	pid_t
	:ref:`snd_ctl_elem_info_get_owner<doxid-group___control_1ga934e489d5d48a24575a425d64e0f2db0>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	unsigned int
	:ref:`snd_ctl_elem_info_get_count<doxid-group___control_1gaa75a20d4190d324bcda5fd6659a4b377>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	long
	:ref:`snd_ctl_elem_info_get_min<doxid-group___control_1gac8bcc954ddaae99174f97adc6116a6a1>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	long
	:ref:`snd_ctl_elem_info_get_max<doxid-group___control_1ga6d9da5653ce5d149e1b9ed0b26eaae22>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	long
	:ref:`snd_ctl_elem_info_get_step<doxid-group___control_1ga871c7c81aae5c41c2368a85c1ca1f407>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	long long
	:ref:`snd_ctl_elem_info_get_min64<doxid-group___control_1ga5e6bb136caa4d8c9a43e8d8f8e310893>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	long long
	:ref:`snd_ctl_elem_info_get_max64<doxid-group___control_1ga7e74e6ecf31560bd4c4b85464f7ba54b>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	long long
	:ref:`snd_ctl_elem_info_get_step64<doxid-group___control_1ga35177e37f86eeb8c9fe31c3a8438c9ce>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	unsigned int
	:ref:`snd_ctl_elem_info_get_items<doxid-group___control_1gabe5a218f256ac95ec295a175ec544453>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	void
	:ref:`snd_ctl_elem_info_set_item<doxid-group___control_1ga3cc2ead5a5628661976507fed4c38182>`(
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj,
		unsigned int val
	);

	const char*
	:ref:`snd_ctl_elem_info_get_item_name<doxid-group___control_1gaf54afbedeb76d572bd6c6d064ce4b51b>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	int
	:ref:`snd_ctl_elem_info_get_dimensions<doxid-group___control_1ga163546600efa29d822a4567706a8443a>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	int
	:ref:`snd_ctl_elem_info_get_dimension<doxid-group___control_1ga221900fb2b2c68e8cefda697874b83ba>`(
		const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj,
		unsigned int idx
	);

	int
	:ref:`snd_ctl_elem_info_set_dimension<doxid-group___control_1gaf2af53f06728255d07a1456fe51303c7>`(
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* info,
		const int dimension[4]
	);

	void
	:ref:`snd_ctl_elem_info_get_id<doxid-group___control_1ga4bf366ee3700fdc6073dae01724c2119>`(
		const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj,
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* ptr
	);

	unsigned int
	:ref:`snd_ctl_elem_info_get_numid<doxid-group___control_1gac0875375abf0477b84b6022faaa683f4>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	:ref:`snd_ctl_elem_iface_t<doxid-group___control_1ga14baa0febb91cc4c5d72dcc825acf518>`
	:ref:`snd_ctl_elem_info_get_interface<doxid-group___control_1gac0de27f217d38543ce1b2d5902766a46>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	unsigned int
	:ref:`snd_ctl_elem_info_get_device<doxid-group___control_1ga344f683cf6fac46e0ce8fbdf45ada99a>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	unsigned int
	:ref:`snd_ctl_elem_info_get_subdevice<doxid-group___control_1gae53373c67b013e3473caad0258c3bdc3>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	const char*
	:ref:`snd_ctl_elem_info_get_name<doxid-group___control_1ga3af223c6ba6185a7326f852390697914>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	unsigned int
	:ref:`snd_ctl_elem_info_get_index<doxid-group___control_1ga49d0d01aca3e2c61ca7cd7baa295d0ee>`(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj);

	void
	:ref:`snd_ctl_elem_info_set_id<doxid-group___control_1ga8aa6f699266b217b21c75b04dbdbe2b3>`(
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* ptr
	);

	void
	:ref:`snd_ctl_elem_info_set_numid<doxid-group___control_1ga13dcca5b02535c50c3f5efa2bc03c736>`(
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj,
		unsigned int val
	);

	void
	:ref:`snd_ctl_elem_info_set_interface<doxid-group___control_1ga49d7a2129b74609a8865e835e154d454>`(
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj,
		:ref:`snd_ctl_elem_iface_t<doxid-group___control_1ga14baa0febb91cc4c5d72dcc825acf518>` val
	);

	void
	:ref:`snd_ctl_elem_info_set_device<doxid-group___control_1ga87d5d9c4fe092f02267e0b36397fac88>`(
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj,
		unsigned int val
	);

	void
	:ref:`snd_ctl_elem_info_set_subdevice<doxid-group___control_1gab22e8223972fb7aa8a6e6abe49306b4d>`(
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj,
		unsigned int val
	);

	void
	:ref:`snd_ctl_elem_info_set_name<doxid-group___control_1ga40fffad33e859d27314dde76d9dffebb>`(
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj,
		const char* val
	);

	void
	:ref:`snd_ctl_elem_info_set_index<doxid-group___control_1gacc80a95a945e31f3125a3ab4d908a464>`(
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj,
		unsigned int val
	);

	int
	:ref:`snd_ctl_add_integer_elem_set<doxid-group___control_1gacc94fec73b3b56f87872e8fec0c3e9f1>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* info,
		unsigned int element_count,
		unsigned int member_count,
		long min,
		long max,
		long step
	);

	int
	:ref:`snd_ctl_add_integer64_elem_set<doxid-group___control_1ga2ab4992e6c9506bc8b8c0581808c2324>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* info,
		unsigned int element_count,
		unsigned int member_count,
		long long min,
		long long max,
		long long step
	);

	int
	:ref:`snd_ctl_add_boolean_elem_set<doxid-group___control_1gaff7e95b329528fac338d13f428bec02c>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* info,
		unsigned int element_count,
		unsigned int member_count
	);

	int
	:ref:`snd_ctl_add_enumerated_elem_set<doxid-group___control_1ga9e9bf31020e6c2e7185612785eca6098>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* info,
		unsigned int element_count,
		unsigned int member_count,
		unsigned int items,
		const char*const labels[]
	);

	int
	:ref:`snd_ctl_add_bytes_elem_set<doxid-group___control_1gaf725d3e3411b236e5434150268c80294>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* info,
		unsigned int element_count,
		unsigned int member_count
	);

	int
	:ref:`snd_ctl_elem_add_integer<doxid-group___control_1ga9f6228c0d0bc751596cc04c6dcd00083>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id,
		unsigned int count,
		long imin,
		long imax,
		long istep
	);

	int
	:ref:`snd_ctl_elem_add_integer64<doxid-group___control_1gaa9ff49156010b3931cd3d163e62cc43f>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id,
		unsigned int count,
		long long imin,
		long long imax,
		long long istep
	);

	int
	:ref:`snd_ctl_elem_add_boolean<doxid-group___control_1gad5f640f1d836b532b1c18d7604a90bad>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id,
		unsigned int count
	);

	int
	:ref:`snd_ctl_elem_add_enumerated<doxid-group___control_1ga273d2d5c44e97d045c48dbaa734ae23e>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id,
		unsigned int count,
		unsigned int items,
		const char*const names[]
	);

	int
	:ref:`snd_ctl_elem_add_iec958<doxid-group___control_1ga5511e7e65b773abf8eb8413ddb701f3e>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id
	);

	int
	:ref:`snd_ctl_elem_remove<doxid-group___control_1ga715d20513768cf33f10a0f9340b7baab>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id
	);

	size_t
	:ref:`snd_ctl_elem_value_sizeof<doxid-group___control_1ga0514e7dde0594c4bd909e2306acb4bc2>`(void);

	int
	:ref:`snd_ctl_elem_value_malloc<doxid-group___control_1ga34126639664d2c2d91a4b4bc6494a536>`(:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`** ptr);

	void
	:ref:`snd_ctl_elem_value_free<doxid-group___control_1gaab6bfeb2206c9de88778890fe527cd53>`(:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj);

	void
	:ref:`snd_ctl_elem_value_clear<doxid-group___control_1ga5dc3556ecf7f1b6b90a751f68e298aa8>`(:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj);

	void
	:ref:`snd_ctl_elem_value_copy<doxid-group___control_1ga5631893dd087d73c223b7787222b7f9b>`(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* dst,
		const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* src
	);

	int
	:ref:`snd_ctl_elem_value_compare<doxid-group___control_1gad5ee4dee86e48095a8eb74379c933350>`(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* left,
		const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* right
	);

	void
	:ref:`snd_ctl_elem_value_get_id<doxid-group___control_1gad5c2ecc35d664aff974a244478496239>`(
		const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* ptr
	);

	unsigned int
	:ref:`snd_ctl_elem_value_get_numid<doxid-group___control_1ga4506b9e0ca143a5e78e755ee4e285fa9>`(const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj);

	:ref:`snd_ctl_elem_iface_t<doxid-group___control_1ga14baa0febb91cc4c5d72dcc825acf518>`
	:ref:`snd_ctl_elem_value_get_interface<doxid-group___control_1gaa3c2abb83ed61f20350d056615bda48d>`(const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj);

	unsigned int
	:ref:`snd_ctl_elem_value_get_device<doxid-group___control_1gac1ec603a65de11b4661c04e6327f7647>`(const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj);

	unsigned int
	:ref:`snd_ctl_elem_value_get_subdevice<doxid-group___control_1ga81ad9e08fdd64b99dd6562b698ab7f85>`(const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj);

	const char*
	:ref:`snd_ctl_elem_value_get_name<doxid-group___control_1ga8c39c251d773d70ee8da07af4f5bdf0c>`(const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj);

	unsigned int
	:ref:`snd_ctl_elem_value_get_index<doxid-group___control_1ga7bae3a71028550515183e945040069df>`(const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj);

	void
	:ref:`snd_ctl_elem_value_set_id<doxid-group___control_1gab009ec5ba8cd90b434beb4294bff5d62>`(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* ptr
	);

	void
	:ref:`snd_ctl_elem_value_set_numid<doxid-group___control_1ga8ade8618025754cd6b0baebd54bd5773>`(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int val
	);

	void
	:ref:`snd_ctl_elem_value_set_interface<doxid-group___control_1ga052fb24927d60936cabfb29303595790>`(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		:ref:`snd_ctl_elem_iface_t<doxid-group___control_1ga14baa0febb91cc4c5d72dcc825acf518>` val
	);

	void
	:ref:`snd_ctl_elem_value_set_device<doxid-group___control_1ga2ff78ac05ab5efbe82f3eafe799e050d>`(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int val
	);

	void
	:ref:`snd_ctl_elem_value_set_subdevice<doxid-group___control_1gaa49c82aaf7052043c69594e3c81204c5>`(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int val
	);

	void
	:ref:`snd_ctl_elem_value_set_name<doxid-group___control_1ga7cb4db71bdc890579aa8bddbc88be7df>`(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		const char* val
	);

	void
	:ref:`snd_ctl_elem_value_set_index<doxid-group___control_1ga3b95f6d57955c7648e12023d53ce3faa>`(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int val
	);

	int
	:ref:`snd_ctl_elem_value_get_boolean<doxid-group___control_1gaa4409f368b375cb2ceb6d4108dcd2fc8>`(
		const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int idx
	);

	long
	:ref:`snd_ctl_elem_value_get_integer<doxid-group___control_1ga88debd91f21f40b237d22d7255b4a5fe>`(
		const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int idx
	);

	long long
	:ref:`snd_ctl_elem_value_get_integer64<doxid-group___control_1ga3f1d6202c02a34e973b87a2c580abcef>`(
		const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int idx
	);

	unsigned int
	:ref:`snd_ctl_elem_value_get_enumerated<doxid-group___control_1gaf7a9a86cb477166bc3922bd722afb296>`(
		const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int idx
	);

	unsigned char
	:ref:`snd_ctl_elem_value_get_byte<doxid-group___control_1ga594a9762366355ec131e9fda92243305>`(
		const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int idx
	);

	void
	:ref:`snd_ctl_elem_value_set_boolean<doxid-group___control_1gaa246c604f97c7a05d125314f0fa72946>`(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int idx,
		long val
	);

	void
	:ref:`snd_ctl_elem_value_set_integer<doxid-group___control_1gac022b948fe93bc744eb8b24839091b5b>`(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int idx,
		long val
	);

	void
	:ref:`snd_ctl_elem_value_set_integer64<doxid-group___control_1gaef406a6ab97925a9df646022800e815b>`(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int idx,
		long long val
	);

	void
	:ref:`snd_ctl_elem_value_set_enumerated<doxid-group___control_1ga89a5b646d118cd73e7ca7d861bb6de26>`(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int idx,
		unsigned int val
	);

	void
	:ref:`snd_ctl_elem_value_set_byte<doxid-group___control_1ga0a0d53d2dd752fb1aa39c97376d02547>`(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int idx,
		unsigned char val
	);

	void
	:ref:`snd_ctl_elem_set_bytes<doxid-group___control_1ga2b78601c4c56ecb4a6e3556137d61af6>`(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		void* data,
		size_t size
	);

	const void*
	:ref:`snd_ctl_elem_value_get_bytes<doxid-group___control_1ga11729138fcecfb37f9b7c744c4743fba>`(const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj);

	void
	:ref:`snd_ctl_elem_value_get_iec958<doxid-group___control_1ga8970ed4dd76ece274e27f0b0429895c1>`(
		const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		:ref:`snd_aes_iec958_t<doxid-structsnd__aes__iec958__t>`* ptr
	);

	void
	:ref:`snd_ctl_elem_value_set_iec958<doxid-group___control_1gaefa891d2ff7ceb075aecfa8bd89fb340>`(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		const :ref:`snd_aes_iec958_t<doxid-structsnd__aes__iec958__t>`* ptr
	);

	int
	:ref:`snd_tlv_parse_dB_info<doxid-group___control_1ga4fa0bc99458acc08a2c59e6ed84bc94e>`(
		unsigned int* tlv,
		unsigned int tlv_size,
		unsigned int** db_tlvp
	);

	int
	:ref:`snd_tlv_get_dB_range<doxid-group___control_1gad1feefed923fc08f309c4fec2b0973e2>`(
		unsigned int* tlv,
		long rangemin,
		long rangemax,
		long* min,
		long* max
	);

	int
	:ref:`snd_tlv_convert_to_dB<doxid-group___control_1ga625c16724bddbb21b18ae3b2cbaefcda>`(
		unsigned int* tlv,
		long rangemin,
		long rangemax,
		long volume,
		long* db_gain
	);

	int
	:ref:`snd_tlv_convert_from_dB<doxid-group___control_1ga0ef60f47c8c82dd84816ae66346359a6>`(
		unsigned int* tlv,
		long rangemin,
		long rangemax,
		long db_gain,
		long* value,
		int xdir
	);

	int
	:ref:`snd_ctl_get_dB_range<doxid-group___control_1ga6ebf9a5917cdc2fee40245cdbc83a0c1>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id,
		long* min,
		long* max
	);

	int
	:ref:`snd_ctl_convert_to_dB<doxid-group___control_1gab44202cf8247874df15212d684a2b6ee>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id,
		long volume,
		long* db_gain
	);

	int
	:ref:`snd_ctl_convert_from_dB<doxid-group___control_1ga344c48d48be3f61d08ce911c462a3bf4>`(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id,
		long db_gain,
		long* value,
		int xdir
	);

	// macros

	#define :ref:`SND_CONTROL_DLSYM_VERSION<doxid-group___control_1ga2dc20c3f1d96252ba1f5563cfede392d>`
	#define :ref:`SND_CTL_ASYNC<doxid-group___control_1gadcbc5a476ffaf2b8d4dfd29a2cfaab3d>`
	#define :ref:`SND_CTL_EVENT_MASK_ADD<doxid-group___control_1ga10e8cc806d014989e7b162f24714e19a>`
	#define :ref:`SND_CTL_EVENT_MASK_INFO<doxid-group___control_1ga3ece7e72b3f4260f9ddd97aca2e1647a>`
	#define :ref:`SND_CTL_EVENT_MASK_REMOVE<doxid-group___control_1ga2648d4242f8d5be01ecc6e36bc2cf335>`
	#define :ref:`SND_CTL_EVENT_MASK_TLV<doxid-group___control_1ga68f2f8b90cf059427f9ee9864983e68f>`
	#define :ref:`SND_CTL_EVENT_MASK_VALUE<doxid-group___control_1gaf271a6ca621f746c45161f7106752e93>`
	#define :ref:`SND_CTL_NAME_CAPTURE<doxid-group___control_1ga7cfec74a12a6730bb37cd567ab66452e>`

	#define :ref:`SND_CTL_NAME_IEC958<doxid-group___control_1ga88837fca9c81a2ede579c78bd1354475>`( \
		expl, \
		direction, \
		what \
	)

	#define :ref:`SND_CTL_NAME_IEC958_CON_MASK<doxid-group___control_1gabf837ecf1bc3539b6beb1b58ecc1e5ff>`
	#define :ref:`SND_CTL_NAME_IEC958_DEFAULT<doxid-group___control_1ga671b467ee6f577d9408dbbadfc90a404>`
	#define :ref:`SND_CTL_NAME_IEC958_MASK<doxid-group___control_1ga9665d8a918307b0b2387d253c7580abf>`
	#define :ref:`SND_CTL_NAME_IEC958_NONE<doxid-group___control_1ga72c88b2e8c9a136e34635dcc5fc65fd1>`
	#define :ref:`SND_CTL_NAME_IEC958_PCM_STREAM<doxid-group___control_1gae49d00de709820b4a6d8b9b343e2a407>`
	#define :ref:`SND_CTL_NAME_IEC958_PRO_MASK<doxid-group___control_1ga662f187cdfe6e85da2a5d820fac40d2a>`
	#define :ref:`SND_CTL_NAME_IEC958_SWITCH<doxid-group___control_1gaa8afe0cd1e7e65507a3f19e3a3f3d293>`
	#define :ref:`SND_CTL_NAME_IEC958_VOLUME<doxid-group___control_1ga530cf8baa305078c23ff8fe1cc2f612e>`
	#define :ref:`SND_CTL_NAME_NONE<doxid-group___control_1ga172526f45150a21251b3421925641ad0>`
	#define :ref:`SND_CTL_NAME_PLAYBACK<doxid-group___control_1ga7c81ecb5b075437d0612bc33e5ac3131>`
	#define :ref:`SND_CTL_NONBLOCK<doxid-group___control_1gae8a46558414be5b5b3b7bed127ad4574>`
	#define :ref:`SND_CTL_POWER_D0<doxid-group___control_1gae4dc79ea76d20b9e84ca0564972db99f>`
	#define :ref:`SND_CTL_POWER_D1<doxid-group___control_1ga137b1c440315c12a17f938ba4c0bf38c>`
	#define :ref:`SND_CTL_POWER_D2<doxid-group___control_1ga01abf56e8703ef464bb271e8958962f8>`
	#define :ref:`SND_CTL_POWER_D3<doxid-group___control_1gac8cc37202adfe9a740580ac1036c482e>`
	#define :ref:`SND_CTL_POWER_D3cold<doxid-group___control_1ga029a112452f29d70c25391ea4e6723b2>`
	#define :ref:`SND_CTL_POWER_D3hot<doxid-group___control_1gac6bf5540f88d153cb2b4d96cfa2e65bf>`
	#define :ref:`SND_CTL_POWER_MASK<doxid-group___control_1gad11798fdf0ca20181d793660a50938a4>`
	#define :ref:`SND_CTL_READONLY<doxid-group___control_1gabd6e339ba7222d43f280abef3d3d47aa>`
	#define :ref:`SND_CTL_TLVT_CHMAP_FIXED<doxid-group___control_1ga59ee428ba00f0595d867a74fb304913e>`
	#define :ref:`SND_CTL_TLVT_CHMAP_PAIRED<doxid-group___control_1ga63c3b7754a51433fbe10d7ad15c7c264>`
	#define :ref:`SND_CTL_TLVT_CHMAP_VAR<doxid-group___control_1ga4a7450784b51c2d5ab51edd65279d1af>`
	#define :ref:`SND_CTL_TLVT_CONTAINER<doxid-group___control_1gaf5319578d0088b10c67339c8b1f644e7>`
	#define :ref:`SND_CTL_TLVT_DB_LINEAR<doxid-group___control_1ga3e80cc7e80dd6c56e2d9267d6a6ff9fc>`
	#define :ref:`SND_CTL_TLVT_DB_MINMAX<doxid-group___control_1ga779ef3d3fd0b658cef588fdbf6fa52be>`
	#define :ref:`SND_CTL_TLVT_DB_MINMAX_MUTE<doxid-group___control_1ga7a2bb21790739c2cfdf499d5c9748104>`
	#define :ref:`SND_CTL_TLVT_DB_RANGE<doxid-group___control_1ga9eff63d56cfb81df6d25d297270d6b60>`
	#define :ref:`SND_CTL_TLVT_DB_SCALE<doxid-group___control_1ga59b987c8f3cd26be848cec7171b7fb14>`
	#define :ref:`SND_CTL_TLV_DB_GAIN_MUTE<doxid-group___control_1ga5c4958da9d46cc400b24a6c47a413cfe>`
	#define :ref:`SND_SCTL_NOFREE<doxid-group___control_1gab1b68b9d8582822395782038025cb0dd>`
	#define :ref:`snd_ctl_card_info_alloca<doxid-group___control_1gafcb7ab1577c3963e0751365dc983a4cb>`(ptr)
	#define :ref:`snd_ctl_elem_id_alloca<doxid-group___control_1ga88b300eb8aa146d1eef29fbb6d8cb83a>`(ptr)
	#define :ref:`snd_ctl_elem_info_alloca<doxid-group___control_1ga4003d15d8c84d2405e922ba834d234f7>`(ptr)
	#define :ref:`snd_ctl_elem_list_alloca<doxid-group___control_1ga7ec1d6cea34670d5e43a841af212962f>`(ptr)
	#define :ref:`snd_ctl_elem_value_alloca<doxid-group___control_1ga262a26fa78978597c0baa7eecc5cb5fd>`(ptr)
	#define :ref:`snd_ctl_event_alloca<doxid-group___control_1gad7f958811a01272454badce1cf5bcbe7>`(ptr)

.. _details-group___control:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

The control interface. See :ref:`Control interface <doxid-control>` page for more details.

Typedefs
--------

.. index:: pair: typedef; snd_ctl_card_info_t
.. _doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct _snd_ctl_card_info snd_ctl_card_info_t

CTL card info container

.. index:: pair: typedef; snd_ctl_elem_id_t
.. _doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct _snd_ctl_elem_id snd_ctl_elem_id_t

CTL element identifier container

.. index:: pair: typedef; snd_ctl_elem_list_t
.. _doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct _snd_ctl_elem_list snd_ctl_elem_list_t

CTL element identifier list container

.. index:: pair: typedef; snd_ctl_elem_info_t
.. _doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct _snd_ctl_elem_info snd_ctl_elem_info_t

CTL element info container

.. index:: pair: typedef; snd_ctl_elem_value_t
.. _doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct _snd_ctl_elem_value snd_ctl_elem_value_t

CTL element value container

.. index:: pair: typedef; snd_ctl_event_t
.. _doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct _snd_ctl_event snd_ctl_event_t

CTL event container

.. index:: pair: typedef; snd_ctl_t
.. _doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct _snd_ctl snd_ctl_t

CTL handle

.. index:: pair: typedef; snd_sctl_t
.. _doxid-group___control_1ga89e065287b9deb65125cc5f1cfb48e07:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct _snd_sctl snd_sctl_t

SCTL type

Global Functions
----------------

.. index:: pair: function; snd_card_load
.. _doxid-group___control_1gabb7a76fa905fbae6481f78d1eea4feb1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_card_load(int card)

Try to load the driver for a card.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- card

		- Card number.



.. rubric:: Returns:

1 if driver is present, zero if driver is not present

.. index:: pair: function; snd_card_next
.. _doxid-group___control_1ga6fccc8a2d7d5ebd072a552a05855c145:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_card_next(int* card)

Try to determine the next card.

Tries to determine the next card from given card number. If card number is -1, then the first available card is returned. If the result card number is -1, no more cards are available.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- rcard

		- pointer to card number



.. rubric:: Returns:

zero if success, otherwise a negative error code

.. index:: pair: function; snd_card_get_index
.. _doxid-group___control_1ga1881c5c04a532f5b9397745731ce7730:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_card_get_index(const char* name)

Convert card string to an integer value.

The accepted format is an integer value in ASCII representation or the card identifier (the id parameter for sound-card drivers). The control device name like /dev/snd/controlC0 is accepted, too.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- string

		- String containing card identifier



.. rubric:: Returns:

zero if success, otherwise a negative error code

.. index:: pair: function; snd_card_get_name
.. _doxid-group___control_1gad48d44da8e3bfe150e928267008b8ff5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_card_get_name(
		int card,
		char** name
	)

Obtain the card name.

The value returned in name is allocated with strdup and should be freed when no longer used.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- card

		- Card number

	*
		- name

		- Result - card name corresponding to card number



.. rubric:: Returns:

zero if success, otherwise a negative error code

.. index:: pair: function; snd_card_get_longname
.. _doxid-group___control_1ga547dcead4a72f24db4a0f9f530f75228:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_card_get_longname(
		int card,
		char** name
	)

Obtain the card long name.

The value returned in name is allocated with strdup and should be freed when no longer used.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- card

		- Card number

	*
		- name

		- Result - card long name corresponding to card number



.. rubric:: Returns:

zero if success, otherwise a negative error code

.. index:: pair: function; snd_device_name_hint
.. _doxid-group___control_1gadf4ce9117fcfa454c523ed6e6bd8b353:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_device_name_hint(
		int card,
		const char* iface,
		void*** hints
	)

Get a set of device name hints.

hints will receive a NULL-terminated array of device name hints, which can be passed to :ref:`snd_device_name_get_hint <doxid-group___control_1ga8546500ca828392f03f5bba2e7813874>` to extract usable values. When no longer needed, hints should be passed to :ref:`snd_device_name_free_hint <doxid-group___control_1gad4cacf29df4616c2458fc84c1fde708c>` to release resources.

User-defined hints are gathered from namehint.IFACE tree like:

.. code-block:: none

	namehint.pcm {


	myfile "file:FILE=/tmp/soundwave.raw|Save sound output to /tmp/soundwave.raw"


	myplug "plug:front:Do all conversions for front speakers"


	}

Note: The device description is separated with '|' char.

Special variables: defaults.namehint.showall specifies if all device definitions are accepted (boolean type).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- card

		- Card number or -1 (means all cards)

	*
		- iface

		- Interface identification (like "pcm", "rawmidi", "timer", "seq")

	*
		- hints

		- Result - array of device name hints



.. rubric:: Returns:

zero if success, otherwise a negative error code

.. index:: pair: function; snd_device_name_free_hint
.. _doxid-group___control_1gad4cacf29df4616c2458fc84c1fde708c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_device_name_free_hint(void** hints)

Free a list of device name hints.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- hints

		- List to free



.. rubric:: Returns:

zero if success, otherwise a negative error code

.. index:: pair: function; snd_device_name_get_hint
.. _doxid-group___control_1ga8546500ca828392f03f5bba2e7813874:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	char*
	snd_device_name_get_hint(
		const void* hint,
		const char* id
	)

Extract a value from a hint.

List of valid IDs: NAME - name of device DESC - description of device IOID - input / output identification ("Input" or "Output"), NULL means both

The return value should be freed when no longer needed.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- hint

		- A pointer to hint

	*
		- id

		- Hint value to extract ("NAME", "DESC", or "IOID", see below)



.. rubric:: Returns:

an allocated ASCII string if success, otherwise NULL

.. index:: pair: function; snd_ctl_open
.. _doxid-group___control_1ga58537f5b74c9c1f51699f9908a0d7f56:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_open(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`** ctl,
		const char* name,
		int mode
	)

Opens a CTL.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctlp

		- Returned CTL handle

	*
		- name

		- ASCII identifier of the CTL handle

	*
		- mode

		- Open mode (see :ref:`SND_CTL_NONBLOCK <doxid-group___control_1gae8a46558414be5b5b3b7bed127ad4574>`, :ref:`SND_CTL_ASYNC <doxid-group___control_1gadcbc5a476ffaf2b8d4dfd29a2cfaab3d>`)



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_ctl_open_lconf
.. _doxid-group___control_1ga4a49cc71db1a7021be6ad880fcdbe4c9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_open_lconf(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`** ctl,
		const char* name,
		int mode,
		:ref:`snd_config_t<doxid-group___config_1ga1c20905af775ae77d04d1a5696f67985>`* lconf
	)

Opens a CTL using local configuration.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctlp

		- Returned CTL handle

	*
		- name

		- ASCII identifier of the CTL handle

	*
		- mode

		- Open mode (see :ref:`SND_CTL_NONBLOCK <doxid-group___control_1gae8a46558414be5b5b3b7bed127ad4574>`, :ref:`SND_CTL_ASYNC <doxid-group___control_1gadcbc5a476ffaf2b8d4dfd29a2cfaab3d>`)

	*
		- lconf

		- Local configuration



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_ctl_open_fallback
.. _doxid-group___control_1ga016fcf47dc9c17c06d6e0846ac0bba17:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_open_fallback(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`** ctl,
		:ref:`snd_config_t<doxid-group___config_1ga1c20905af775ae77d04d1a5696f67985>`* root,
		const char* name,
		const char* orig_name,
		int mode
	)

Opens a fallback CTL.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctlp

		- Returned CTL handle

	*
		- root

		- Configuration root

	*
		- name

		- ASCII identifier of the CTL handle used as fallback

	*
		- orig_name

		- The original ASCII name

	*
		- mode

		- Open mode (see :ref:`SND_CTL_NONBLOCK <doxid-group___control_1gae8a46558414be5b5b3b7bed127ad4574>`, :ref:`SND_CTL_ASYNC <doxid-group___control_1gadcbc5a476ffaf2b8d4dfd29a2cfaab3d>`)



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_ctl_close
.. _doxid-group___control_1gaf8510057afd178d7206221d85440ba5f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_close(:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl)

close CTL handle

Closes the specified CTL handle and frees all associated resources.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- CTL handle



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_ctl_nonblock
.. _doxid-group___control_1ga0898e6fe7a63a1c301794357a160587b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_nonblock(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		int nonblock
	)

set nonblock mode



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- CTL handle

	*
		- nonblock

		- 0 = block, 1 = nonblock mode, 2 = abort



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_async_add_ctl_handler
.. _doxid-group___control_1ga23813430fb81fecb0e95d1dfd688337d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_async_add_ctl_handler(
		:ref:`snd_async_handler_t<doxid-group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d>`** handler,
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_async_callback_t<doxid-group___global_1gaf8937eadd968df14b64e54f49c29821c>` callback,
		void* private_data
	)

Add an async handler for a CTL.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- handler

		- Returned handler handle

	*
		- ctl

		- CTL handle

	*
		- callback

		- Callback function

	*
		- private_data

		- Callback private data



.. rubric:: Returns:

0 otherwise a negative error code on failure

.. index:: pair: function; snd_async_handler_get_ctl
.. _doxid-group___control_1gaa693260ccd944d874229257e54dee404:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`*
	snd_async_handler_get_ctl(:ref:`snd_async_handler_t<doxid-group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d>`* handler)

Return CTL handle related to an async handler.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- handler

		- Async handler handle



.. rubric:: Returns:

CTL handle

.. index:: pair: function; snd_ctl_poll_descriptors_count
.. _doxid-group___control_1gad7761be890b679d7e7bb3a3e4453818b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_poll_descriptors_count(:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl)

get count of poll descriptors for CTL handle



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- CTL handle



.. rubric:: Returns:

count of poll descriptors

.. index:: pair: function; snd_ctl_poll_descriptors
.. _doxid-group___control_1gaae9e775c251024e253a4314b76c3c1f8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_poll_descriptors(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		struct pollfd* pfds,
		unsigned int space
	)

get poll descriptors



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- CTL handle

	*
		- pfds

		- array of poll descriptors

	*
		- space

		- space in the poll descriptor array



.. rubric:: Returns:

count of filled descriptors

.. index:: pair: function; snd_ctl_poll_descriptors_revents
.. _doxid-group___control_1gab4f2ac44c01f4ec3c02dca1945bf9155:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_poll_descriptors_revents(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		struct pollfd* pfds,
		unsigned int nfds,
		unsigned short* revents
	)

get returned events from poll descriptors



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- CTL handle

	*
		- pfds

		- array of poll descriptors

	*
		- nfds

		- count of poll descriptors

	*
		- revents

		- returned events



.. rubric:: Returns:

zero if success, otherwise a negative error code

.. index:: pair: function; snd_ctl_subscribe_events
.. _doxid-group___control_1gab56450393817e8ee1959fc4bcf5d2d15:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_subscribe_events(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		int subscribe
	)

Ask to be informed about events (poll, :ref:`snd_async_add_ctl_handler <doxid-group___control_1ga23813430fb81fecb0e95d1dfd688337d>`, :ref:`snd_ctl_read <doxid-group___control_1ga392a8f4afa2ba60e0ce6817f2a4f5e74>`)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- CTL handle

	*
		- subscribe

		- 0 = unsubscribe, 1 = subscribe, -1 = check subscribe or not



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_ctl_card_info
.. _doxid-group___control_1gaaa78539d04df0f1642d00c07a86d0fe8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_card_info(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* info
	)

Get card related information.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- CTL handle

	*
		- info

		- Card info pointer



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_ctl_elem_list
.. _doxid-group___control_1gab631f366b743f5afa0bb0344b42aad4b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_list(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* list
	)

Get a list of element identifiers.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- CTL handle

	*
		- list

		- CTL element identifiers list pointer



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_ctl_elem_info
.. _doxid-group___control_1gaa41caec9e14ea618fecfacfe68f1f7d7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_info(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* info
	)

Get CTL element information.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- CTL handle

	*
		- info

		- CTL element id/information pointer



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_ctl_elem_read
.. _doxid-group___control_1ga6577ee280d090136288fc5dd734867b9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_read(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* data
	)

Get CTL element value.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- CTL handle

	*
		- data

		- Data of an element.



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_ctl_elem_write
.. _doxid-group___control_1gac98376a37556e0d878b6aa43e7e64e27:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_write(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* data
	)

Set CTL element value.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- CTL handle

	*
		- data

		- Data of an element.

	*
		- 0

		- on success

	*
		- >0

		- on success when value was changed

	*
		- <0

		- a negative error code

.. index:: pair: function; snd_ctl_elem_lock
.. _doxid-group___control_1ga1fba1f7e08ab11505a617af5d54f4580:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_lock(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id
	)

Lock CTL element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- CTL handle

	*
		- id

		- CTL element id pointer



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_ctl_elem_unlock
.. _doxid-group___control_1gaf8b3191516b8b7debeb57192b71abf66:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_unlock(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id
	)

Unlock CTL element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- CTL handle

	*
		- id

		- CTL element id pointer



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_ctl_elem_tlv_read
.. _doxid-group___control_1ga56f9ce14ec4227de4f3a6b573f069481:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_tlv_read(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id,
		unsigned int* tlv,
		unsigned int tlv_size
	)

Read structured data from an element set to given buffer.

The format of an array of *tlv* argument is: tlv[0]: Type. One of SND_CTL_TLVT_XXX. tlv[1]: Length. The length of value in units of byte. tlv[2..]: Value. Depending on the type.

Details are described in <sound/tlv.h>.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- A handle of backend module for control interface.

	*
		- id

		- ID of an element.

	*
		- tlv

		- An array with members of unsigned int type.

	*
		- tlv_size

		- The length of the array.



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_ctl_elem_tlv_write
.. _doxid-group___control_1gaaa2c2da0a41904db5809dd4eade24c9c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_tlv_write(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id,
		const unsigned int* tlv
	)

Write structured data from given buffer to an element set.

The format of an array of *tlv* argument is: tlv[0]: Type. One of SND_CTL_TLVT_XXX. tlv[1]: Length. The length of value in units of byte. tlv[2..]: Value. Depending on the type.

Details are described in <sound/tlv.h>.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- A handle of backend module for control interface.

	*
		- id

		- ID of an element.

	*
		- tlv

		- An array with members of unsigned int type. The second member must represent total bytes of the rest of array.

	*
		- 0

		- on success

	*
		- >0

		- on success when value was changed

	*
		- <0

		- a negative error code

.. index:: pair: function; snd_ctl_elem_tlv_command
.. _doxid-group___control_1ga34d5e31c5ff25ab780893ab7534ab2d2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_tlv_command(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id,
		const unsigned int* tlv
	)

Process structured data from given buffer for an element set.

The format of an array of *tlv* argument is: tlv[0]: Type. One of SND_CTL_TLVT_XXX. tlv[1]: Length. The length of value in units of byte. tlv[2..]: Value. Depending on the type.

Details are described in <sound/tlv.h>.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- A handle of backend module for control interface.

	*
		- id

		- ID of an element.

	*
		- tlv

		- An array with members of unsigned int type. The second member must represent total bytes of the rest of array.

	*
		- 0

		- on success

	*
		- >0

		- on success when value was changed

	*
		- <0

		- a negative error code

.. index:: pair: function; snd_ctl_set_power_state
.. _doxid-group___control_1ga11ec9933829235513853f89bffdfd4e1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_set_power_state(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		unsigned int state
	)

Set Power State to given SND_CTL_POWER\_\* value and do the power management.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- CTL handle

	*
		- state

		- Desired Power State



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_ctl_get_power_state
.. _doxid-group___control_1gae554fc52f0371161471520aa60e970c6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_get_power_state(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		unsigned int* state
	)

Get actual Power State.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- CTL handle

	*
		- state

		- Destination value



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_ctl_read
.. _doxid-group___control_1ga392a8f4afa2ba60e0ce6817f2a4f5e74:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_read(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* event
	)

Read an event.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- CTL handle

	*
		- event

		- Event pointer



.. rubric:: Returns:

number of events read otherwise a negative error code on failure

.. index:: pair: function; snd_ctl_wait
.. _doxid-group___control_1ga7df5807d1853b39781078793afa7b895:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_wait(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		int timeout
	)

Wait for a CTL to become ready (i.e. at least one event pending)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- CTL handle

	*
		- timeout

		- maximum time in milliseconds to wait



.. rubric:: Returns:

0 otherwise a negative error code on failure

.. index:: pair: function; snd_ctl_name
.. _doxid-group___control_1ga202bfd5f82126770a2a7f79fe75501b9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_ctl_name(:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl)

get identifier of CTL handle

Returns the ASCII identifier of given CTL handle. It's the same identifier specified in :ref:`snd_ctl_open() <doxid-group___control_1ga58537f5b74c9c1f51699f9908a0d7f56>`.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- CTL handle



.. rubric:: Returns:

ascii identifier of CTL handle

.. index:: pair: function; snd_ctl_type
.. _doxid-group___control_1gafc6b41bf8de224f7b961cff768e41cc5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`snd_ctl_type_t<doxid-group___control_1ga9d0e18b3c1b8cb729d4561b968296a76>`
	snd_ctl_type(:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl)

get type of CTL handle

Returns the type :ref:`snd_ctl_type_t <doxid-group___control_1ga9d0e18b3c1b8cb729d4561b968296a76>` of given CTL handle.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- CTL handle



.. rubric:: Returns:

type of CTL handle

.. index:: pair: function; snd_ctl_elem_type_name
.. _doxid-group___control_1gaca10189720995695e836e7bf39cce570:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_ctl_elem_type_name(:ref:`snd_ctl_elem_type_t<doxid-group___control_1gac42e0ed6713b62711af5e80b4b3bcfec>` type)

get name of a CTL element type



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- type

		- CTL element type



.. rubric:: Returns:

ascii name of CTL element type

.. index:: pair: function; snd_ctl_elem_iface_name
.. _doxid-group___control_1ga6e85042ad0ecb60292c3d06cfe7b2a5e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_ctl_elem_iface_name(:ref:`snd_ctl_elem_iface_t<doxid-group___control_1ga14baa0febb91cc4c5d72dcc825acf518>` iface)

get name of a CTL element related interface



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- iface

		- CTL element related interface



.. rubric:: Returns:

ascii name of CTL element related interface

.. index:: pair: function; snd_ctl_event_type_name
.. _doxid-group___control_1gab06ee7470afa8d6ae55296d19bff1455:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_ctl_event_type_name(:ref:`snd_ctl_event_type_t<doxid-group___control_1ga76f2458eb5cde785a8fcdb555ed7fd57>` type)

get name of a CTL event type



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- type

		- CTL event type



.. rubric:: Returns:

ascii name of CTL event type

.. index:: pair: function; snd_ctl_event_elem_get_mask
.. _doxid-group___control_1ga1a71c2546aef7d240185fd203240d890:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_event_elem_get_mask(const :ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj)

Get event mask for an element related event.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL event



.. rubric:: Returns:

event mask for element related event

.. index:: pair: function; snd_ctl_event_elem_get_numid
.. _doxid-group___control_1gae1ecf3bdec2397722eaebbb2730de9d4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_event_elem_get_numid(const :ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj)

Get element numeric identifier for an element related event.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL event



.. rubric:: Returns:

element numeric identifier

.. index:: pair: function; snd_ctl_event_elem_get_id
.. _doxid-group___control_1ga84bad7e515406d566484e4faaa41962b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_event_elem_get_id(
		const :ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj,
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* ptr
	)

Get CTL element identifier for an element related event.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL event

	*
		- ptr

		- Pointer to returned CTL element identifier

.. index:: pair: function; snd_ctl_event_elem_get_interface
.. _doxid-group___control_1gaed43a3e150a98463b99993c8a4646595:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`snd_ctl_elem_iface_t<doxid-group___control_1ga14baa0febb91cc4c5d72dcc825acf518>`
	snd_ctl_event_elem_get_interface(const :ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj)

Get interface part of CTL element identifier for an element related event.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL event



.. rubric:: Returns:

interface part of element identifier

.. index:: pair: function; snd_ctl_event_elem_get_device
.. _doxid-group___control_1gaf96e6732e7d7d7d95e868518b7c47316:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_event_elem_get_device(const :ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj)

Get device part of CTL element identifier for an element related event.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL event



.. rubric:: Returns:

device part of element identifier

.. index:: pair: function; snd_ctl_event_elem_get_subdevice
.. _doxid-group___control_1gaaa0de2acc99d1aa07aff9e0542134a9c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_event_elem_get_subdevice(const :ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj)

Get subdevice part of CTL element identifier for an element related event.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL event



.. rubric:: Returns:

subdevice part of element identifier

.. index:: pair: function; snd_ctl_event_elem_get_name
.. _doxid-group___control_1ga79ef06a1957ccd0b784e1153e23ce25f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_ctl_event_elem_get_name(const :ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj)

Get name part of CTL element identifier for an element related event.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL event



.. rubric:: Returns:

name part of element identifier

.. index:: pair: function; snd_ctl_event_elem_get_index
.. _doxid-group___control_1gae69f9ba6fd89ac22af2421b801e69bbd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_event_elem_get_index(const :ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj)

Get index part of CTL element identifier for an element related event.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL event



.. rubric:: Returns:

index part of element identifier

.. index:: pair: function; snd_ctl_elem_list_alloc_space
.. _doxid-group___control_1ga504ad392b797b7f5277cd184aee96e66:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_list_alloc_space(
		:ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj,
		unsigned int entries
	)

allocate space for CTL element identifiers list



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifiers list

	*
		- entries

		- Entries to allocate



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_ctl_elem_list_free_space
.. _doxid-group___control_1ga7e8106e3e2f64d84d1c03ffe36bed388:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_list_free_space(:ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj)

free previously allocated space for CTL element identifiers list



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifiers list

.. index:: pair: function; snd_ctl_ascii_elem_id_get
.. _doxid-group___control_1ga4e4f251147f558bc2ad044e836e449d9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	char*
	snd_ctl_ascii_elem_id_get(:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id)

return ASCII CTL element identifier name

The string is allocated using strdup().



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- id

		- CTL identifier



.. rubric:: Returns:

ascii identifier of CTL element

.. index:: pair: function; snd_ctl_ascii_elem_id_parse
.. _doxid-group___control_1ga2f530217bd896e3c0498b3e46624977a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_ascii_elem_id_parse(
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* dst,
		const char* str
	)

parse ASCII string as CTL element identifier



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dst

		- destination CTL identifier

	*
		- str

		- source ASCII string



.. rubric:: Returns:

zero on success, otherwise a negative error code

.. index:: pair: function; snd_ctl_ascii_value_parse
.. _doxid-group___control_1ga05d994f242e8a524a94ea482689fa2c0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_ascii_value_parse(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* handle,
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* dst,
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* info,
		const char* value
	)

parse ASCII string as CTL element value

Note: For toggle command, the dst must contain previous (current) state (do the :ref:`snd_ctl_elem_read <doxid-group___control_1ga6577ee280d090136288fc5dd734867b9>` call to obtain it).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- handle

		- CTL handle

	*
		- dst

		- destination CTL element value

	*
		- info

		- CTL element info structure

	*
		- value

		- source ASCII string



.. rubric:: Returns:

zero on success, otherwise a negative error code

.. index:: pair: function; snd_ctl_elem_id_sizeof
.. _doxid-group___control_1gaf7047bf3d0336f2ed1bc876e512bfef7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	size_t
	snd_ctl_elem_id_sizeof(void)

get size of :ref:`snd_ctl_elem_id_t <doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`



.. rubric:: Returns:

size in bytes

.. index:: pair: function; snd_ctl_elem_id_malloc
.. _doxid-group___control_1gaa261f3721050a0ad4a43f28bcd6b082d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_id_malloc(:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`** ptr)

allocate an invalid :ref:`snd_ctl_elem_id_t <doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>` using standard malloc



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ptr

		- returned pointer



.. rubric:: Returns:

0 on success otherwise negative error code

.. index:: pair: function; snd_ctl_elem_id_free
.. _doxid-group___control_1ga0bb98b09bc352074219a7866d20f5816:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_id_free(:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj)

frees a previously allocated :ref:`snd_ctl_elem_id_t <doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to object to free

.. index:: pair: function; snd_ctl_elem_id_clear
.. _doxid-group___control_1gad21c1d92e9f82b41330dba1146c88734:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_id_clear(:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj)

clear given :ref:`snd_ctl_elem_id_t <doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>` object



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to object to clear

.. index:: pair: function; snd_ctl_elem_id_copy
.. _doxid-group___control_1ga411575334b5f4d6602206df72c6ac01a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_id_copy(
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* dst,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* src
	)

copy one :ref:`snd_ctl_elem_id_t <doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>` to another



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dst

		- pointer to destination

	*
		- src

		- pointer to source

.. index:: pair: function; snd_ctl_elem_id_get_numid
.. _doxid-group___control_1ga543f3de35c42f53f2ec2d24217fd4a43:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_elem_id_get_numid(const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj)

Get numeric identifier from a CTL element identifier.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifier



.. rubric:: Returns:

CTL element numeric identifier

.. index:: pair: function; snd_ctl_elem_id_get_interface
.. _doxid-group___control_1ga6932a5e3485140cd120dd8a9be8e6770:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`snd_ctl_elem_iface_t<doxid-group___control_1ga14baa0febb91cc4c5d72dcc825acf518>`
	snd_ctl_elem_id_get_interface(const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj)

Get interface part of a CTL element identifier.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifier



.. rubric:: Returns:

CTL element related interface

.. index:: pair: function; snd_ctl_elem_id_get_device
.. _doxid-group___control_1ga54c863a0cdc7c501b3e1d520137cfc69:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_elem_id_get_device(const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj)

Get device part of a CTL element identifier.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifier



.. rubric:: Returns:

CTL element related device

.. index:: pair: function; snd_ctl_elem_id_get_subdevice
.. _doxid-group___control_1ga5f3bb5a80842261a07c4ed99b05921b8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_elem_id_get_subdevice(const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj)

Get subdevice part of a CTL element identifier.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifier



.. rubric:: Returns:

CTL element related subdevice

.. index:: pair: function; snd_ctl_elem_id_get_name
.. _doxid-group___control_1gaa6cfea3ac963bfdaeb8189e03e927a76:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_ctl_elem_id_get_name(const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj)

Get name part of a CTL element identifier.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifier



.. rubric:: Returns:

CTL element name

.. index:: pair: function; snd_ctl_elem_id_get_index
.. _doxid-group___control_1gaebca4d84c661a50504b01b847f89289e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_elem_id_get_index(const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj)

Get index part of a CTL element identifier.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifier



.. rubric:: Returns:

CTL element index

.. index:: pair: function; snd_ctl_elem_id_set_numid
.. _doxid-group___control_1ga212d5ffe15e223dee2ebc58e3d57a7cd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_id_set_numid(
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj,
		unsigned int val
	)

Set numeric identifier for a CTL element identifier.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifier

	*
		- val

		- CTL element numeric identifier

.. index:: pair: function; snd_ctl_elem_id_set_interface
.. _doxid-group___control_1ga33855eaf0261c321cbf0a88baf290418:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_id_set_interface(
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj,
		:ref:`snd_ctl_elem_iface_t<doxid-group___control_1ga14baa0febb91cc4c5d72dcc825acf518>` val
	)

Set interface part for a CTL element identifier.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifier

	*
		- val

		- CTL element related interface

.. index:: pair: function; snd_ctl_elem_id_set_device
.. _doxid-group___control_1ga2c893cc444dbc0e4293e3a6fec7b27a8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_id_set_device(
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj,
		unsigned int val
	)

Set device part for a CTL element identifier.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifier

	*
		- val

		- CTL element related device

.. index:: pair: function; snd_ctl_elem_id_set_subdevice
.. _doxid-group___control_1ga8eb060cb64d7cce2c82d04560bf675eb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_id_set_subdevice(
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj,
		unsigned int val
	)

Set subdevice part for a CTL element identifier.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifier

	*
		- val

		- CTL element related subdevice

.. index:: pair: function; snd_ctl_elem_id_set_name
.. _doxid-group___control_1ga813d02a44a9d01a4a2fe81eda7a8670a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_id_set_name(
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj,
		const char* val
	)

Set name part for a CTL element identifier.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifier

	*
		- val

		- CTL element name

.. index:: pair: function; snd_ctl_elem_id_set_index
.. _doxid-group___control_1ga65af30a51becd092f6da1e357fc46094:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_id_set_index(
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* obj,
		unsigned int val
	)

Set index part for a CTL element identifier.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifier

	*
		- val

		- CTL element index

.. index:: pair: function; snd_ctl_card_info_sizeof
.. _doxid-group___control_1ga5cfad24c04eb3576a1945757ff420944:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	size_t
	snd_ctl_card_info_sizeof(void)

get size of :ref:`snd_ctl_card_info_t <doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`



.. rubric:: Returns:

size in bytes

.. index:: pair: function; snd_ctl_card_info_malloc
.. _doxid-group___control_1ga518166f64f41361629ee7bfe0caca9fc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_card_info_malloc(:ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`** ptr)

allocate an invalid :ref:`snd_ctl_card_info_t <doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>` using standard malloc



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ptr

		- returned pointer



.. rubric:: Returns:

0 on success otherwise negative error code

.. index:: pair: function; snd_ctl_card_info_free
.. _doxid-group___control_1ga62360e5fdd3c5644ca7e260099fba67e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_card_info_free(:ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* obj)

frees a previously allocated :ref:`snd_ctl_card_info_t <doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to object to free

.. index:: pair: function; snd_ctl_card_info_clear
.. _doxid-group___control_1ga3a4851500ca8a98927b16b772cda8787:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_card_info_clear(:ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* obj)

clear given :ref:`snd_ctl_card_info_t <doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>` object



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to object to clear

.. index:: pair: function; snd_ctl_card_info_copy
.. _doxid-group___control_1gac2afd00836fb59d31cf759a8e48a622e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_card_info_copy(
		:ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* dst,
		const :ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* src
	)

copy one :ref:`snd_ctl_card_info_t <doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>` to another



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dst

		- pointer to destination

	*
		- src

		- pointer to source

.. index:: pair: function; snd_ctl_card_info_get_card
.. _doxid-group___control_1ga14863e13659cd0a02d3716923512dd85:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_card_info_get_card(const :ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* obj)

Get card number from a CTL card info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL card info



.. rubric:: Returns:

card number

.. index:: pair: function; snd_ctl_card_info_get_id
.. _doxid-group___control_1gaadadbd2d4aef000a30ec4c1c949326cc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_ctl_card_info_get_id(const :ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* obj)

Get card identifier from a CTL card info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL card info



.. rubric:: Returns:

card identifier

.. index:: pair: function; snd_ctl_card_info_get_driver
.. _doxid-group___control_1ga4abf685f77a8fa8dd14232397cab6f71:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_ctl_card_info_get_driver(const :ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* obj)

Get card driver name from a CTL card info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL card info



.. rubric:: Returns:

card driver name

.. index:: pair: function; snd_ctl_card_info_get_name
.. _doxid-group___control_1gae71617c9deadee635b0ad38ca9aaf746:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_ctl_card_info_get_name(const :ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* obj)

Get card name from a CTL card info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL card info



.. rubric:: Returns:

card name

.. index:: pair: function; snd_ctl_card_info_get_longname
.. _doxid-group___control_1ga54a54f4b1cc3740eafba54b1cc1b8111:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_ctl_card_info_get_longname(const :ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* obj)

Get card long name from a CTL card info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL card info



.. rubric:: Returns:

card long name

.. index:: pair: function; snd_ctl_card_info_get_mixername
.. _doxid-group___control_1gae2a4719572de955480043dd34840579b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_ctl_card_info_get_mixername(const :ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* obj)

Get card mixer name from a CTL card info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL card info



.. rubric:: Returns:

card mixer name

.. index:: pair: function; snd_ctl_card_info_get_components
.. _doxid-group___control_1ga2181aa6bf919fd1342b259d2f3af755b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_ctl_card_info_get_components(const :ref:`snd_ctl_card_info_t<doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>`* obj)

Get card component list from a CTL card info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL card info



.. rubric:: Returns:

card mixer identifier

.. index:: pair: function; snd_ctl_event_sizeof
.. _doxid-group___control_1ga56f526a146d913e36802b6c4a0daf86b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	size_t
	snd_ctl_event_sizeof(void)

get size of :ref:`snd_ctl_event_t <doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`



.. rubric:: Returns:

size in bytes

.. index:: pair: function; snd_ctl_event_malloc
.. _doxid-group___control_1ga2b38df9f5233dd8290a80682011f7907:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_event_malloc(:ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`** ptr)

allocate an invalid :ref:`snd_ctl_event_t <doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>` using standard malloc



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ptr

		- returned pointer



.. rubric:: Returns:

0 on success otherwise negative error code

.. index:: pair: function; snd_ctl_event_free
.. _doxid-group___control_1ga63ff10dda4a7e6b4055a0f3438c7781f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_event_free(:ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj)

frees a previously allocated :ref:`snd_ctl_event_t <doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to object to free

.. index:: pair: function; snd_ctl_event_clear
.. _doxid-group___control_1ga784c560c92df4179019bb3a29e1a4791:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_event_clear(:ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj)

clear given :ref:`snd_ctl_event_t <doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>` object



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to object to clear

.. index:: pair: function; snd_ctl_event_copy
.. _doxid-group___control_1ga6d8375f54af11001b829f1e3054eccef:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_event_copy(
		:ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* dst,
		const :ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* src
	)

copy one :ref:`snd_ctl_event_t <doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>` to another



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dst

		- pointer to destination

	*
		- src

		- pointer to source

.. index:: pair: function; snd_ctl_event_get_type
.. _doxid-group___control_1ga2a7d413bb515e07dc4f933aa187324d9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`snd_ctl_event_type_t<doxid-group___control_1ga76f2458eb5cde785a8fcdb555ed7fd57>`
	snd_ctl_event_get_type(const :ref:`snd_ctl_event_t<doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>`* obj)

Get type of a CTL event.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL event



.. rubric:: Returns:

CTL event type

.. index:: pair: function; snd_ctl_elem_list_sizeof
.. _doxid-group___control_1ga6a2a5b5258da9959ddbcacf94a0619f2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	size_t
	snd_ctl_elem_list_sizeof(void)

get size of :ref:`snd_ctl_elem_list_t <doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`



.. rubric:: Returns:

size in bytes

.. index:: pair: function; snd_ctl_elem_list_malloc
.. _doxid-group___control_1gab57f2acf2e5abdc9c46c19fe2bad9397:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_list_malloc(:ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`** ptr)

allocate an invalid :ref:`snd_ctl_elem_list_t <doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>` using standard malloc



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ptr

		- returned pointer



.. rubric:: Returns:

0 on success otherwise negative error code

.. index:: pair: function; snd_ctl_elem_list_free
.. _doxid-group___control_1ga9141e579ac00e56fa01af4cd710acef5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_list_free(:ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj)

frees a previously allocated :ref:`snd_ctl_elem_list_t <doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to object to free

.. index:: pair: function; snd_ctl_elem_list_clear
.. _doxid-group___control_1ga0aac385223908ae12a8d2f68d6105990:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_list_clear(:ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj)

clear given :ref:`snd_ctl_elem_list_t <doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>` object



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to object to clear

.. index:: pair: function; snd_ctl_elem_list_copy
.. _doxid-group___control_1gab945b6a9107a41d5cca414098711511e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_list_copy(
		:ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* dst,
		const :ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* src
	)

copy one :ref:`snd_ctl_elem_list_t <doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>` to another



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dst

		- pointer to destination

	*
		- src

		- pointer to source

.. index:: pair: function; snd_ctl_elem_list_set_offset
.. _doxid-group___control_1gadc7b2d590c27c684ad2a076f11a8b31f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_list_set_offset(
		:ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj,
		unsigned int val
	)

Set index of first wanted CTL element identifier in a CTL element identifiers list.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifiers list

	*
		- val

		- index of CTL element to put at position 0 of list

.. index:: pair: function; snd_ctl_elem_list_get_used
.. _doxid-group___control_1ga2462c05a56bab424686f3d442ba8820f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_elem_list_get_used(const :ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj)

Get number of used entries in CTL element identifiers list.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifier list



.. rubric:: Returns:

number of used entries

.. index:: pair: function; snd_ctl_elem_list_get_count
.. _doxid-group___control_1ga0a1206d8f19aa67a32577f523ee92c12:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_elem_list_get_count(const :ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj)

Get total count of elements present in CTL device (information present in every filled CTL element identifiers list)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifier list



.. rubric:: Returns:

total number of elements

.. index:: pair: function; snd_ctl_elem_list_get_id
.. _doxid-group___control_1ga73fe33f4f45b80d36137dd1371e34ea1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_list_get_id(
		const :ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj,
		unsigned int idx,
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* ptr
	)

Get CTL element identifier for an entry of a CTL element identifiers list.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifier list

	*
		- idx

		- Index of entry

	*
		- ptr

		- Pointer to returned CTL element identifier

.. index:: pair: function; snd_ctl_elem_list_get_numid
.. _doxid-group___control_1ga6ee1e4b5b790f08bdcc78f3a2685aa5e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_elem_list_get_numid(
		const :ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj,
		unsigned int idx
	)

Get CTL element numeric identifier for an entry of a CTL element identifiers list.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifier list

	*
		- idx

		- Index of entry



.. rubric:: Returns:

CTL element numeric identifier

.. index:: pair: function; snd_ctl_elem_list_get_interface
.. _doxid-group___control_1ga72a7235ee8e366a4b8e7c63b0189f512:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`snd_ctl_elem_iface_t<doxid-group___control_1ga14baa0febb91cc4c5d72dcc825acf518>`
	snd_ctl_elem_list_get_interface(
		const :ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj,
		unsigned int idx
	)

Get interface part of CTL element identifier for an entry of a CTL element identifiers list.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifier list

	*
		- idx

		- Index of entry



.. rubric:: Returns:

CTL element related interface

.. index:: pair: function; snd_ctl_elem_list_get_device
.. _doxid-group___control_1gae906aa0c657dd15300ab451436a318b1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_elem_list_get_device(
		const :ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj,
		unsigned int idx
	)

Get device part of CTL element identifier for an entry of a CTL element identifiers list.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifier list

	*
		- idx

		- Index of entry



.. rubric:: Returns:

CTL element related device

.. index:: pair: function; snd_ctl_elem_list_get_subdevice
.. _doxid-group___control_1ga809aec8df62a6cc5a289829e4171f5b3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_elem_list_get_subdevice(
		const :ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj,
		unsigned int idx
	)

Get subdevice part of CTL element identifier for an entry of a CTL element identifiers list.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifier list

	*
		- idx

		- Index of entry



.. rubric:: Returns:

CTL element related subdevice

.. index:: pair: function; snd_ctl_elem_list_get_name
.. _doxid-group___control_1ga819a69351b60fd868a09ae41323deb22:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_ctl_elem_list_get_name(
		const :ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj,
		unsigned int idx
	)

Get name part of CTL element identifier for an entry of a CTL element identifiers list.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifier list

	*
		- idx

		- Index of entry



.. rubric:: Returns:

CTL element name

.. index:: pair: function; snd_ctl_elem_list_get_index
.. _doxid-group___control_1ga1d2c5fea3dcdc132d40dce39e9ca9f00:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_elem_list_get_index(
		const :ref:`snd_ctl_elem_list_t<doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>`* obj,
		unsigned int idx
	)

Get index part of CTL element identifier for an entry of a CTL element identifiers list.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element identifier list

	*
		- idx

		- Index of entry



.. rubric:: Returns:

CTL element index

.. index:: pair: function; snd_ctl_elem_info_sizeof
.. _doxid-group___control_1ga0758621321c3b86a5bcb542b8b931236:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	size_t
	snd_ctl_elem_info_sizeof(void)

get size of :ref:`snd_ctl_elem_info_t <doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`



.. rubric:: Returns:

size in bytes

.. index:: pair: function; snd_ctl_elem_info_malloc
.. _doxid-group___control_1ga54387df99f25dc01635568fbc6bf6ad0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_info_malloc(:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`** ptr)

allocate an invalid :ref:`snd_ctl_elem_info_t <doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>` using standard malloc



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ptr

		- returned pointer



.. rubric:: Returns:

0 on success otherwise negative error code

.. index:: pair: function; snd_ctl_elem_info_free
.. _doxid-group___control_1ga8c55080b76401a03eede7d92e4e1cc4d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_info_free(:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

frees a previously allocated :ref:`snd_ctl_elem_info_t <doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to object to free

.. index:: pair: function; snd_ctl_elem_info_clear
.. _doxid-group___control_1ga4b7173cf1df342a66dbc44dc9ebd07ec:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_info_clear(:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

clear given :ref:`snd_ctl_elem_info_t <doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>` object



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to object to clear

.. index:: pair: function; snd_ctl_elem_info_copy
.. _doxid-group___control_1ga763d0832ab8b9096e96f5a15021f73d8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_info_copy(
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* dst,
		const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* src
	)

copy one :ref:`snd_ctl_elem_info_t <doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>` to another



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dst

		- pointer to destination

	*
		- src

		- pointer to source

.. index:: pair: function; snd_ctl_elem_info_get_type
.. _doxid-group___control_1ga0fec5d22ee58d04f14b59f405adc595e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`snd_ctl_elem_type_t<doxid-group___control_1gac42e0ed6713b62711af5e80b4b3bcfec>`
	snd_ctl_elem_info_get_type(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get type from a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

CTL element content type

.. index:: pair: function; snd_ctl_elem_info_is_readable
.. _doxid-group___control_1gabe355f33a84b3c3d18b3c72f5981dc6e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_info_is_readable(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get info about readability from a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

0 if element is not readable, 1 if element is readable

.. index:: pair: function; snd_ctl_elem_info_is_writable
.. _doxid-group___control_1ga3289cc7acb4fc4de184cd67c295f1866:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_info_is_writable(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get info about writability from a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

0 if element is not writable, 1 if element is not writable

.. index:: pair: function; snd_ctl_elem_info_is_volatile
.. _doxid-group___control_1ga7d191b706824318c943a6b172a7531fd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_info_is_volatile(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get info about notification feasibility from a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

0 if all element value changes are notified to subscribed applications, 1 otherwise

.. index:: pair: function; snd_ctl_elem_info_is_inactive
.. _doxid-group___control_1ga387a4cb6a4d80b3ca2b4d734368eb219:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_info_is_inactive(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get info about status from a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

0 if element value is not active, 1 if is active

.. index:: pair: function; snd_ctl_elem_info_is_locked
.. _doxid-group___control_1ga1d37f2ff9ff7b1b367b7d804f7b2b7ad:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_info_is_locked(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get info whether an element is locked.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

0 if element value is currently changeable, 1 if it's locked by another application

.. index:: pair: function; snd_ctl_elem_info_is_tlv_readable
.. _doxid-group___control_1gaac6bb412e5a9fffb5509e98a10de45b5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_info_is_tlv_readable(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get info about TLV readability from a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

0 if element's TLV is not readable, 1 if element's TLV is readable

.. index:: pair: function; snd_ctl_elem_info_is_tlv_writable
.. _doxid-group___control_1gacfbaae80d710b6feac682f8ba10a0341:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_info_is_tlv_writable(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get info about TLV writeability from a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

0 if element's TLV is not writable, 1 if element's TLV is writable

.. index:: pair: function; snd_ctl_elem_info_is_tlv_commandable
.. _doxid-group___control_1ga7625ff65bed60802f15bf143de4860a6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_info_is_tlv_commandable(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get info about TLV command possibility from a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

0 if element's TLV command is not possible, 1 if element's TLV command is supported

.. index:: pair: function; snd_ctl_elem_info_is_owner
.. _doxid-group___control_1ga7d40439e43a49e1ac6c694b7b617329c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_info_is_owner(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get info if I own an element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

0 if element value is currently changeable, 1 if it's locked by another application

.. index:: pair: function; snd_ctl_elem_info_is_user
.. _doxid-group___control_1ga34dc2e7013fe367a5acac79a1a13a814:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_info_is_user(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get info if it's a user element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

0 if element value is a system element, 1 if it's a user-created element

.. index:: pair: function; snd_ctl_elem_info_get_owner
.. _doxid-group___control_1ga934e489d5d48a24575a425d64e0f2db0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	pid_t
	snd_ctl_elem_info_get_owner(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get owner of a locked element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

value entries count

.. index:: pair: function; snd_ctl_elem_info_get_count
.. _doxid-group___control_1gaa75a20d4190d324bcda5fd6659a4b377:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_elem_info_get_count(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get number of value entries from a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

value entries count

.. index:: pair: function; snd_ctl_elem_info_get_min
.. _doxid-group___control_1gac8bcc954ddaae99174f97adc6116a6a1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	long
	snd_ctl_elem_info_get_min(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get minimum value from a :ref:`SND_CTL_ELEM_TYPE_INTEGER <doxid-group___control_1ggac42e0ed6713b62711af5e80b4b3bcfeca4248a1a1ea07ebfaf61f3b6675868519>` CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

Minimum value

.. index:: pair: function; snd_ctl_elem_info_get_max
.. _doxid-group___control_1ga6d9da5653ce5d149e1b9ed0b26eaae22:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	long
	snd_ctl_elem_info_get_max(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get maximum value from a :ref:`SND_CTL_ELEM_TYPE_INTEGER <doxid-group___control_1ggac42e0ed6713b62711af5e80b4b3bcfeca4248a1a1ea07ebfaf61f3b6675868519>` CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

Maximum value

.. index:: pair: function; snd_ctl_elem_info_get_step
.. _doxid-group___control_1ga871c7c81aae5c41c2368a85c1ca1f407:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	long
	snd_ctl_elem_info_get_step(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get value step from a :ref:`SND_CTL_ELEM_TYPE_INTEGER <doxid-group___control_1ggac42e0ed6713b62711af5e80b4b3bcfeca4248a1a1ea07ebfaf61f3b6675868519>` CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

Step

.. index:: pair: function; snd_ctl_elem_info_get_min64
.. _doxid-group___control_1ga5e6bb136caa4d8c9a43e8d8f8e310893:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	long long
	snd_ctl_elem_info_get_min64(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get minimum value from a :ref:`SND_CTL_ELEM_TYPE_INTEGER64 <doxid-group___control_1ggac42e0ed6713b62711af5e80b4b3bcfeca49b30ff41d10d784a98b9bb8636dce81>` CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

Minimum value

.. index:: pair: function; snd_ctl_elem_info_get_max64
.. _doxid-group___control_1ga7e74e6ecf31560bd4c4b85464f7ba54b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	long long
	snd_ctl_elem_info_get_max64(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get maximum value from a :ref:`SND_CTL_ELEM_TYPE_INTEGER64 <doxid-group___control_1ggac42e0ed6713b62711af5e80b4b3bcfeca49b30ff41d10d784a98b9bb8636dce81>` CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

Maximum value

.. index:: pair: function; snd_ctl_elem_info_get_step64
.. _doxid-group___control_1ga35177e37f86eeb8c9fe31c3a8438c9ce:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	long long
	snd_ctl_elem_info_get_step64(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get value step from a :ref:`SND_CTL_ELEM_TYPE_INTEGER64 <doxid-group___control_1ggac42e0ed6713b62711af5e80b4b3bcfeca49b30ff41d10d784a98b9bb8636dce81>` CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

Step

.. index:: pair: function; snd_ctl_elem_info_get_items
.. _doxid-group___control_1gabe5a218f256ac95ec295a175ec544453:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_elem_info_get_items(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get number of items available from a :ref:`SND_CTL_ELEM_TYPE_ENUMERATED <doxid-group___control_1ggac42e0ed6713b62711af5e80b4b3bcfecabfb38dcb8ca021f3f3a09261b3b8cb43>` CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

items count

.. index:: pair: function; snd_ctl_elem_info_set_item
.. _doxid-group___control_1ga3cc2ead5a5628661976507fed4c38182:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_info_set_item(
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj,
		unsigned int val
	)

Select item in a :ref:`SND_CTL_ELEM_TYPE_ENUMERATED <doxid-group___control_1ggac42e0ed6713b62711af5e80b4b3bcfecabfb38dcb8ca021f3f3a09261b3b8cb43>` CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info

	*
		- val

		- item number

.. index:: pair: function; snd_ctl_elem_info_get_item_name
.. _doxid-group___control_1gaf54afbedeb76d572bd6c6d064ce4b51b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_ctl_elem_info_get_item_name(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get name for selected item in a :ref:`SND_CTL_ELEM_TYPE_ENUMERATED <doxid-group___control_1ggac42e0ed6713b62711af5e80b4b3bcfecabfb38dcb8ca021f3f3a09261b3b8cb43>` CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

name of chosen item

.. index:: pair: function; snd_ctl_elem_info_get_dimensions
.. _doxid-group___control_1ga163546600efa29d822a4567706a8443a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_info_get_dimensions(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get count of dimensions for given element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

zero value if no dimensions are defined, otherwise positive value with count of dimensions

.. index:: pair: function; snd_ctl_elem_info_get_dimension
.. _doxid-group___control_1ga221900fb2b2c68e8cefda697874b83ba:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_info_get_dimension(
		const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj,
		unsigned int idx
	)

Get specified of dimension width for given element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info

	*
		- idx

		- The dimension index



.. rubric:: Returns:

zero value if no dimension width is defined, otherwise positive value with with of specified dimension

.. index:: pair: function; snd_ctl_elem_info_set_dimension
.. _doxid-group___control_1gaf2af53f06728255d07a1456fe51303c7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_info_set_dimension(
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* info,
		const int dimension[4]
	)

Set width to a specified dimension level of given element information.

.. list-table::
	:widths: 20 80

	*
		- -EINVAL

		- Invalid arguments are given as parameters.

This function is added in version 1.1.2.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- Information of an element.

	*
		- dimension

		- Dimension width for each level by member unit.



.. rubric:: Returns:

Zero on success, otherwise a negative error code.

.. index:: pair: function; snd_ctl_elem_info_get_id
.. _doxid-group___control_1ga4bf366ee3700fdc6073dae01724c2119:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_info_get_id(
		const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj,
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* ptr
	)

Get CTL element identifier of a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info

	*
		- ptr

		- Pointer to returned CTL element identifier

.. index:: pair: function; snd_ctl_elem_info_get_numid
.. _doxid-group___control_1gac0875375abf0477b84b6022faaa683f4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_elem_info_get_numid(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get element numeric identifier of a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

element numeric identifier

.. index:: pair: function; snd_ctl_elem_info_get_interface
.. _doxid-group___control_1gac0de27f217d38543ce1b2d5902766a46:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`snd_ctl_elem_iface_t<doxid-group___control_1ga14baa0febb91cc4c5d72dcc825acf518>`
	snd_ctl_elem_info_get_interface(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get interface part of CTL element identifier of a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

interface part of element identifier

.. index:: pair: function; snd_ctl_elem_info_get_device
.. _doxid-group___control_1ga344f683cf6fac46e0ce8fbdf45ada99a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_elem_info_get_device(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get device part of CTL element identifier of a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

device part of element identifier

.. index:: pair: function; snd_ctl_elem_info_get_subdevice
.. _doxid-group___control_1gae53373c67b013e3473caad0258c3bdc3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_elem_info_get_subdevice(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get subdevice part of CTL element identifier of a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

subdevice part of element identifier

.. index:: pair: function; snd_ctl_elem_info_get_name
.. _doxid-group___control_1ga3af223c6ba6185a7326f852390697914:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_ctl_elem_info_get_name(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get name part of CTL element identifier of a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

name part of element identifier

.. index:: pair: function; snd_ctl_elem_info_get_index
.. _doxid-group___control_1ga49d0d01aca3e2c61ca7cd7baa295d0ee:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_elem_info_get_index(const :ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj)

Get index part of CTL element identifier of a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info



.. rubric:: Returns:

index part of element identifier

.. index:: pair: function; snd_ctl_elem_info_set_id
.. _doxid-group___control_1ga8aa6f699266b217b21c75b04dbdbe2b3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_info_set_id(
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* ptr
	)

Set CTL element identifier of a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info

	*
		- ptr

		- CTL element identifier

.. index:: pair: function; snd_ctl_elem_info_set_numid
.. _doxid-group___control_1ga13dcca5b02535c50c3f5efa2bc03c736:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_info_set_numid(
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj,
		unsigned int val
	)

Set element numeric identifier of a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info

	*
		- val

		- element numeric identifier

.. index:: pair: function; snd_ctl_elem_info_set_interface
.. _doxid-group___control_1ga49d7a2129b74609a8865e835e154d454:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_info_set_interface(
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj,
		:ref:`snd_ctl_elem_iface_t<doxid-group___control_1ga14baa0febb91cc4c5d72dcc825acf518>` val
	)

Set interface part of CTL element identifier of a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info

	*
		- val

		- interface part of element identifier

.. index:: pair: function; snd_ctl_elem_info_set_device
.. _doxid-group___control_1ga87d5d9c4fe092f02267e0b36397fac88:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_info_set_device(
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj,
		unsigned int val
	)

Set device part of CTL element identifier of a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info

	*
		- val

		- device part of element identifier

.. index:: pair: function; snd_ctl_elem_info_set_subdevice
.. _doxid-group___control_1gab22e8223972fb7aa8a6e6abe49306b4d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_info_set_subdevice(
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj,
		unsigned int val
	)

Set subdevice part of CTL element identifier of a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info

	*
		- val

		- subdevice part of element identifier

.. index:: pair: function; snd_ctl_elem_info_set_name
.. _doxid-group___control_1ga40fffad33e859d27314dde76d9dffebb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_info_set_name(
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj,
		const char* val
	)

Set name part of CTL element identifier of a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info

	*
		- val

		- name part of element identifier

.. index:: pair: function; snd_ctl_elem_info_set_index
.. _doxid-group___control_1gacc80a95a945e31f3125a3ab4d908a464:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_info_set_index(
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* obj,
		unsigned int val
	)

Set index part of CTL element identifier of a CTL element id/info.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- CTL element id/info

	*
		- val

		- index part of element identifier

.. index:: pair: function; snd_ctl_add_integer_elem_set
.. _doxid-group___control_1gacc94fec73b3b56f87872e8fec0c3e9f1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_add_integer_elem_set(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* info,
		unsigned int element_count,
		unsigned int member_count,
		long min,
		long max,
		long step
	)

Create and add some user-defined control elements of integer type.

This function creates some user elements with integer type. These elements are not controlled by device drivers in kernel. They can be operated by the same way as usual elements added by the device drivers.

The name field of *id* must be set with unique value to identify new control elements. After returning, all fields of *id* are filled. A element can be identified by the combination of name and index, or by numid.

All of members in the new elements are locked. The value of each member is initialized with the minimum value.

.. list-table::
	:widths: 20 80

	*
		- -EBUSY

		- A element with ID *id* already exists.

	*
		- -EINVAL

		- Some arguments include invalid value; i.e. ID field in *info* has no name, or the number of members is not between 1 to 127.

	*
		- -ENOMEM

		- Out of memory, or there are too many user elements.

	*
		- -ENXIO

		- This backend module does not support user elements of integer type.

	*
		- -ENODEV

		- Device unplugged.

This function is added in version 1.1.2.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- A handle of backend module for control interface.

	*
		- info

		- Common iformation for a new element set, with ID of the first new element.

	*
		- element_count

		- The number of elements added by this operation.

	*
		- member_count

		- The number of members which a element has to represent its states.

	*
		- min

		- Minimum value for each member of the elements.

	*
		- max

		- Maximum value for each member of the elements.

	*
		- step

		- The step of value for each member in the elements.



.. rubric:: Returns:

Zero on success, otherwise a negative error code.

.. index:: pair: function; snd_ctl_add_integer64_elem_set
.. _doxid-group___control_1ga2ab4992e6c9506bc8b8c0581808c2324:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_add_integer64_elem_set(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* info,
		unsigned int element_count,
		unsigned int member_count,
		long long min,
		long long max,
		long long step
	)

Create and add some user-defined control elements of integer64 type.

This function creates some user elements with integer64 type. These elements are not controlled by device drivers in kernel. They can be operated by the same way as usual elements added by the device drivers.

The name field of *id* must be set with unique value to identify new control elements. After returning, all fields of *id* are filled. A element can be identified by the combination of name and index, or by numid.

All of members in the new elements are locked. The value of each member is initialized with the minimum value.

.. list-table::
	:widths: 20 80

	*
		- -EBUSY

		- A element with ID *id* already exists.

	*
		- -EINVAL

		- Some arguments include invalid value; i.e. ID has no name, or the number of members is not between 1 to 127.

	*
		- -ENOMEM

		- Out of memory, or there are too many user elements.

	*
		- -ENXIO

		- This backend module does not support user elements of integer64 type.

	*
		- -ENODEV

		- Device unplugged.

This function is added in version 1.1.2.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- A handle of backend module for control interface.

	*
		- info

		- Common iformation for a new element set, with ID of the first new element.

	*
		- element_count

		- The number of elements added by this operation.

	*
		- member_count

		- The number of members which a element has to represent its states.

	*
		- min

		- Minimum value for each member of the elements.

	*
		- max

		- Maximum value for each member of the elements.

	*
		- step

		- The step of value for each member in the elements.



.. rubric:: Returns:

Zero on success, otherwise a negative error code.

.. index:: pair: function; snd_ctl_add_boolean_elem_set
.. _doxid-group___control_1gaff7e95b329528fac338d13f428bec02c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_add_boolean_elem_set(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* info,
		unsigned int element_count,
		unsigned int member_count
	)

Create and add some user-defined control elements of boolean type.

This function creates some user elements with boolean type. These elements are not controlled by device drivers in kernel. They can be operated by the same way as usual elements added by the device drivers.

The name field of *id* must be set with unique value to identify new control elements. After returning, all fields of *id* are filled. A element can be identified by the combination of name and index, or by numid.

All of members in the new elements are locked. The value of each member is initialized with false.

.. list-table::
	:widths: 20 80

	*
		- -EBUSY

		- A element with ID *id* already exists.

	*
		- -EINVAL

		- Some parameters include invalid value; i.e. ID has no name, or the number of members is not between 1 to 127.

	*
		- -ENOMEM

		- Out of memory, or there are too many user elements.

	*
		- -ENXIO

		- This backend module does not support user elements of boolean type.

	*
		- -ENODEV

		- Device unplugged.

This function is added in version 1.1.2.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- A handle of backend module for control interface.

	*
		- info

		- Common iformation for a new element set, with ID of the first new element.

	*
		- element_count

		- The number of elements added by this operation.

	*
		- member_count

		- The number of members which a element has to represent its states.

.. index:: pair: function; snd_ctl_add_enumerated_elem_set
.. _doxid-group___control_1ga9e9bf31020e6c2e7185612785eca6098:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_add_enumerated_elem_set(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* info,
		unsigned int element_count,
		unsigned int member_count,
		unsigned int items,
		const char*const labels[]
	)

Create and add some user-defined control elements of enumerated type.

This function creates some user elements with enumerated type. These elements are not controlled by device drivers in kernel. They can be operated by the same way as usual elements added by the device drivers.

The name field of *id* must be set with unique value to identify new control elements. After returning, all fields of *id* are filled. A element can be identified by the combination of name and index, or by numid.

All of members in the new elements are locked. The value of each member is initialized with the first entry of labels.

.. list-table::
	:widths: 20 80

	*
		- -EBUSY

		- A control element with ID *id* already exists.

	*
		- -EINVAL

		- Some arguments include invalid value; i.e. *element_count* is not between 1 to 127, or *items* is not at least one, or a string in *labels* is empty, or longer than 63 bytes, or total length of the labels requires more than 64 KiB storage.

	*
		- -ENOMEM

		- Out of memory, or there are too many user control elements.

	*
		- -ENXIO

		- This driver does not support (enumerated) user controls.

	*
		- -ENODEV

		- Device unplugged.

This function is added in version 1.1.2.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- A handle of backend module for control interface.

	*
		- info

		- Common iformation for a new element set, with ID of the first new element.

	*
		- element_count

		- The number of elements added by this operation.

	*
		- member_count

		- The number of members which a element has to represent its states.

	*
		- items

		- Range of possible values (0 ... *items* - 1).

	*
		- labels

		- An array containing *items* strings.



.. rubric:: Returns:

Zero on success, otherwise a negative error code.

.. index:: pair: function; snd_ctl_add_bytes_elem_set
.. _doxid-group___control_1gaf725d3e3411b236e5434150268c80294:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_add_bytes_elem_set(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_info_t<doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>`* info,
		unsigned int element_count,
		unsigned int member_count
	)

Create and add some user-defined control elements of bytes type.

This function creates some user elements with bytes type. These elements are not controlled by device drivers in kernel. They can be operated by the same way as usual elements added by the device drivers.

The name field of *id* must be set with unique value to identify new control elements. After returning, all fields of *id* are filled. A element can be identified by the combination of name and index, or by numid.

All of members in the new elements are locked. The value of each member is initialized with the minimum value.

.. list-table::
	:widths: 20 80

	*
		- -EBUSY

		- A element with ID *id* already exists.

	*
		- -EINVAL

		- Some arguments include invalid value; i.e. ID has no name, or the number of members is not between 1 to 511.

	*
		- -ENOMEM

		- Out of memory, or there are too many user elements.

	*
		- -ENXIO

		- This backend module does not support user elements of bytes type.

	*
		- -ENODEV

		- Device unplugged.

This function is added in version 1.1.2.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- A handle of backend module for control interface.

	*
		- info

		- Common iformation for a new element set, with ID of the first new element.

	*
		- element_count

		- The number of elements added by this operation.

	*
		- member_count

		- The number of members which a element has to represent its states.



.. rubric:: Returns:

Zero on success, otherwise a negative error code.

.. index:: pair: function; snd_ctl_elem_add_integer
.. _doxid-group___control_1ga9f6228c0d0bc751596cc04c6dcd00083:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_add_integer(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id,
		unsigned int count,
		long imin,
		long imax,
		long istep
	)

Create and add an user-defined control element of integer type.

This is a wrapper function to :ref:`snd_ctl_add_integer_elem_set() <doxid-group___control_1gacc94fec73b3b56f87872e8fec0c3e9f1>` for a control element. This doesn't fill the id data with full information, thus it's recommended to use :ref:`snd_ctl_add_integer_elem_set() <doxid-group___control_1gacc94fec73b3b56f87872e8fec0c3e9f1>`, instead.

.. index:: pair: function; snd_ctl_elem_add_integer64
.. _doxid-group___control_1gaa9ff49156010b3931cd3d163e62cc43f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_add_integer64(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id,
		unsigned int count,
		long long imin,
		long long imax,
		long long istep
	)

Create and add an user-defined control element of integer64 type.

This is a wrapper function to :ref:`snd_ctl_add_integer64_elem_set() <doxid-group___control_1ga2ab4992e6c9506bc8b8c0581808c2324>` for a single control element. This doesn't fill the id data with full information, thus it's recommended to use :ref:`snd_ctl_add_integer64_elem_set() <doxid-group___control_1ga2ab4992e6c9506bc8b8c0581808c2324>`, instead.

.. index:: pair: function; snd_ctl_elem_add_boolean
.. _doxid-group___control_1gad5f640f1d836b532b1c18d7604a90bad:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_add_boolean(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id,
		unsigned int count
	)

Create and add an user-defined control element of boolean type.

This is a wrapper function to :ref:`snd_ctl_add_boolean_elem_set() <doxid-group___control_1gaff7e95b329528fac338d13f428bec02c>` for a single control element. This doesn't fill the id data with full information, thus it's recommended to use :ref:`snd_ctl_add_boolean_elem_set() <doxid-group___control_1gaff7e95b329528fac338d13f428bec02c>`, instead.

.. index:: pair: function; snd_ctl_elem_add_enumerated
.. _doxid-group___control_1ga273d2d5c44e97d045c48dbaa734ae23e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_add_enumerated(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id,
		unsigned int count,
		unsigned int items,
		const char*const names[]
	)

Create and add a user-defined control element of enumerated type.

This is a wrapper function to :ref:`snd_ctl_add_enumerated_elem_set() <doxid-group___control_1ga9e9bf31020e6c2e7185612785eca6098>` for a single control element. This doesn't fill the id data with full information, thus it's recommended to use :ref:`snd_ctl_add_enumerated_elem_set() <doxid-group___control_1ga9e9bf31020e6c2e7185612785eca6098>`, instead.

This function is added in version 1.0.25.

.. index:: pair: function; snd_ctl_elem_add_iec958
.. _doxid-group___control_1ga5511e7e65b773abf8eb8413ddb701f3e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_add_iec958(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id
	)

Create and add a user-defined control element of IEC958 type.

This function creates an user element with IEC958 type. This element is not controlled by device drivers in kernel. It can be operated by the same way as usual elements added by the device drivers.

The name field of *id* must be set with unique value to identify a new control element. After returning, all fields of *id* are filled. A element can be identified by the combination of name and index, or by numid.

A member in the new element is locked and filled with zero.

.. list-table::
	:widths: 20 80

	*
		- -EBUSY

		- A control element with ID *id* already exists.

	*
		- -EINVAL

		- ID has no name.

	*
		- -ENOMEM

		- Out of memory, or there are too many user elements.

	*
		- -ENXIO

		- This backend module does not support user elements of IEC958 type.

	*
		- -ENODEV

		- Device unplugged.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- A handle of backend module for control interface.

	*
		- id

		- ID of the new control element.

.. index:: pair: function; snd_ctl_elem_remove
.. _doxid-group___control_1ga715d20513768cf33f10a0f9340b7baab:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_remove(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id
	)

Remove an user CTL element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- CTL handle

	*
		- id

		- CTL element identification



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_ctl_elem_value_sizeof
.. _doxid-group___control_1ga0514e7dde0594c4bd909e2306acb4bc2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	size_t
	snd_ctl_elem_value_sizeof(void)

Get size of data structure for an element.



.. rubric:: Returns:

Size in bytes.

.. index:: pair: function; snd_ctl_elem_value_malloc
.. _doxid-group___control_1ga34126639664d2c2d91a4b4bc6494a536:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_value_malloc(:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`** ptr)

Allocate an invalid :ref:`snd_ctl_elem_value_t <doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>` using standard malloc(3).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ptr

		- Returned pointer for data of an element.



.. rubric:: Returns:

0 on success otherwise negative error code.

.. index:: pair: function; snd_ctl_elem_value_free
.. _doxid-group___control_1gaab6bfeb2206c9de88778890fe527cd53:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_value_free(:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj)

Frees a previously allocated data of an element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

.. index:: pair: function; snd_ctl_elem_value_clear
.. _doxid-group___control_1ga5dc3556ecf7f1b6b90a751f68e298aa8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_value_clear(:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj)

Clear given data of an element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

.. index:: pair: function; snd_ctl_elem_value_copy
.. _doxid-group___control_1ga5631893dd087d73c223b7787222b7f9b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_value_copy(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* dst,
		const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* src
	)

Copy two data of elements.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dst

		- Pointer to destination.

	*
		- src

		- Pointer to source.

.. index:: pair: function; snd_ctl_elem_value_compare
.. _doxid-group___control_1gad5ee4dee86e48095a8eb74379c933350:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_value_compare(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* left,
		const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* right
	)

Compare one data of an element to the other.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- left

		- Pointer to first data.

	*
		- right

		- Pointer to second data.



.. rubric:: Returns:

0 on match, less than or greater than otherwise, see memcmp(3).

.. index:: pair: function; snd_ctl_elem_value_get_id
.. _doxid-group___control_1gad5c2ecc35d664aff974a244478496239:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_value_get_id(
		const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		:ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* ptr
	)

Get element identifier from given data of an element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

	*
		- ptr

		- Pointer for element identifier.

.. index:: pair: function; snd_ctl_elem_value_get_numid
.. _doxid-group___control_1ga4506b9e0ca143a5e78e755ee4e285fa9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_elem_value_get_numid(const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj)

Get element numeric identifier from given data of an element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.



.. rubric:: Returns:

Element numeric identifier.

.. index:: pair: function; snd_ctl_elem_value_get_interface
.. _doxid-group___control_1gaa3c2abb83ed61f20350d056615bda48d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`snd_ctl_elem_iface_t<doxid-group___control_1ga14baa0febb91cc4c5d72dcc825acf518>`
	snd_ctl_elem_value_get_interface(const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj)

Get interface part of element identifier from given data of an element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.



.. rubric:: Returns:

Interface part of element identifier.

.. index:: pair: function; snd_ctl_elem_value_get_device
.. _doxid-group___control_1gac1ec603a65de11b4661c04e6327f7647:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_elem_value_get_device(const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj)

Get device part of element identifier from given data of an element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.



.. rubric:: Returns:

Device part of element identifier.

.. index:: pair: function; snd_ctl_elem_value_get_subdevice
.. _doxid-group___control_1ga81ad9e08fdd64b99dd6562b698ab7f85:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_elem_value_get_subdevice(const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj)

Get subdevice part of element identifier from given data of an element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.



.. rubric:: Returns:

Subdevice part of element identifier.

.. index:: pair: function; snd_ctl_elem_value_get_name
.. _doxid-group___control_1ga8c39c251d773d70ee8da07af4f5bdf0c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_ctl_elem_value_get_name(const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj)

Get name part of element identifier from given data of an element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.



.. rubric:: Returns:

Name part of element identifier.

.. index:: pair: function; snd_ctl_elem_value_get_index
.. _doxid-group___control_1ga7bae3a71028550515183e945040069df:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_elem_value_get_index(const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj)

Get index part of element identifier from given data of an element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.



.. rubric:: Returns:

Index part of element identifier.

.. index:: pair: function; snd_ctl_elem_value_set_id
.. _doxid-group___control_1gab009ec5ba8cd90b434beb4294bff5d62:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_value_set_id(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* ptr
	)

Set element identifier to given data of an element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

	*
		- ptr

		- Pointer to an element identifier.

.. index:: pair: function; snd_ctl_elem_value_set_numid
.. _doxid-group___control_1ga8ade8618025754cd6b0baebd54bd5773:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_value_set_numid(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int val
	)

Set numeric identifier to given data of an element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

	*
		- val

		- Value for numeric identifier.

.. index:: pair: function; snd_ctl_elem_value_set_interface
.. _doxid-group___control_1ga052fb24927d60936cabfb29303595790:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_value_set_interface(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		:ref:`snd_ctl_elem_iface_t<doxid-group___control_1ga14baa0febb91cc4c5d72dcc825acf518>` val
	)

Set interface part of element identifier to given data of an element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

	*
		- val

		- Value for interface part of element identifier.

.. index:: pair: function; snd_ctl_elem_value_set_device
.. _doxid-group___control_1ga2ff78ac05ab5efbe82f3eafe799e050d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_value_set_device(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int val
	)

Set device part of element identifier to given data of an element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

	*
		- val

		- Value for device part of element identifier.

.. index:: pair: function; snd_ctl_elem_value_set_subdevice
.. _doxid-group___control_1gaa49c82aaf7052043c69594e3c81204c5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_value_set_subdevice(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int val
	)

Set subdevice part of element identifier to given data of an element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

	*
		- val

		- Value for subdevice part of element identifier.

.. index:: pair: function; snd_ctl_elem_value_set_name
.. _doxid-group___control_1ga7cb4db71bdc890579aa8bddbc88be7df:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_value_set_name(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		const char* val
	)

Set name part of element identifier to given data of an element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

	*
		- val

		- Value for name part of element identifier,

.. index:: pair: function; snd_ctl_elem_value_set_index
.. _doxid-group___control_1ga3b95f6d57955c7648e12023d53ce3faa:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_value_set_index(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int val
	)

Set index part of element identifier to given data of an element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

	*
		- val

		- Value for index part of element identifier.

.. index:: pair: function; snd_ctl_elem_value_get_boolean
.. _doxid-group___control_1gaa4409f368b375cb2ceb6d4108dcd2fc8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_elem_value_get_boolean(
		const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int idx
	)

Get value of a specified member from given data as an element of boolean type.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

	*
		- idx

		- Index of member in the element.



.. rubric:: Returns:

Value for the member.

.. index:: pair: function; snd_ctl_elem_value_get_integer
.. _doxid-group___control_1ga88debd91f21f40b237d22d7255b4a5fe:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	long
	snd_ctl_elem_value_get_integer(
		const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int idx
	)

Get value of a specified member from given data as an element of integer type.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

	*
		- idx

		- Index of member in the element.



.. rubric:: Returns:

Value for the member.

.. index:: pair: function; snd_ctl_elem_value_get_integer64
.. _doxid-group___control_1ga3f1d6202c02a34e973b87a2c580abcef:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	long long
	snd_ctl_elem_value_get_integer64(
		const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int idx
	)

Get value of a specified member from given data as an element of integer64 type.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

	*
		- idx

		- Index of member in the element.



.. rubric:: Returns:

Value for the member.

.. index:: pair: function; snd_ctl_elem_value_get_enumerated
.. _doxid-group___control_1gaf7a9a86cb477166bc3922bd722afb296:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_ctl_elem_value_get_enumerated(
		const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int idx
	)

Get value of a specified member from given data as an element of enumerated type.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

	*
		- idx

		- Index of member in the element.



.. rubric:: Returns:

Value for the member. This is an index of name set in the element.

.. index:: pair: function; snd_ctl_elem_value_get_byte
.. _doxid-group___control_1ga594a9762366355ec131e9fda92243305:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned char
	snd_ctl_elem_value_get_byte(
		const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int idx
	)

Get value of a specified member from given data as an element of bytes type.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

	*
		- idx

		- Index of member in the element.



.. rubric:: Returns:

Value for the member.

.. index:: pair: function; snd_ctl_elem_value_set_boolean
.. _doxid-group___control_1gaa246c604f97c7a05d125314f0fa72946:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_value_set_boolean(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int idx,
		long val
	)

Set value of a specified member to given data as an element of boolean type.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

	*
		- idx

		- Index of member in the element.

	*
		- val

		- Value for the member.

.. index:: pair: function; snd_ctl_elem_value_set_integer
.. _doxid-group___control_1gac022b948fe93bc744eb8b24839091b5b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_value_set_integer(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int idx,
		long val
	)

Set value of a specified member to given data as an element of integer type.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

	*
		- idx

		- Index of member in the element.

	*
		- val

		- Value for the member.

.. index:: pair: function; snd_ctl_elem_value_set_integer64
.. _doxid-group___control_1gaef406a6ab97925a9df646022800e815b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_value_set_integer64(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int idx,
		long long val
	)

Set value of a specified member to given data as an element of integer64 type.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

	*
		- idx

		- Index of member in the element.

	*
		- val

		- Value for the member.

.. index:: pair: function; snd_ctl_elem_value_set_enumerated
.. _doxid-group___control_1ga89a5b646d118cd73e7ca7d861bb6de26:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_value_set_enumerated(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int idx,
		unsigned int val
	)

Set value of a specified member to given data as an element of enumerated type.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

	*
		- idx

		- Index of member in the element.

	*
		- val

		- Value for the member.

.. index:: pair: function; snd_ctl_elem_value_set_byte
.. _doxid-group___control_1ga0a0d53d2dd752fb1aa39c97376d02547:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_value_set_byte(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		unsigned int idx,
		unsigned char val
	)

Set value for a specified member to given data as an element of byte type.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

	*
		- idx

		- Index of member in the element.

	*
		- val

		- Value for the member.

.. index:: pair: function; snd_ctl_elem_set_bytes
.. _doxid-group___control_1ga2b78601c4c56ecb4a6e3556137d61af6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_set_bytes(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		void* data,
		size_t size
	)

Set values to given data as an element of bytes type.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

	*
		- data

		- Pointer for byte array.

	*
		- size

		- The number of bytes included in the memory block.

.. index:: pair: function; snd_ctl_elem_value_get_bytes
.. _doxid-group___control_1ga11729138fcecfb37f9b7c744c4743fba:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const void*
	snd_ctl_elem_value_get_bytes(const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj)

Get memory block from given data as an element of bytes type.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.



.. rubric:: Returns:

Pointer for byte array.

.. index:: pair: function; snd_ctl_elem_value_get_iec958
.. _doxid-group___control_1ga8970ed4dd76ece274e27f0b0429895c1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_value_get_iec958(
		const :ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		:ref:`snd_aes_iec958_t<doxid-structsnd__aes__iec958__t>`* ptr
	)

Get value from given data to given pointer as an element of IEC958 type.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

	*
		- ptr

		- Pointer to IEC958 data.

.. index:: pair: function; snd_ctl_elem_value_set_iec958
.. _doxid-group___control_1gaefa891d2ff7ceb075aecfa8bd89fb340:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_ctl_elem_value_set_iec958(
		:ref:`snd_ctl_elem_value_t<doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>`* obj,
		const :ref:`snd_aes_iec958_t<doxid-structsnd__aes__iec958__t>`* ptr
	)

Set value from given pointer to given data as an element of IEC958 type.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- Data of an element.

	*
		- ptr

		- Pointer to IEC958 data.

.. index:: pair: function; snd_tlv_parse_dB_info
.. _doxid-group___control_1ga4fa0bc99458acc08a2c59e6ed84bc94e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_tlv_parse_dB_info(
		unsigned int* tlv,
		unsigned int tlv_size,
		unsigned int** db_tlvp
	)

Parse TLV stream and retrieve dB information.

This function parses the given TLV source and stores the TLV start point if the TLV information regarding dB conversion is found. The stored TLV pointer can be passed to the convesion functions :ref:`snd_tlv_convert_to_dB() <doxid-group___control_1ga625c16724bddbb21b18ae3b2cbaefcda>`, :ref:`snd_tlv_convert_from_dB() <doxid-group___control_1ga0ef60f47c8c82dd84816ae66346359a6>` and :ref:`snd_tlv_get_dB_range() <doxid-group___control_1gad1feefed923fc08f309c4fec2b0973e2>`.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- tlv

		- the TLV source

	*
		- tlv_size

		- the byte size of TLV source

	*
		- db_tlvp

		- the pointer stored the dB TLV information



.. rubric:: Returns:

the byte size of dB TLV information if found in the given TLV source, or a negative error code.

.. index:: pair: function; snd_tlv_get_dB_range
.. _doxid-group___control_1gad1feefed923fc08f309c4fec2b0973e2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_tlv_get_dB_range(
		unsigned int* tlv,
		long rangemin,
		long rangemax,
		long* min,
		long* max
	)

Get the dB min/max values.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- tlv

		- the TLV source returned by :ref:`snd_tlv_parse_dB_info() <doxid-group___control_1ga4fa0bc99458acc08a2c59e6ed84bc94e>`

	*
		- rangemin

		- the minimum value of the raw volume

	*
		- rangemax

		- the maximum value of the raw volume

	*
		- min

		- the pointer to store the minimum dB value (in 0.01dB unit)

	*
		- max

		- the pointer to store the maximum dB value (in 0.01dB unit)



.. rubric:: Returns:

0 if successful, or a negative error code

.. index:: pair: function; snd_tlv_convert_to_dB
.. _doxid-group___control_1ga625c16724bddbb21b18ae3b2cbaefcda:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_tlv_convert_to_dB(
		unsigned int* tlv,
		long rangemin,
		long rangemax,
		long volume,
		long* db_gain
	)

Convert the given raw volume value to a dB gain.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- tlv

		- the TLV source returned by :ref:`snd_tlv_parse_dB_info() <doxid-group___control_1ga4fa0bc99458acc08a2c59e6ed84bc94e>`

	*
		- rangemin

		- the minimum value of the raw volume

	*
		- rangemax

		- the maximum value of the raw volume

	*
		- volume

		- the raw volume value to convert

	*
		- db_gain

		- the dB gain (in 0.01dB unit)



.. rubric:: Returns:

0 if successful, or a negative error code

.. index:: pair: function; snd_tlv_convert_from_dB
.. _doxid-group___control_1ga0ef60f47c8c82dd84816ae66346359a6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_tlv_convert_from_dB(
		unsigned int* tlv,
		long rangemin,
		long rangemax,
		long db_gain,
		long* value,
		int xdir
	)

Convert from dB gain to the corresponding raw value.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- tlv

		- the TLV source returned by :ref:`snd_tlv_parse_dB_info() <doxid-group___control_1ga4fa0bc99458acc08a2c59e6ed84bc94e>`

	*
		- rangemin

		- the minimum value of the raw volume

	*
		- rangemax

		- the maximum value of the raw volume

	*
		- db_gain

		- the dB gain to convert (in 0.01dB unit)

	*
		- value

		- the pointer to store the converted raw volume value

	*
		- xdir

		- the direction for round-up. The value is round up when this is positive.



.. rubric:: Returns:

0 if successful, or a negative error code

.. index:: pair: function; snd_ctl_get_dB_range
.. _doxid-group___control_1ga6ebf9a5917cdc2fee40245cdbc83a0c1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_get_dB_range(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id,
		long* min,
		long* max
	)

Get the dB min/max values on the given control element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- the control handler

	*
		- id

		- the element id

	*
		- min

		- the pointer to store the minimum dB value (in 0.01dB unit)

	*
		- max

		- the pointer to store the maximum dB value (in 0.01dB unit)



.. rubric:: Returns:

0 if successful, or a negative error code

.. index:: pair: function; snd_ctl_convert_to_dB
.. _doxid-group___control_1gab44202cf8247874df15212d684a2b6ee:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_convert_to_dB(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id,
		long volume,
		long* db_gain
	)

Convert the volume value to dB on the given control element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- the control handler

	*
		- id

		- the element id

	*
		- volume

		- the raw volume value to convert

	*
		- db_gain

		- the dB gain (in 0.01dB unit)



.. rubric:: Returns:

0 if successful, or a negative error code

.. index:: pair: function; snd_ctl_convert_from_dB
.. _doxid-group___control_1ga344c48d48be3f61d08ce911c462a3bf4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_ctl_convert_from_dB(
		:ref:`snd_ctl_t<doxid-group___control_1ga06628f38def84a0fe3da74041db9d51f>`* ctl,
		const :ref:`snd_ctl_elem_id_t<doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>`* id,
		long db_gain,
		long* value,
		int xdir
	)

Convert from dB gain to the raw volume value on the given control element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctl

		- the control handler

	*
		- id

		- the element id

	*
		- db_gain

		- the dB gain to convert (in 0.01dB unit)

	*
		- value

		- the pointer to store the converted raw volume value

	*
		- xdir

		- the direction for round-up. The value is round up when this is positive.



.. rubric:: Returns:

0 if successful, or a negative error code

Macros
------

.. index:: pair: define; SND_CONTROL_DLSYM_VERSION
.. _doxid-group___control_1ga2dc20c3f1d96252ba1f5563cfede392d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CONTROL_DLSYM_VERSION

dlsym version for interface entry callback

.. index:: pair: define; SND_CTL_ASYNC
.. _doxid-group___control_1gadcbc5a476ffaf2b8d4dfd29a2cfaab3d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_ASYNC

Async notification (flag for open mode)

.. index:: pair: define; SND_CTL_EVENT_MASK_ADD
.. _doxid-group___control_1ga10e8cc806d014989e7b162f24714e19a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_EVENT_MASK_ADD

Element has been added

.. index:: pair: define; SND_CTL_EVENT_MASK_INFO
.. _doxid-group___control_1ga3ece7e72b3f4260f9ddd97aca2e1647a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_EVENT_MASK_INFO

Element info has been changed

.. index:: pair: define; SND_CTL_EVENT_MASK_REMOVE
.. _doxid-group___control_1ga2648d4242f8d5be01ecc6e36bc2cf335:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_EVENT_MASK_REMOVE

Element has been removed (Warning: test this first and if set don't test the other masks)

.. index:: pair: define; SND_CTL_EVENT_MASK_TLV
.. _doxid-group___control_1ga68f2f8b90cf059427f9ee9864983e68f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_EVENT_MASK_TLV

Element's TLV value has been changed

.. index:: pair: define; SND_CTL_EVENT_MASK_VALUE
.. _doxid-group___control_1gaf271a6ca621f746c45161f7106752e93:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_EVENT_MASK_VALUE

Element value has been changed

.. index:: pair: define; SND_CTL_NAME_CAPTURE
.. _doxid-group___control_1ga7cfec74a12a6730bb37cd567ab66452e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_NAME_CAPTURE

CTL name helper

.. index:: pair: define; SND_CTL_NAME_IEC958
.. _doxid-group___control_1ga88837fca9c81a2ede579c78bd1354475:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_NAME_IEC958( \
		expl, \
		direction, \
		what \
	)

Element name for IEC958 (S/PDIF)

.. index:: pair: define; SND_CTL_NAME_IEC958_CON_MASK
.. _doxid-group___control_1gabf837ecf1bc3539b6beb1b58ecc1e5ff:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_NAME_IEC958_CON_MASK

CTL name helper

.. index:: pair: define; SND_CTL_NAME_IEC958_DEFAULT
.. _doxid-group___control_1ga671b467ee6f577d9408dbbadfc90a404:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_NAME_IEC958_DEFAULT

CTL name helper

.. index:: pair: define; SND_CTL_NAME_IEC958_MASK
.. _doxid-group___control_1ga9665d8a918307b0b2387d253c7580abf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_NAME_IEC958_MASK

CTL name helper

.. index:: pair: define; SND_CTL_NAME_IEC958_NONE
.. _doxid-group___control_1ga72c88b2e8c9a136e34635dcc5fc65fd1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_NAME_IEC958_NONE

CTL name helper

.. index:: pair: define; SND_CTL_NAME_IEC958_PCM_STREAM
.. _doxid-group___control_1gae49d00de709820b4a6d8b9b343e2a407:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_NAME_IEC958_PCM_STREAM

CTL name helper

.. index:: pair: define; SND_CTL_NAME_IEC958_PRO_MASK
.. _doxid-group___control_1ga662f187cdfe6e85da2a5d820fac40d2a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_NAME_IEC958_PRO_MASK

CTL name helper

.. index:: pair: define; SND_CTL_NAME_IEC958_SWITCH
.. _doxid-group___control_1gaa8afe0cd1e7e65507a3f19e3a3f3d293:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_NAME_IEC958_SWITCH

CTL name helper

.. index:: pair: define; SND_CTL_NAME_IEC958_VOLUME
.. _doxid-group___control_1ga530cf8baa305078c23ff8fe1cc2f612e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_NAME_IEC958_VOLUME

CTL name helper

.. index:: pair: define; SND_CTL_NAME_NONE
.. _doxid-group___control_1ga172526f45150a21251b3421925641ad0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_NAME_NONE

CTL name helper

.. index:: pair: define; SND_CTL_NAME_PLAYBACK
.. _doxid-group___control_1ga7c81ecb5b075437d0612bc33e5ac3131:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_NAME_PLAYBACK

CTL name helper

.. index:: pair: define; SND_CTL_NONBLOCK
.. _doxid-group___control_1gae8a46558414be5b5b3b7bed127ad4574:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_NONBLOCK

Non blocking mode (flag for open mode)

.. index:: pair: define; SND_CTL_POWER_D0
.. _doxid-group___control_1gae4dc79ea76d20b9e84ca0564972db99f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_POWER_D0

ACPI/PCI Power State D0

.. index:: pair: define; SND_CTL_POWER_D1
.. _doxid-group___control_1ga137b1c440315c12a17f938ba4c0bf38c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_POWER_D1

ACPI/PCI Power State D1

.. index:: pair: define; SND_CTL_POWER_D2
.. _doxid-group___control_1ga01abf56e8703ef464bb271e8958962f8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_POWER_D2

ACPI/PCI Power State D2

.. index:: pair: define; SND_CTL_POWER_D3
.. _doxid-group___control_1gac8cc37202adfe9a740580ac1036c482e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_POWER_D3

ACPI/PCI Power State D3

.. index:: pair: define; SND_CTL_POWER_D3cold
.. _doxid-group___control_1ga029a112452f29d70c25391ea4e6723b2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_POWER_D3cold

ACPI/PCI Power State D3cold

.. index:: pair: define; SND_CTL_POWER_D3hot
.. _doxid-group___control_1gac6bf5540f88d153cb2b4d96cfa2e65bf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_POWER_D3hot

ACPI/PCI Power State D3hot

.. index:: pair: define; SND_CTL_POWER_MASK
.. _doxid-group___control_1gad11798fdf0ca20181d793660a50938a4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_POWER_MASK

Mask for the major Power State identifier

.. index:: pair: define; SND_CTL_READONLY
.. _doxid-group___control_1gabd6e339ba7222d43f280abef3d3d47aa:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_READONLY

Read only (flag for open mode)

.. index:: pair: define; SND_CTL_TLVT_CHMAP_FIXED
.. _doxid-group___control_1ga59ee428ba00f0595d867a74fb304913e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_TLVT_CHMAP_FIXED

TLV type - fixed channel map positions

.. index:: pair: define; SND_CTL_TLVT_CHMAP_PAIRED
.. _doxid-group___control_1ga63c3b7754a51433fbe10d7ad15c7c264:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_TLVT_CHMAP_PAIRED

TLV type - pair-wise swappable channel map positions

.. index:: pair: define; SND_CTL_TLVT_CHMAP_VAR
.. _doxid-group___control_1ga4a7450784b51c2d5ab51edd65279d1af:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_TLVT_CHMAP_VAR

TLV type - freely swappable channel map positions

.. index:: pair: define; SND_CTL_TLVT_CONTAINER
.. _doxid-group___control_1gaf5319578d0088b10c67339c8b1f644e7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_TLVT_CONTAINER

TLV type - Container

.. index:: pair: define; SND_CTL_TLVT_DB_LINEAR
.. _doxid-group___control_1ga3e80cc7e80dd6c56e2d9267d6a6ff9fc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_TLVT_DB_LINEAR

TLV type - linear volume

.. index:: pair: define; SND_CTL_TLVT_DB_MINMAX
.. _doxid-group___control_1ga779ef3d3fd0b658cef588fdbf6fa52be:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_TLVT_DB_MINMAX

TLV type - dB scale specified by min/max values

.. index:: pair: define; SND_CTL_TLVT_DB_MINMAX_MUTE
.. _doxid-group___control_1ga7a2bb21790739c2cfdf499d5c9748104:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_TLVT_DB_MINMAX_MUTE

TLV type - dB scale specified by min/max values (with mute)

.. index:: pair: define; SND_CTL_TLVT_DB_RANGE
.. _doxid-group___control_1ga9eff63d56cfb81df6d25d297270d6b60:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_TLVT_DB_RANGE

TLV type - dB range container

.. index:: pair: define; SND_CTL_TLVT_DB_SCALE
.. _doxid-group___control_1ga59b987c8f3cd26be848cec7171b7fb14:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_TLVT_DB_SCALE

TLV type - basic dB scale

.. index:: pair: define; SND_CTL_TLV_DB_GAIN_MUTE
.. _doxid-group___control_1ga5c4958da9d46cc400b24a6c47a413cfe:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_CTL_TLV_DB_GAIN_MUTE

Mute state

.. index:: pair: define; SND_SCTL_NOFREE
.. _doxid-group___control_1gab1b68b9d8582822395782038025cb0dd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_SCTL_NOFREE

Don't destroy the ctl handle when close

.. index:: pair: define; snd_ctl_card_info_alloca
.. _doxid-group___control_1gafcb7ab1577c3963e0751365dc983a4cb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define snd_ctl_card_info_alloca(ptr)

allocate an invalid :ref:`snd_ctl_card_info_t <doxid-group___control_1ga61aa15d40e16100bbb980bd062f5f220>` using standard alloca



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ptr

		- returned pointer

.. index:: pair: define; snd_ctl_elem_id_alloca
.. _doxid-group___control_1ga88b300eb8aa146d1eef29fbb6d8cb83a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define snd_ctl_elem_id_alloca(ptr)

allocate an invalid :ref:`snd_ctl_elem_id_t <doxid-group___control_1gad6c3746f1925bfec6a4fd0e913430e55>` using standard alloca



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ptr

		- returned pointer

.. index:: pair: define; snd_ctl_elem_info_alloca
.. _doxid-group___control_1ga4003d15d8c84d2405e922ba834d234f7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define snd_ctl_elem_info_alloca(ptr)

allocate an invalid :ref:`snd_ctl_elem_info_t <doxid-group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab>` using standard alloca



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ptr

		- returned pointer

.. index:: pair: define; snd_ctl_elem_list_alloca
.. _doxid-group___control_1ga7ec1d6cea34670d5e43a841af212962f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define snd_ctl_elem_list_alloca(ptr)

allocate an invalid :ref:`snd_ctl_elem_list_t <doxid-group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3>` using standard alloca



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ptr

		- returned pointer

.. index:: pair: define; snd_ctl_elem_value_alloca
.. _doxid-group___control_1ga262a26fa78978597c0baa7eecc5cb5fd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define snd_ctl_elem_value_alloca(ptr)

allocate an invalid :ref:`snd_ctl_elem_value_t <doxid-group___control_1ga266b478eb64f1cdd75e337df4b4b995e>` using standard alloca



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ptr

		- returned pointer

.. index:: pair: define; snd_ctl_event_alloca
.. _doxid-group___control_1gad7f958811a01272454badce1cf5bcbe7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define snd_ctl_event_alloca(ptr)

allocate an invalid :ref:`snd_ctl_event_t <doxid-group___control_1ga95f16cb694185b2ee106afc53d1e3a50>` using standard alloca



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ptr

		- returned pointer

