.. index:: pair: group; Memory Pool Functions
.. _doxid-group__apr__pools:

Memory Pool Functions
=====================

.. toctree::
	:hidden:

	group_PoolCleanup.rst
	group_PoolDebug.rst

Overview
~~~~~~~~



|	:ref:`Pool Cleanup Functions<doxid-group___pool_cleanup>`
|	:ref:`Pool Debugging functions.<doxid-group___pool_debug>`



.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// typedefs

	typedef struct :ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>` :ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`;
	typedef int (*:ref:`apr_abortfunc_t<doxid-group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd>`)(int retcode);

	// global functions

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_pool_initialize<doxid-group__apr__pools_1gad64a6a29515621bc13f8a8da50366d67>`(void);

	void
	:ref:`apr_pool_terminate<doxid-group__apr__pools_1ga3728aacec227318cef973b8a33f3b430>`(void);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_pool_create_ex<doxid-group__apr__pools_1gab274bd29e4e4d4944b4618403148074f>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`** newpool,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* parent,
		:ref:`apr_abortfunc_t<doxid-group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd>` abort_fn,
		:ref:`apr_allocator_t<doxid-group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b>`* allocator
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_pool_create_core_ex<doxid-group__apr__pools_1ga20e514c83555398acddc30c4dfa0c540>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`** newpool,
		:ref:`apr_abortfunc_t<doxid-group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd>` abort_fn,
		:ref:`apr_allocator_t<doxid-group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b>`* allocator
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_pool_create_unmanaged_ex<doxid-group__apr__pools_1gaae7212db77bb57f86419cd594f73a92f>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`** newpool,
		:ref:`apr_abortfunc_t<doxid-group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd>` abort_fn,
		:ref:`apr_allocator_t<doxid-group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b>`* allocator
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_pool_create_ex_debug<doxid-group__apr__pools_1gacbea97ae5c0c861f6b7c147d46ac1d0c>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`** newpool,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* parent,
		:ref:`apr_abortfunc_t<doxid-group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd>` abort_fn,
		:ref:`apr_allocator_t<doxid-group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b>`* allocator,
		const char* file_line
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_pool_create_core_ex_debug<doxid-group__apr__pools_1gaa1c5bfc44188884bb439670f81448c20>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`** newpool,
		:ref:`apr_abortfunc_t<doxid-group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd>` abort_fn,
		:ref:`apr_allocator_t<doxid-group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b>`* allocator,
		const char* file_line
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_pool_create_unmanaged_ex_debug<doxid-group__apr__pools_1gae220e572b14355f1aa7b21c8fb022524>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`** newpool,
		:ref:`apr_abortfunc_t<doxid-group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd>` abort_fn,
		:ref:`apr_allocator_t<doxid-group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b>`* allocator,
		const char* file_line
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_pool_create<doxid-group__apr__pools_1ga918adf3026c894efeae254a0446aed3b>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`** newpool,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* parent
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_pool_create_core<doxid-group__apr__pools_1gad3675378924bc9d98e46258c049f1761>`(:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`** newpool);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:target:`apr_pool_create_unmanaged<doxid-group__apr__pools_1ga72f86d699b4b2ec2aeb82c334ca3446b>`(:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`** newpool);

	:ref:`apr_allocator_t<doxid-group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b>`*
	:ref:`apr_pool_allocator_get<doxid-group__apr__pools_1gaf446fcf5da1fcd62d3f802a4c0c10f97>`(:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* pool);

	void
	:ref:`apr_pool_clear<doxid-group__apr__pools_1gafa8a998cd660e82b62aecec09e239d0d>`(:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p);

	void
	:ref:`apr_pool_clear_debug<doxid-group__apr__pools_1ga9521870e42ec4395a0bf8388706a57b9>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* file_line
	);

	void
	:ref:`apr_pool_destroy<doxid-group__apr__pools_1ga54759954d2cba7cb649ab5680a33f9e3>`(:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p);

	void
	:ref:`apr_pool_destroy_debug<doxid-group__apr__pools_1ga7efe64dfcce883d7fad9df813d9259fc>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* file_line
	);

	void*
	:ref:`apr_palloc<doxid-group__apr__pools_1ga85f1e193c31d109affda72f9a92c6915>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		apr_size_t size
	);

	void*
	:ref:`apr_palloc_debug<doxid-group__apr__pools_1ga0ac211ac89be868b107776b4183a8174>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		apr_size_t size,
		const char* file_line
	);

	void*
	:ref:`apr_pcalloc<doxid-group__apr__pools_1gaf61c098ad258069d64cdf8c0a9369f9e>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		apr_size_t size
	);

	void*
	:ref:`apr_pcalloc_debug<doxid-group__apr__pools_1ga7b43035318ffdc57a6eddab07dc57cb2>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		apr_size_t size,
		const char* file_line
	);

	void
	:ref:`apr_pool_abort_set<doxid-group__apr__pools_1gaa658b1f10dd13967eaa7c4156d4c2174>`(
		:ref:`apr_abortfunc_t<doxid-group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd>` abortfunc,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* pool
	);

	:ref:`apr_abortfunc_t<doxid-group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd>`
	:ref:`apr_pool_abort_get<doxid-group__apr__pools_1gaf7610c30ef5f84a8742c0b3e63fdd7b0>`(:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* pool);

	:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`*
	:ref:`apr_pool_parent_get<doxid-group__apr__pools_1ga94db31f40609b15b592ff47f989ca9ec>`(:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* pool);

	int
	:ref:`apr_pool_is_ancestor<doxid-group__apr__pools_1ga05d299f778659d1e0806140d8a7fea79>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* a,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* b
	);

	void
	:ref:`apr_pool_tag<doxid-group__apr__pools_1gaeaa872f7999740a60803e95429890518>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* pool,
		const char* tag
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_pool_userdata_set<doxid-group__apr__pools_1ga78d1aa2d9fa842d83eaffccb0f0c0c5c>`(
		const void* data,
		const char* key,
		:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`(*)(void*) cleanup,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* pool
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_pool_userdata_setn<doxid-group__apr__pools_1ga435644c493dc5b10d80c4b99b8cd4589>`(
		const void* data,
		const char* key,
		:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`(*)(void*) cleanup,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* pool
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_pool_userdata_get<doxid-group__apr__pools_1gaf930f1fad2cf92a2432c0814c8a0b86f>`(
		void** data,
		const char* key,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* pool
	);

	// macros

	#define :ref:`APR_POOL_DECLARE_ACCESSOR<doxid-group__apr__pools_1ga89ce1d55c7f0c39ea87c88eabd655394>`(type)
	#define :ref:`APR_POOL_IMPLEMENT_ACCESSOR<doxid-group__apr__pools_1ga43a8a52f68f8b7d3b7694c254da4a074>`(type)
	#define :ref:`APR_POOL__FILE_LINE__<doxid-group__apr__pools_1gac81cff34d0ff4be52fa924663478eade>`

.. _details-group__apr__pools:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~



Typedefs
--------

.. index:: pair: typedef; apr_pool_t
.. _doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct :ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>` apr_pool_t

The fundamental pool type

.. index:: pair: typedef; apr_abortfunc_t
.. _doxid-group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef int (*apr_abortfunc_t)(int retcode)

A function that is called when allocation fails.

Global Functions
----------------

.. index:: pair: function; apr_pool_initialize
.. _doxid-group__apr__pools_1gad64a6a29515621bc13f8a8da50366d67:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_pool_initialize(void)

Setup all of the internal structures required to use pools Programs do NOT need to call this directly. APR will call this automatically from apr_initialize.

.. index:: pair: function; apr_pool_terminate
.. _doxid-group__apr__pools_1ga3728aacec227318cef973b8a33f3b430:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	apr_pool_terminate(void)

Tear down all of the internal structures required to use pools Programs do NOT need to call this directly. APR will call this automatically from apr_terminate.

.. index:: pair: function; apr_pool_create_ex
.. _doxid-group__apr__pools_1gab274bd29e4e4d4944b4618403148074f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_pool_create_ex(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`** newpool,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* parent,
		:ref:`apr_abortfunc_t<doxid-group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd>` abort_fn,
		:ref:`apr_allocator_t<doxid-group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b>`* allocator
	)

Create a new pool. This function is thread-safe, in the sense that multiple threads can safely create subpools of the same parent pool concurrently. Similarly, a subpool can be created by one thread at the same time that another thread accesses the parent pool.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- newpool

		- The pool we have just created.

	*
		- parent

		- The parent pool. If this is NULL, the new pool is a root pool. If it is non-NULL, the new pool will inherit all of its parent pool's attributes, except the apr_pool_t will be a sub-pool.

	*
		- abort_fn

		- A function to use if the pool cannot allocate more memory.

	*
		- allocator

		- The allocator to use with the new pool. If NULL the allocator of the parent pool will be used.

.. index:: pair: function; apr_pool_create_core_ex
.. _doxid-group__apr__pools_1ga20e514c83555398acddc30c4dfa0c540:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_pool_create_core_ex(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`** newpool,
		:ref:`apr_abortfunc_t<doxid-group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd>` abort_fn,
		:ref:`apr_allocator_t<doxid-group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b>`* allocator
	)

Create a new pool. Deprecated



.. rubric:: See also:

:ref:`apr_pool_create_unmanaged_ex <doxid-group__apr__pools_1gaae7212db77bb57f86419cd594f73a92f>`.

.. index:: pair: function; apr_pool_create_unmanaged_ex
.. _doxid-group__apr__pools_1gaae7212db77bb57f86419cd594f73a92f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_pool_create_unmanaged_ex(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`** newpool,
		:ref:`apr_abortfunc_t<doxid-group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd>` abort_fn,
		:ref:`apr_allocator_t<doxid-group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b>`* allocator
	)

Create a new unmanaged pool. An unmanaged pool is a special pool without a parent; it will NOT be destroyed upon apr_terminate. It must be explicitly destroyed by calling apr_pool_destroy, to prevent memory leaks. Use of this function is discouraged, think twice about whether you really really need it.



.. warning::

	Any child cleanups registered against the new pool, or against sub-pools thereof, will not be executed during an invocation of :ref:`apr_proc_create() <doxid-group__apr__thread__proc_1gab51dd90b98d365a969f0ec5c7bef4e14>`, so resources created in an "unmanaged" pool hierarchy will leak to child processes.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- newpool

		- The pool we have just created.

	*
		- abort_fn

		- A function to use if the pool cannot allocate more memory.

	*
		- allocator

		- The allocator to use with the new pool. If NULL a new allocator will be created with the new pool as owner.

.. index:: pair: function; apr_pool_create_ex_debug
.. _doxid-group__apr__pools_1gacbea97ae5c0c861f6b7c147d46ac1d0c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_pool_create_ex_debug(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`** newpool,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* parent,
		:ref:`apr_abortfunc_t<doxid-group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd>` abort_fn,
		:ref:`apr_allocator_t<doxid-group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b>`* allocator,
		const char* file_line
	)

Debug version of apr_pool_create_ex. Only available when APR_POOL_DEBUG is defined. Call this directly if you have your apr_pool_create_ex calls in a wrapper function and wish to override the file_line argument to reflect the caller of your wrapper function. If you do not have apr_pool_create_ex in a wrapper, trust the macro and don't call apr_pool_create_ex_debug directly.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- newpool

		- 

	*
		- parent

		- 

	*
		- abort_fn

		- 

	*
		- allocator

		- 

	*
		- file_line

		- Where the function is called from. This is usually APR_POOL\__FILE_LINE\__.



.. rubric:: See also:

:ref:`apr_pool_create <doxid-group__apr__pools_1ga918adf3026c894efeae254a0446aed3b>`.

:ref:`apr_pool_create <doxid-group__apr__pools_1ga918adf3026c894efeae254a0446aed3b>`.

:ref:`apr_pool_create <doxid-group__apr__pools_1ga918adf3026c894efeae254a0446aed3b>`.

:ref:`apr_pool_create <doxid-group__apr__pools_1ga918adf3026c894efeae254a0446aed3b>`.

.. index:: pair: function; apr_pool_create_core_ex_debug
.. _doxid-group__apr__pools_1gaa1c5bfc44188884bb439670f81448c20:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_pool_create_core_ex_debug(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`** newpool,
		:ref:`apr_abortfunc_t<doxid-group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd>` abort_fn,
		:ref:`apr_allocator_t<doxid-group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b>`* allocator,
		const char* file_line
	)

Debug version of apr_pool_create_core_ex. Deprecated



.. rubric:: See also:

:ref:`apr_pool_create_unmanaged_ex_debug <doxid-group__apr__pools_1gae220e572b14355f1aa7b21c8fb022524>`.

.. index:: pair: function; apr_pool_create_unmanaged_ex_debug
.. _doxid-group__apr__pools_1gae220e572b14355f1aa7b21c8fb022524:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_pool_create_unmanaged_ex_debug(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`** newpool,
		:ref:`apr_abortfunc_t<doxid-group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd>` abort_fn,
		:ref:`apr_allocator_t<doxid-group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b>`* allocator,
		const char* file_line
	)

Debug version of apr_pool_create_unmanaged_ex. Only available when APR_POOL_DEBUG is defined. Call this directly if you have your apr_pool_create_unmanaged_ex calls in a wrapper function and wish to override the file_line argument to reflect the caller of your wrapper function. If you do not have apr_pool_create_core_ex in a wrapper, trust the macro and don't call apr_pool_create_core_ex_debug directly.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- newpool

		- 

	*
		- abort_fn

		- 

	*
		- allocator

		- 

	*
		- file_line

		- Where the function is called from. This is usually APR_POOL\__FILE_LINE\__.



.. rubric:: See also:

apr_pool_create_unmanaged.

apr_pool_create_unmanaged.

apr_pool_create_unmanaged.

.. index:: pair: function; apr_pool_create
.. _doxid-group__apr__pools_1ga918adf3026c894efeae254a0446aed3b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_pool_create(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`** newpool,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* parent
	)

Create a new pool. This function is thread-safe, in the sense that multiple threads can safely create subpools of the same parent pool concurrently. Similarly, a subpool can be created by one thread at the same time that another thread accesses the parent pool.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- newpool

		- The pool we have just created.

	*
		- parent

		- The parent pool. If this is NULL, the new pool is a root pool. If it is non-NULL, the new pool will inherit all of its parent pool's attributes, except the apr_pool_t will be a sub-pool.

.. index:: pair: function; apr_pool_create_core
.. _doxid-group__apr__pools_1gad3675378924bc9d98e46258c049f1761:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_pool_create_core(:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`** newpool)

Create a new unmanaged pool.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- newpool

		- The pool we have just created.

.. index:: pair: function; apr_pool_allocator_get
.. _doxid-group__apr__pools_1gaf446fcf5da1fcd62d3f802a4c0c10f97:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_allocator_t<doxid-group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b>`*
	apr_pool_allocator_get(:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* pool)

Find the pool's allocator



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- pool

		- The pool to get the allocator from.

.. index:: pair: function; apr_pool_clear
.. _doxid-group__apr__pools_1gafa8a998cd660e82b62aecec09e239d0d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	apr_pool_clear(:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p)

Clear all memory in the pool and run all the cleanups. This also destroys all subpools. This does not actually free the memory, it just allows the pool to re-use this memory for the next allocation.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- The pool to clear



.. rubric:: See also:

:ref:`apr_pool_destroy() <doxid-group__apr__pools_1ga54759954d2cba7cb649ab5680a33f9e3>`

.. index:: pair: function; apr_pool_clear_debug
.. _doxid-group__apr__pools_1ga9521870e42ec4395a0bf8388706a57b9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	apr_pool_clear_debug(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* file_line
	)

Debug version of apr_pool_clear. Only available when APR_POOL_DEBUG is defined. Call this directly if you have your apr_pool_clear calls in a wrapper function and wish to override the file_line argument to reflect the caller of your wrapper function. If you do not have apr_pool_clear in a wrapper, trust the macro and don't call apr_pool_destroy_clear directly.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- See: apr_pool_clear.

	*
		- file_line

		- Where the function is called from. This is usually APR_POOL\__FILE_LINE\__.

.. index:: pair: function; apr_pool_destroy
.. _doxid-group__apr__pools_1ga54759954d2cba7cb649ab5680a33f9e3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	apr_pool_destroy(:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p)

Destroy the pool. This takes similar action as :ref:`apr_pool_clear() <doxid-group__apr__pools_1gafa8a998cd660e82b62aecec09e239d0d>` and then frees all the memory. This will actually free the memory



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- The pool to destroy

.. index:: pair: function; apr_pool_destroy_debug
.. _doxid-group__apr__pools_1ga7efe64dfcce883d7fad9df813d9259fc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	apr_pool_destroy_debug(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* file_line
	)

Debug version of apr_pool_destroy. Only available when APR_POOL_DEBUG is defined. Call this directly if you have your apr_pool_destroy calls in a wrapper function and wish to override the file_line argument to reflect the caller of your wrapper function. If you do not have apr_pool_destroy in a wrapper, trust the macro and don't call apr_pool_destroy_debug directly.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- See: apr_pool_destroy.

	*
		- file_line

		- Where the function is called from. This is usually APR_POOL\__FILE_LINE\__.

.. index:: pair: function; apr_palloc
.. _doxid-group__apr__pools_1ga85f1e193c31d109affda72f9a92c6915:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void*
	apr_palloc(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		apr_size_t size
	)

Allocate a block of memory from a pool



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- The pool to allocate from

	*
		- size

		- The amount of memory to allocate



.. rubric:: Returns:

The allocated memory

.. index:: pair: function; apr_palloc_debug
.. _doxid-group__apr__pools_1ga0ac211ac89be868b107776b4183a8174:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void*
	apr_palloc_debug(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		apr_size_t size,
		const char* file_line
	)

Debug version of apr_palloc



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- See: apr_palloc

	*
		- size

		- See: apr_palloc

	*
		- file_line

		- Where the function is called from. This is usually APR_POOL\__FILE_LINE\__.



.. rubric:: Returns:

See: apr_palloc

.. index:: pair: function; apr_pcalloc
.. _doxid-group__apr__pools_1gaf61c098ad258069d64cdf8c0a9369f9e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void*
	apr_pcalloc(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		apr_size_t size
	)

Allocate a block of memory from a pool and set all of the memory to 0



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- The pool to allocate from

	*
		- size

		- The amount of memory to allocate



.. rubric:: Returns:

The allocated memory

.. index:: pair: function; apr_pcalloc_debug
.. _doxid-group__apr__pools_1ga7b43035318ffdc57a6eddab07dc57cb2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void*
	apr_pcalloc_debug(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		apr_size_t size,
		const char* file_line
	)

Debug version of apr_pcalloc



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- See: apr_pcalloc

	*
		- size

		- See: apr_pcalloc

	*
		- file_line

		- Where the function is called from. This is usually APR_POOL\__FILE_LINE\__.



.. rubric:: Returns:

See: apr_pcalloc

.. index:: pair: function; apr_pool_abort_set
.. _doxid-group__apr__pools_1gaa658b1f10dd13967eaa7c4156d4c2174:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	apr_pool_abort_set(
		:ref:`apr_abortfunc_t<doxid-group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd>` abortfunc,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* pool
	)

Set the function to be called when an allocation failure occurs. If the program wants APR to exit on a memory allocation error, then this function can be called to set the callback to use (for performing cleanup and then exiting). If this function is not called, then APR will return an error and expect the calling program to deal with the error accordingly.

.. index:: pair: function; apr_pool_abort_get
.. _doxid-group__apr__pools_1gaf7610c30ef5f84a8742c0b3e63fdd7b0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_abortfunc_t<doxid-group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd>`
	apr_pool_abort_get(:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* pool)

Get the abort function associated with the specified pool.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- pool

		- The pool for retrieving the abort function.



.. rubric:: Returns:

The abort function for the given pool.

.. index:: pair: function; apr_pool_parent_get
.. _doxid-group__apr__pools_1ga94db31f40609b15b592ff47f989ca9ec:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`*
	apr_pool_parent_get(:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* pool)

Get the parent pool of the specified pool.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- pool

		- The pool for retrieving the parent pool.



.. rubric:: Returns:

The parent of the given pool.

.. index:: pair: function; apr_pool_is_ancestor
.. _doxid-group__apr__pools_1ga05d299f778659d1e0806140d8a7fea79:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	apr_pool_is_ancestor(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* a,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* b
	)

Determine if pool a is an ancestor of pool b. if compiled with APR_POOL_DEBUG, this function will also return true if A is a pool which has been guaranteed by the caller (using apr_pool_join) to have a lifetime at least as long as some ancestor of pool B.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- a

		- The pool to search

	*
		- b

		- The pool to search for



.. rubric:: Returns:

True if a is an ancestor of b, NULL is considered an ancestor of all pools.

.. index:: pair: function; apr_pool_tag
.. _doxid-group__apr__pools_1gaeaa872f7999740a60803e95429890518:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	apr_pool_tag(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* pool,
		const char* tag
	)

Tag a pool (give it a name)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- pool

		- The pool to tag

	*
		- tag

		- The tag

.. index:: pair: function; apr_pool_userdata_set
.. _doxid-group__apr__pools_1ga78d1aa2d9fa842d83eaffccb0f0c0c5c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_pool_userdata_set(
		const void* data,
		const char* key,
		:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`(*)(void*) cleanup,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* pool
	)

Set the data associated with the current pool

.. warning::

	The data to be attached to the pool should have a life span at least as long as the pool it is being attached to.

Users of APR must take EXTREME care when choosing a key to use for their data. It is possible to accidentally overwrite data by choosing a key that another part of the program is using. Therefore it is advised that steps are taken to ensure that unique keys are used for all of the userdata objects in a particular pool (the same key in two different pools or a pool and one of its subpools is okay) at all times. Careful namespace prefixing of key names is a typical way to help ensure this uniqueness.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- data

		- The user data associated with the pool.

	*
		- key

		- The key to use for association

	*
		- cleanup

		- The cleanup program to use to cleanup the data (NULL if none)

	*
		- pool

		- The current pool

.. index:: pair: function; apr_pool_userdata_setn
.. _doxid-group__apr__pools_1ga435644c493dc5b10d80c4b99b8cd4589:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_pool_userdata_setn(
		const void* data,
		const char* key,
		:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`(*)(void*) cleanup,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* pool
	)

Set the data associated with the current pool

.. note::

	same as :ref:`apr_pool_userdata_set() <doxid-group__apr__pools_1ga78d1aa2d9fa842d83eaffccb0f0c0c5c>`, except that this version doesn't make a copy of the key (this function is useful, for example, when the key is a string literal)



.. warning::

	This should NOT be used if the key could change addresses by any means between the :ref:`apr_pool_userdata_setn() <doxid-group__apr__pools_1ga435644c493dc5b10d80c4b99b8cd4589>` call and a subsequent :ref:`apr_pool_userdata_get() <doxid-group__apr__pools_1gaf930f1fad2cf92a2432c0814c8a0b86f>` on that key, such as if a static string is used as a userdata key in a DSO and the DSO could be unloaded and reloaded between the _setn() and the _get(). You MUST use :ref:`apr_pool_userdata_set() <doxid-group__apr__pools_1ga78d1aa2d9fa842d83eaffccb0f0c0c5c>` in such cases.



.. warning::

	More generally, the key and the data to be attached to the pool should have a life span at least as long as the pool itself.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- data

		- The user data associated with the pool.

	*
		- key

		- The key to use for association

	*
		- cleanup

		- The cleanup program to use to cleanup the data (NULL if none)

	*
		- pool

		- The current pool

.. index:: pair: function; apr_pool_userdata_get
.. _doxid-group__apr__pools_1gaf930f1fad2cf92a2432c0814c8a0b86f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_pool_userdata_get(
		void** data,
		const char* key,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* pool
	)

Return the data associated with the current pool.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- data

		- The user data associated with the pool.

	*
		- key

		- The key for the data to retrieve

	*
		- pool

		- The current pool.

Macros
------

.. index:: pair: define; APR_POOL_DECLARE_ACCESSOR
.. _doxid-group__apr__pools_1ga89ce1d55c7f0c39ea87c88eabd655394:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define APR_POOL_DECLARE_ACCESSOR(type)

Declaration helper macro to construct apr_foo_pool_get()s.

This standardized macro is used by opaque (APR) data types to return the apr_pool_t that is associated with the data type.

:ref:`APR_POOL_DECLARE_ACCESSOR() <doxid-group__apr__pools_1ga89ce1d55c7f0c39ea87c88eabd655394>` is used in a header file to declare the accessor function. A typical usage and result would be:

.. code-block:: none

	
	   :ref:`APR_POOL_DECLARE_ACCESSOR(file) <doxid-group__apr__pools_1ga89ce1d55c7f0c39ea87c88eabd655394>`;
	becomes:
	   :ref:`APR_DECLARE(apr_pool_t *) <doxid-group__apr__platform_1gad7b91b811a172bfa802603c2fb688f98>` :ref:`apr_file_pool_get(const apr_file_t *thefile) <doxid-group__apr__file__io_1gab5950b3b0156097b0181394a37e03ede>`;

Doxygen unwraps this macro (via doxygen.conf) to provide actual help for each specific occurrence of apr_foo_pool_get.

the linkage is specified for APR. It would be possible to expand the macros to support other linkages.

.. index:: pair: define; APR_POOL_IMPLEMENT_ACCESSOR
.. _doxid-group__apr__pools_1ga43a8a52f68f8b7d3b7694c254da4a074:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define APR_POOL_IMPLEMENT_ACCESSOR(type)

Implementation helper macro to provide apr_foo_pool_get()s.

In the implementation, the :ref:`APR_POOL_IMPLEMENT_ACCESSOR() <doxid-group__apr__pools_1ga43a8a52f68f8b7d3b7694c254da4a074>` is used to actually define the function. It assumes the field is named "pool".

.. index:: pair: define; APR_POOL__FILE_LINE__
.. _doxid-group__apr__pools_1gac81cff34d0ff4be52fa924663478eade:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define APR_POOL__FILE_LINE__

Pool debug levels

.. code-block:: none

	
	
	
	.. rubric:: | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |

.. code-block:: none

	
	|   |   |   |   |   |   |   | x |  General debug code enabled (useful in
	                                   combination with with-efence).

.. code-block:: none

	|   |   |   |   |   |   | x |   |  Verbose output on stderr (report
	                                   CREATE, CLEAR, DESTROY).

.. code-block:: none

	|   |   |   | x |   |   |   |   |  Verbose output on stderr (report
	                                   PALLOC, PCALLOC).

.. code-block:: none

	|   |   |   |   |   | x |   |   |  Lifetime checking. On each use of a
	                                   pool, check its lifetime.  If the pool
	                                   is out of scope, abort().
	                                   In combination with the verbose flag
	                                   above, it will output LIFE in such an
	                                   event prior to aborting.

.. code-block:: none

	|   |   |   |   | x |   |   |   |  Pool owner checking.  On each use of a
	                                   pool, check if the current thread is the
	                                   pool's owner.  If not, abort().  In
	                                   combination with the verbose flag above,
	                                   it will output OWNER in such an event
	                                   prior to aborting.  Use the debug
	                                   function apr_pool_owner_set() to switch
	                                   a pool's ownership.

.. code-block:: none

	When no debug level was specified, assume general debug mode.
	If level 0 was specified, debugging is switched off.

the place in the code where the particular function was called

