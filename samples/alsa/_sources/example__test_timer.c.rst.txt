.. index:: pair: example; /test/timer.c
.. _doxid-_2test_2timer_8c-example:

/test/timer.c
=============

:target:`doxid-/home/vladimir/develop/alsa-lib/alsa-lib-1.1.3/src/timer/timer.c_1example_test_timer`

.. ref-code-block:: cpp

	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	#include <sys/time.h>
	#include "../include/asoundlib.h"
	
	void show_status(void *handle)
	{
	    int err;
	    :ref:`snd_timer_status_t <doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>` *status;
	    
	    :ref:`snd_timer_status_alloca <doxid-group___timer_1ga6597b8f73b30a3f2bf2aa9f3590b92f2>`(&status);
	    if ((err = :ref:`snd_timer_status <doxid-group___timer_1gaa78c7089909252ee0ca69f7552fa2804>`(handle, status)) < 0) {
	        fprintf(stderr, "timer status %i (%s)\n", err, :ref:`snd_strerror <doxid-group___error_1ga182bbadf2349e11602bc531e8cf22f7e>`(err));
	        return;
	    }
	    printf("STATUS:\n");
	    printf("  resolution = %li\n", :ref:`snd_timer_status_get_resolution <doxid-group___timer_1gaaab668cc548b6c4a24236504d63da0a0>`(status));
	    printf("  lost = %li\n", :ref:`snd_timer_status_get_lost <doxid-group___timer_1gaa7ad78e8af9855e71d4951147869693b>`(status));
	    printf("  overrun = %li\n", :ref:`snd_timer_status_get_overrun <doxid-group___timer_1gaf3a83c122c2e19059297599d3486c04d>`(status));
	    printf("  queue = %li\n", :ref:`snd_timer_status_get_queue <doxid-group___timer_1ga6edb10e32b6b485ecccef73d862ca648>`(status));
	}
	
	void read_loop(void *handle, int master_ticks, int timeout)
	{
	    int count, err;
	    struct pollfd *fds;
	    :ref:`snd_timer_read_t <doxid-structsnd__timer__read__t>` tr;
	    
	    count = :ref:`snd_timer_poll_descriptors_count <doxid-group___timer_1gaf035c37343afed7f13c60e950e461cdf>`(handle);
	    fds = calloc(count, sizeof(struct pollfd));
	    if (fds == NULL) {
	        fprintf(stderr, "malloc error\n");
	        exit(EXIT_FAILURE);
	    }
	    while (master_ticks-- > 0) {
	        if ((err = :ref:`snd_timer_poll_descriptors <doxid-group___timer_1ga89ec000a41fa7dd1269e332324663f61>`(handle, fds, count)) < 0) {
	            fprintf(stderr, "snd_timer_poll_descriptors error: %s\n", :ref:`snd_strerror <doxid-group___error_1ga182bbadf2349e11602bc531e8cf22f7e>`(err));
	            exit(EXIT_FAILURE);
	        }
	        if ((err = poll(fds, count, timeout)) < 0) {
	            fprintf(stderr, "poll error %i (%s)\n", err, strerror(err));
	            exit(EXIT_FAILURE);
	        }
	        if (err == 0) {
	            fprintf(stderr, "timer time out!!\n");
	            exit(EXIT_FAILURE);
	        }
	        while (:ref:`snd_timer_read <doxid-group___timer_1ga724ada94d0bc3564ad77973c0a084682>`(handle, &tr, sizeof(tr)) == sizeof(tr)) {
	            printf("TIMER: resolution = %uns, ticks = %u\n",
	                tr.:ref:`resolution <doxid-structsnd__timer__read__t_1a74c2d329a2a2c9c3bc53d5678b0fafe9>`, tr.:ref:`ticks <doxid-structsnd__timer__read__t_1a6f1deb447c21188ac4590e872358edd9>`);
	        }
	    }
	    free(fds);
	}
	
	static void async_callback(:ref:`snd_async_handler_t <doxid-group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d>` *ahandler)
	{
	    :ref:`snd_timer_t <doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>` *handle = :ref:`snd_async_handler_get_timer <doxid-group___timer_1gaa497b2873abd234df7e932ecdefad5e0>`(ahandler);
	    int *acount = :ref:`snd_async_handler_get_callback_private <doxid-group___global_1gad9c76588a87918901c6273e6bc98a1bc>`(ahandler);
	    :ref:`snd_timer_read_t <doxid-structsnd__timer__read__t>` tr;
	    
	    while (:ref:`snd_timer_read <doxid-group___timer_1ga724ada94d0bc3564ad77973c0a084682>`(handle, &tr, sizeof(tr)) == sizeof(tr)) {
	        printf("TIMER: resolution = %uns, ticks = %u\n",
	            tr.:ref:`resolution <doxid-structsnd__timer__read__t_1a74c2d329a2a2c9c3bc53d5678b0fafe9>`, tr.:ref:`ticks <doxid-structsnd__timer__read__t_1a6f1deb447c21188ac4590e872358edd9>`);
	    }
	    (*acount)++;
	}
	
	int main(int argc, char *argv[])
	{
	    int idx, err;
	    int class = :ref:`SND_TIMER_CLASS_GLOBAL <doxid-group___timer_1ggafcf09894847cdee6925ab6e405c358d9ae7a63ed172c4c38199e4d6b3ed9fd728>`;
	    int sclass = :ref:`SND_TIMER_CLASS_NONE <doxid-group___timer_1ggafcf09894847cdee6925ab6e405c358d9a678ee4a7108ad3653fc49a6fe07ae45f>`;
	    int card = 0;
	    int device = :ref:`SND_TIMER_GLOBAL_SYSTEM <doxid-group___timer_1ga1cda350fb4de9a2f7a137c5649e3793c>`;
	    int subdevice = 0;
	    int list = 0;
	    int async = 0;
	    int acount = 0;
	    :ref:`snd_timer_t <doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>` *handle;
	    :ref:`snd_timer_id_t <doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>` *id;
	    :ref:`snd_timer_info_t <doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>` *info;
	    :ref:`snd_timer_params_t <doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>` *params;
	    char timername[64];
	    :ref:`snd_async_handler_t <doxid-group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d>` *ahandler;
	
	    :ref:`snd_timer_id_alloca <doxid-group___timer_1gaef1895685cb2f65d1a40cc46fa5a7eb2>`(&id);
	    :ref:`snd_timer_info_alloca <doxid-group___timer_1gafad2100b7f0478b8c3c59f0f4aced23e>`(&info);
	    :ref:`snd_timer_params_alloca <doxid-group___timer_1ga2e76b7b6f7fe340b4a06935f080fbbbd>`(&params);
	
	    idx = 1;
	    while (idx < argc) {
	        if (!strncmp(argv[idx], "class=", 5)) {
	            class = atoi(argv[idx]+6);
	        } else if (!strncmp(argv[idx], "sclass=", 6)) {
	            sclass = atoi(argv[idx]+7);
	        } else if (!strncmp(argv[idx], "card=", 5)) {
	            card = atoi(argv[idx]+5);
	        } else if (!strncmp(argv[idx], "device=", 7)) {
	            device = atoi(argv[idx]+7);
	        } else if (!strncmp(argv[idx], "subdevice=", 10)) {
	            subdevice = atoi(argv[idx]+10);
	        } else if (!strcmp(argv[idx], "list")) {
	            list = 1;
	        } else if (!strcmp(argv[idx], "async")) {
	            async = 1;
	        }
	        idx++;
	    }
	    if (class == :ref:`SND_TIMER_CLASS_SLAVE <doxid-group___timer_1ggafcf09894847cdee6925ab6e405c358d9a532f7292aafb8e4eaa8fce3bb42b7ea1>` && sclass == :ref:`SND_TIMER_SCLASS_NONE <doxid-group___timer_1ggad834b328331c3a4a4fb42041e2e61298a93c410a46bba52d680058f0718a32879>`) {
	        fprintf(stderr, "slave class is not set\n");
	        exit(EXIT_FAILURE);
	    }
	    if (list) {
	        :ref:`snd_timer_query_t <doxid-group___timer_1ga279f189051eba2c5e072c30198deb81a>` *qhandle;
	        if ((err = :ref:`snd_timer_query_open <doxid-group___timer_1ga54f6d3838ff4680fcda97952a60376ff>`(&qhandle, "hw", 0)) < 0) {
	            fprintf(stderr, "snd_timer_query_open error: %s\n", :ref:`snd_strerror <doxid-group___error_1ga182bbadf2349e11602bc531e8cf22f7e>`(err));
	            exit(EXIT_FAILURE);
	        }
	        :ref:`snd_timer_id_set_class <doxid-group___timer_1ga93bce2afe5e3f40f9f7adc17339273c4>`(id, :ref:`SND_TIMER_CLASS_NONE <doxid-group___timer_1ggafcf09894847cdee6925ab6e405c358d9a678ee4a7108ad3653fc49a6fe07ae45f>`);
	        while (1) {
	            if ((err = :ref:`snd_timer_query_next_device <doxid-group___timer_1ga5c10a9b8dc5f4442908fa3d15ab79169>`(qhandle, id)) < 0) {
	                fprintf(stderr, "timer next device error: %s\n", :ref:`snd_strerror <doxid-group___error_1ga182bbadf2349e11602bc531e8cf22f7e>`(err));
	                break;
	            }
	            if (:ref:`snd_timer_id_get_class <doxid-group___timer_1ga42ea98dbaf720519453c0110bd06fb8b>`(id) < 0)
	                break;
	            printf("Timer device: class %i, sclass %i, card %i, device %i, subdevice %i\n",
	                    :ref:`snd_timer_id_get_class <doxid-group___timer_1ga42ea98dbaf720519453c0110bd06fb8b>`(id),
	                    :ref:`snd_timer_id_get_sclass <doxid-group___timer_1ga82e2754532fa2b5b28733820eab4d600>`(id),
	                    :ref:`snd_timer_id_get_card <doxid-group___timer_1ga305324f73fc12e7e42891598613a2d29>`(id),
	                    :ref:`snd_timer_id_get_device <doxid-group___timer_1gaa864bb9270989329f8acc86c5aec2093>`(id),
	                    :ref:`snd_timer_id_get_subdevice <doxid-group___timer_1ga7f52f12140cd97f267143cbcd0832d02>`(id));
	        }
	        :ref:`snd_timer_query_close <doxid-group___timer_1ga13063464032aae91ab4e72dfdb57cb10>`(qhandle);
	        exit(EXIT_SUCCESS);
	    }
	    sprintf(timername, "hw:CLASS=%i,SCLASS=%i,CARD=%i,DEV=%i,SUBDEV=%i", class, sclass, card, device, subdevice);
	    if ((err = :ref:`snd_timer_open <doxid-group___timer_1ga9fa22f49745d1e383f0d6e5d9e795e2e>`(&handle, timername, :ref:`SND_TIMER_OPEN_NONBLOCK <doxid-group___timer_1gac2c50bf6045560bc13aab81f25b2b740>`))<0) {
	        fprintf(stderr, "timer open %i (%s)\n", err, :ref:`snd_strerror <doxid-group___error_1ga182bbadf2349e11602bc531e8cf22f7e>`(err));
	        exit(EXIT_FAILURE);
	    }
	    printf("Using timer class %i, slave class %i, card %i, device %i, subdevice %i\n", class, sclass, card, device, subdevice);
	    if ((err = :ref:`snd_timer_info <doxid-group___timer_1ga608cb266bf1cfd8f3796e6e55a2d5fe8>`(handle, info)) < 0) {
	        fprintf(stderr, "timer info %i (%s)\n", err, :ref:`snd_strerror <doxid-group___error_1ga182bbadf2349e11602bc531e8cf22f7e>`(err));
	        exit(0);
	    }
	    printf("Timer info:\n");
	    printf("  slave = %s\n", :ref:`snd_timer_info_is_slave <doxid-group___timer_1gaccf0a207b91965e7200355a0daaac6ce>`(info) ? "yes" : "no");
	    printf("  card = %i\n", :ref:`snd_timer_info_get_card <doxid-group___timer_1gaddb757aa65e9532ced42ff7e9146ff34>`(info));
	    printf("  id = '%s'\n", :ref:`snd_timer_info_get_id <doxid-group___timer_1gaf46477b4ca62a7c2bd87926a45ecbd50>`(info));
	    printf("  name = '%s'\n", :ref:`snd_timer_info_get_name <doxid-group___timer_1ga9360acea37a3351ab9d2c17b7a264395>`(info));
	    printf("  average resolution = %li\n", :ref:`snd_timer_info_get_resolution <doxid-group___timer_1ga3b33c3f0af5c93461e9493b0d4a3b81c>`(info));
	    :ref:`snd_timer_params_set_auto_start <doxid-group___timer_1gac39b36fdcc72cbb05adb909673df04f0>`(params, 1);
	    if (!:ref:`snd_timer_info_is_slave <doxid-group___timer_1gaccf0a207b91965e7200355a0daaac6ce>`(info)) {
	        :ref:`snd_timer_params_set_ticks <doxid-group___timer_1gaa7101edb9ec33fdbbb94e04256388caa>`(params, (1000000000 / :ref:`snd_timer_info_get_resolution <doxid-group___timer_1ga3b33c3f0af5c93461e9493b0d4a3b81c>`(info)) / 50); /* 50Hz */
	        if (:ref:`snd_timer_params_get_ticks <doxid-group___timer_1ga298418a42230f305c3c4efdf14da3403>`(params) < 1)
	            :ref:`snd_timer_params_set_ticks <doxid-group___timer_1gaa7101edb9ec33fdbbb94e04256388caa>`(params, 1);
	        printf("Using %li tick(s)\n", :ref:`snd_timer_params_get_ticks <doxid-group___timer_1ga298418a42230f305c3c4efdf14da3403>`(params));
	    } else {
	        :ref:`snd_timer_params_set_ticks <doxid-group___timer_1gaa7101edb9ec33fdbbb94e04256388caa>`(params, 1);
	    }
	    if ((err = :ref:`snd_timer_params <doxid-group___timer_1ga3fd358a410688c3aba3e2d69acf027a8>`(handle, params)) < 0) {
	        fprintf(stderr, "timer params %i (%s)\n", err, :ref:`snd_strerror <doxid-group___error_1ga182bbadf2349e11602bc531e8cf22f7e>`(err));
	        exit(0);
	    }
	    show_status(handle);
	    if (async) {
	        err = :ref:`snd_async_add_timer_handler <doxid-group___timer_1ga076a6bbae3bfdb956b0a1a6ea9daa0a2>`(&ahandler, handle, async_callback, &acount);
	        if (err < 0) {
	            fprintf(stderr, "unable to add async handler %i (%s)\n", err, :ref:`snd_strerror <doxid-group___error_1ga182bbadf2349e11602bc531e8cf22f7e>`(err));
	            exit(EXIT_FAILURE);
	        }
	    }
	    if ((err = :ref:`snd_timer_start <doxid-group___timer_1gafc990117a12e19a729ff10ef217fe2f9>`(handle)) < 0) {
	        fprintf(stderr, "timer start %i (%s)\n", err, :ref:`snd_strerror <doxid-group___error_1ga182bbadf2349e11602bc531e8cf22f7e>`(err));
	        exit(EXIT_FAILURE);
	    }
	    if (async) {
	        /* because all other work is done in the signal handler,
	           suspend the process */
	        while (acount < 25)
	            sleep(1);
	        :ref:`snd_timer_stop <doxid-group___timer_1ga6f8147c0679c820a77f98b1dd5b664a5>`(handle);
	    } else {
	        read_loop(handle, 25, :ref:`snd_timer_info_is_slave <doxid-group___timer_1gaccf0a207b91965e7200355a0daaac6ce>`(info) ? 10000 : 25);
	    }
	    show_status(handle);
	    :ref:`snd_timer_close <doxid-group___timer_1ga155e0b5c831a3140f49c04932da9404f>`(handle);
	    printf("Done\n");
	    return EXIT_SUCCESS;
	}
