.. index:: pair: group; Timer Interface
.. _doxid-group___timer:

Timer Interface
===============

.. toctree::
	:hidden:

	enum_snd_timer_class_t.rst
	enum_snd_timer_event_t.rst
	enum_snd_timer_slave_class_t.rst
	enum_snd_timer_type_t.rst
	struct_snd_timer_read_t.rst
	struct_snd_timer_tread_t.rst

Overview
~~~~~~~~

Timer Interface. :ref:`More...<details-group___timer>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// typedefs

	typedef struct _snd_timer_id :ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`;
	typedef struct _snd_timer_ginfo :ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`;
	typedef struct _snd_timer_gparams :ref:`snd_timer_gparams_t<doxid-group___timer_1ga891a982092ef97b93001ae2c096b8bf9>`;
	typedef struct _snd_timer_gstatus :ref:`snd_timer_gstatus_t<doxid-group___timer_1gac14592347542015d4540e5c91ba2f677>`;
	typedef struct _snd_timer_info :ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`;
	typedef struct _snd_timer_params :ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`;
	typedef struct _snd_timer_status :ref:`snd_timer_status_t<doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>`;
	typedef struct _snd_timer_query :ref:`snd_timer_query_t<doxid-group___timer_1ga279f189051eba2c5e072c30198deb81a>`;
	typedef struct _snd_timer :ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`;

	// enums

	enum :ref:`snd_timer_class_t<doxid-group___timer_1gafcf09894847cdee6925ab6e405c358d9>`;
	enum :ref:`snd_timer_event_t<doxid-group___timer_1ga396a3bb020be40c36c9a6de0554145b4>`;
	enum :ref:`snd_timer_slave_class_t<doxid-group___timer_1gad834b328331c3a4a4fb42041e2e61298>`;
	enum :ref:`snd_timer_type_t<doxid-group___timer_1ga07cba0cdbcdc514edb078bcc0740a7cf>`;

	// structs

	struct :ref:`snd_timer_read_t<doxid-structsnd__timer__read__t>`;
	struct :ref:`snd_timer_tread_t<doxid-structsnd__timer__tread__t>`;

	// global functions

	int
	:ref:`snd_timer_query_open<doxid-group___timer_1ga54f6d3838ff4680fcda97952a60376ff>`(
		:ref:`snd_timer_query_t<doxid-group___timer_1ga279f189051eba2c5e072c30198deb81a>`** handle,
		const char* name,
		int mode
	);

	int
	:ref:`snd_timer_query_open_lconf<doxid-group___timer_1ga5d11f58dc15f5d12465f4e6aacae43cf>`(
		:ref:`snd_timer_query_t<doxid-group___timer_1ga279f189051eba2c5e072c30198deb81a>`** handle,
		const char* name,
		int mode,
		:ref:`snd_config_t<doxid-group___config_1ga1c20905af775ae77d04d1a5696f67985>`* lconf
	);

	int
	:ref:`snd_timer_query_close<doxid-group___timer_1ga13063464032aae91ab4e72dfdb57cb10>`(:ref:`snd_timer_query_t<doxid-group___timer_1ga279f189051eba2c5e072c30198deb81a>`* handle);

	int
	:ref:`snd_timer_query_next_device<doxid-group___timer_1ga5c10a9b8dc5f4442908fa3d15ab79169>`(
		:ref:`snd_timer_query_t<doxid-group___timer_1ga279f189051eba2c5e072c30198deb81a>`* handle,
		:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* tid
	);

	int
	:ref:`snd_timer_query_info<doxid-group___timer_1gafcab2e2ce9b0ab69641ca10ba6a5bc17>`(
		:ref:`snd_timer_query_t<doxid-group___timer_1ga279f189051eba2c5e072c30198deb81a>`* handle,
		:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* info
	);

	int
	:ref:`snd_timer_query_params<doxid-group___timer_1ga03945b4d2bd9512de9a3fd923b71551d>`(
		:ref:`snd_timer_query_t<doxid-group___timer_1ga279f189051eba2c5e072c30198deb81a>`* handle,
		:ref:`snd_timer_gparams_t<doxid-group___timer_1ga891a982092ef97b93001ae2c096b8bf9>`* params
	);

	int
	:ref:`snd_timer_query_status<doxid-group___timer_1ga4faf0668a3808f0b0f78f260af193645>`(
		:ref:`snd_timer_query_t<doxid-group___timer_1ga279f189051eba2c5e072c30198deb81a>`* handle,
		:ref:`snd_timer_gstatus_t<doxid-group___timer_1gac14592347542015d4540e5c91ba2f677>`* status
	);

	int
	:ref:`snd_timer_open<doxid-group___timer_1ga9fa22f49745d1e383f0d6e5d9e795e2e>`(
		:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`** handle,
		const char* name,
		int mode
	);

	int
	:ref:`snd_timer_open_lconf<doxid-group___timer_1gadd7dd0538f800b67fea5f096a73c2fee>`(
		:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`** handle,
		const char* name,
		int mode,
		:ref:`snd_config_t<doxid-group___config_1ga1c20905af775ae77d04d1a5696f67985>`* lconf
	);

	int
	:ref:`snd_timer_close<doxid-group___timer_1ga155e0b5c831a3140f49c04932da9404f>`(:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* handle);

	int
	:ref:`snd_async_add_timer_handler<doxid-group___timer_1ga076a6bbae3bfdb956b0a1a6ea9daa0a2>`(
		:ref:`snd_async_handler_t<doxid-group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d>`** handler,
		:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* timer,
		:ref:`snd_async_callback_t<doxid-group___global_1gaf8937eadd968df14b64e54f49c29821c>` callback,
		void* private_data
	);

	:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`*
	:ref:`snd_async_handler_get_timer<doxid-group___timer_1gaa497b2873abd234df7e932ecdefad5e0>`(:ref:`snd_async_handler_t<doxid-group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d>`* handler);

	int
	:ref:`snd_timer_poll_descriptors_count<doxid-group___timer_1gaf035c37343afed7f13c60e950e461cdf>`(:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* handle);

	int
	:ref:`snd_timer_poll_descriptors<doxid-group___timer_1ga89ec000a41fa7dd1269e332324663f61>`(
		:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* handle,
		struct pollfd* pfds,
		unsigned int space
	);

	int
	:ref:`snd_timer_poll_descriptors_revents<doxid-group___timer_1ga395e14d49bbb41794fb1bb6114fdf93f>`(
		:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* timer,
		struct pollfd* pfds,
		unsigned int nfds,
		unsigned short* revents
	);

	int
	:ref:`snd_timer_info<doxid-group___timer_1ga608cb266bf1cfd8f3796e6e55a2d5fe8>`(
		:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* handle,
		:ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`* timer
	);

	int
	:ref:`snd_timer_params<doxid-group___timer_1ga3fd358a410688c3aba3e2d69acf027a8>`(
		:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* handle,
		:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params
	);

	int
	:ref:`snd_timer_status<doxid-group___timer_1gaa78c7089909252ee0ca69f7552fa2804>`(
		:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* handle,
		:ref:`snd_timer_status_t<doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>`* status
	);

	int
	:ref:`snd_timer_start<doxid-group___timer_1gafc990117a12e19a729ff10ef217fe2f9>`(:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* handle);

	int
	:ref:`snd_timer_stop<doxid-group___timer_1ga6f8147c0679c820a77f98b1dd5b664a5>`(:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* handle);

	int
	:ref:`snd_timer_continue<doxid-group___timer_1gaefeb6d7a87d49666470a62cea1440ed3>`(:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* handle);

	ssize_t
	:ref:`snd_timer_read<doxid-group___timer_1ga724ada94d0bc3564ad77973c0a084682>`(
		:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* handle,
		void* buffer,
		size_t size
	);

	size_t
	:ref:`snd_timer_id_sizeof<doxid-group___timer_1gacc0a4c452e6dc6a9401da8b0f22cd14f>`(void);

	int
	:ref:`snd_timer_id_malloc<doxid-group___timer_1gab60829b0a47dfc5ef88ce74e586ebe23>`(:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`** ptr);

	void
	:ref:`snd_timer_id_free<doxid-group___timer_1ga4c938bd81f93c364aff08de5e96a3cf6>`(:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* obj);

	void
	:ref:`snd_timer_id_copy<doxid-group___timer_1gac6d57323807a3ea3f3f9fe1870cd4755>`(
		:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* dst,
		const :ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* src
	);

	void
	:ref:`snd_timer_id_set_class<doxid-group___timer_1ga93bce2afe5e3f40f9f7adc17339273c4>`(
		:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* id,
		int dev_class
	);

	int
	:ref:`snd_timer_id_get_class<doxid-group___timer_1ga42ea98dbaf720519453c0110bd06fb8b>`(:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* id);

	void
	:ref:`snd_timer_id_set_sclass<doxid-group___timer_1ga2cafa2722ebd48051328c8684c9c544c>`(
		:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* id,
		int dev_sclass
	);

	int
	:ref:`snd_timer_id_get_sclass<doxid-group___timer_1ga82e2754532fa2b5b28733820eab4d600>`(:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* id);

	void
	:ref:`snd_timer_id_set_card<doxid-group___timer_1ga18406bd50ccd2818c7aa6fde6274a303>`(
		:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* id,
		int card
	);

	int
	:ref:`snd_timer_id_get_card<doxid-group___timer_1ga305324f73fc12e7e42891598613a2d29>`(:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* id);

	void
	:ref:`snd_timer_id_set_device<doxid-group___timer_1ga3c296e2bf5e2b0e1a71fe6612993e68e>`(
		:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* id,
		int device
	);

	int
	:ref:`snd_timer_id_get_device<doxid-group___timer_1gaa864bb9270989329f8acc86c5aec2093>`(:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* id);

	void
	:ref:`snd_timer_id_set_subdevice<doxid-group___timer_1ga28a3d45e09fc45f97fd37d7338138544>`(
		:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* id,
		int subdevice
	);

	int
	:ref:`snd_timer_id_get_subdevice<doxid-group___timer_1ga7f52f12140cd97f267143cbcd0832d02>`(:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* id);

	size_t
	:ref:`snd_timer_ginfo_sizeof<doxid-group___timer_1ga5433f9a5020b9db09939b51bfdecd449>`(void);

	int
	:ref:`snd_timer_ginfo_malloc<doxid-group___timer_1ga7c0c9386149431c24b8260678afe57ea>`(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`** ptr);

	void
	:ref:`snd_timer_ginfo_free<doxid-group___timer_1gaf223a09c3d076947ed3c09cb4d6fec79>`(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj);

	void
	:ref:`snd_timer_ginfo_copy<doxid-group___timer_1gacfde902fd8078764afa3c7cadfc5f53d>`(
		:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* dst,
		const :ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* src
	);

	int
	:ref:`snd_timer_ginfo_set_tid<doxid-group___timer_1gaebdec979e0c5a70100620cb7bf1c22d8>`(
		:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj,
		:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* tid
	);

	:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`*
	:ref:`snd_timer_ginfo_get_tid<doxid-group___timer_1ga66c1351ff92884298849d650f98b0a94>`(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj);

	unsigned int
	:ref:`snd_timer_ginfo_get_flags<doxid-group___timer_1ga3f4cf1a7e485c18aa16c9de159490f36>`(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj);

	int
	:ref:`snd_timer_ginfo_get_card<doxid-group___timer_1ga086c81db497d7818afabbaadb888731b>`(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj);

	char*
	:ref:`snd_timer_ginfo_get_id<doxid-group___timer_1ga7c95448884b61a0f8a04c2cd134d5a41>`(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj);

	char*
	:ref:`snd_timer_ginfo_get_name<doxid-group___timer_1gadcd41537e9db1c08d816a9f2fe1bea52>`(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj);

	unsigned long
	:ref:`snd_timer_ginfo_get_resolution<doxid-group___timer_1ga452c539c7c8c949bb446879e4d9151c2>`(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj);

	unsigned long
	:ref:`snd_timer_ginfo_get_resolution_min<doxid-group___timer_1ga33c9458b0a47e6448af0acc97d8860f7>`(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj);

	unsigned long
	:ref:`snd_timer_ginfo_get_resolution_max<doxid-group___timer_1ga6fbb78b3361209c15a0ece5bc2b939c0>`(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj);

	unsigned int
	:ref:`snd_timer_ginfo_get_clients<doxid-group___timer_1ga497147a128b64374829408beb773316d>`(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj);

	size_t
	:ref:`snd_timer_info_sizeof<doxid-group___timer_1ga3845cca41afd0f5ee40132d5b10c1e38>`(void);

	int
	:ref:`snd_timer_info_malloc<doxid-group___timer_1ga51e754aec623f96bcfeda9511f51b5b7>`(:ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`** ptr);

	void
	:ref:`snd_timer_info_free<doxid-group___timer_1ga10da72bb7ae7a6ed91e7857b61add016>`(:ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`* obj);

	void
	:ref:`snd_timer_info_copy<doxid-group___timer_1ga92e91d9222794a1c5e82b7672faa214b>`(
		:ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`* dst,
		const :ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`* src
	);

	int
	:ref:`snd_timer_info_is_slave<doxid-group___timer_1gaccf0a207b91965e7200355a0daaac6ce>`(:ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`* info);

	int
	:ref:`snd_timer_info_get_card<doxid-group___timer_1gaddb757aa65e9532ced42ff7e9146ff34>`(:ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`* info);

	const char*
	:ref:`snd_timer_info_get_id<doxid-group___timer_1gaf46477b4ca62a7c2bd87926a45ecbd50>`(:ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`* info);

	const char*
	:ref:`snd_timer_info_get_name<doxid-group___timer_1ga9360acea37a3351ab9d2c17b7a264395>`(:ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`* info);

	long
	:ref:`snd_timer_info_get_resolution<doxid-group___timer_1ga3b33c3f0af5c93461e9493b0d4a3b81c>`(:ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`* info);

	size_t
	:ref:`snd_timer_params_sizeof<doxid-group___timer_1ga8a76df112a4046b72bdd4903215eca09>`(void);

	int
	:ref:`snd_timer_params_malloc<doxid-group___timer_1ga6bdf00a7a9a2bcd46848c3862e31d7e7>`(:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`** ptr);

	void
	:ref:`snd_timer_params_free<doxid-group___timer_1ga3cba3ec4b6146cc7855d937b7aaf7953>`(:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* obj);

	void
	:ref:`snd_timer_params_copy<doxid-group___timer_1ga6beaa69176cf2bb404983da4d133fda5>`(
		:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* dst,
		const :ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* src
	);

	int
	:ref:`snd_timer_params_set_auto_start<doxid-group___timer_1gac39b36fdcc72cbb05adb909673df04f0>`(
		:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params,
		int auto_start
	);

	int
	:ref:`snd_timer_params_get_auto_start<doxid-group___timer_1ga0c7537d0729793d242b9263185f24e06>`(:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params);

	int
	:ref:`snd_timer_params_set_exclusive<doxid-group___timer_1ga497d23da21ec46d58ef3d6c01942d7c1>`(
		:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params,
		int exclusive
	);

	int
	:ref:`snd_timer_params_get_exclusive<doxid-group___timer_1ga66fffdd5b538259b54ebe9570581d52a>`(:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params);

	int
	:ref:`snd_timer_params_set_early_event<doxid-group___timer_1gaede871d499497de1199bdf1e8f9c9872>`(
		:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params,
		int early_event
	);

	int
	:ref:`snd_timer_params_get_early_event<doxid-group___timer_1ga6e45bbcef976cfac74336f337a0460cd>`(:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params);

	void
	:ref:`snd_timer_params_set_ticks<doxid-group___timer_1gaa7101edb9ec33fdbbb94e04256388caa>`(
		:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params,
		long ticks
	);

	long
	:ref:`snd_timer_params_get_ticks<doxid-group___timer_1ga298418a42230f305c3c4efdf14da3403>`(:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params);

	void
	:ref:`snd_timer_params_set_queue_size<doxid-group___timer_1ga3c55b27f682897a1b421b1be46a36289>`(
		:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params,
		long queue_size
	);

	long
	:ref:`snd_timer_params_get_queue_size<doxid-group___timer_1gaa4462f1d878e5f1f10c40549692effcb>`(:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params);

	void
	:ref:`snd_timer_params_set_filter<doxid-group___timer_1gab6820b66547c333402ea8e66fd600af2>`(
		:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params,
		unsigned int filter
	);

	unsigned int
	:ref:`snd_timer_params_get_filter<doxid-group___timer_1ga94c66976bd4b993c766e81d2452597f1>`(:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params);

	size_t
	:ref:`snd_timer_status_sizeof<doxid-group___timer_1gaf0ceabb82125265a8bfe6ea85b889063>`(void);

	int
	:ref:`snd_timer_status_malloc<doxid-group___timer_1ga6fa0de36e4494bd5ece4965ffe832db1>`(:ref:`snd_timer_status_t<doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>`** ptr);

	void
	:ref:`snd_timer_status_free<doxid-group___timer_1ga60f6cf340f3f4881e1bff8ed11f1e634>`(:ref:`snd_timer_status_t<doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>`* obj);

	void
	:ref:`snd_timer_status_copy<doxid-group___timer_1gac14cf4718333897ecb2b823b738aaff4>`(
		:ref:`snd_timer_status_t<doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>`* dst,
		const :ref:`snd_timer_status_t<doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>`* src
	);

	:ref:`snd_htimestamp_t<doxid-group___global_1ga3a3f5b65c40f498cdbc26944bd9855cf>`
	:ref:`snd_timer_status_get_timestamp<doxid-group___timer_1ga0c303da4c37285d423f428710409ee08>`(:ref:`snd_timer_status_t<doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>`* status);

	long
	:ref:`snd_timer_status_get_resolution<doxid-group___timer_1gaaab668cc548b6c4a24236504d63da0a0>`(:ref:`snd_timer_status_t<doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>`* status);

	long
	:ref:`snd_timer_status_get_lost<doxid-group___timer_1gaa7ad78e8af9855e71d4951147869693b>`(:ref:`snd_timer_status_t<doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>`* status);

	long
	:ref:`snd_timer_status_get_overrun<doxid-group___timer_1gaf3a83c122c2e19059297599d3486c04d>`(:ref:`snd_timer_status_t<doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>`* status);

	long
	:ref:`snd_timer_status_get_queue<doxid-group___timer_1ga6edb10e32b6b485ecccef73d862ca648>`(:ref:`snd_timer_status_t<doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>`* status);

	long
	:ref:`snd_timer_info_get_ticks<doxid-group___timer_1gad0cf85bf970338f0924e0f642057c9a6>`(:ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`* info);

	// macros

	#define :ref:`SND_TIMER_DLSYM_VERSION<doxid-group___timer_1gae123de10661be511c00d2d7b6a428745>`
	#define :ref:`SND_TIMER_GLOBAL_HPET<doxid-group___timer_1ga15f5febc65924c9d3b12c7440c13bdd3>`
	#define :ref:`SND_TIMER_GLOBAL_HRTIMER<doxid-group___timer_1gacf694819483359539a0017b09e9de9ab>`
	#define :ref:`SND_TIMER_GLOBAL_RTC<doxid-group___timer_1ga77ddf4d042846b39fc4ed4966e04bee2>`
	#define :ref:`SND_TIMER_GLOBAL_SYSTEM<doxid-group___timer_1ga1cda350fb4de9a2f7a137c5649e3793c>`
	#define :ref:`SND_TIMER_OPEN_NONBLOCK<doxid-group___timer_1gac2c50bf6045560bc13aab81f25b2b740>`
	#define :ref:`SND_TIMER_OPEN_TREAD<doxid-group___timer_1ga8d8b1f21a9c9db84a6ffc02e8f2c745b>`
	#define :ref:`SND_TIMER_QUERY_DLSYM_VERSION<doxid-group___timer_1ga7439ac1cc9e0958a21f313ca848af77c>`
	#define :ref:`snd_timer_ginfo_alloca<doxid-group___timer_1ga2b8086e599bd8d1bec750df97f572fcf>`(ptr)
	#define :ref:`snd_timer_id_alloca<doxid-group___timer_1gaef1895685cb2f65d1a40cc46fa5a7eb2>`(ptr)
	#define :ref:`snd_timer_info_alloca<doxid-group___timer_1gafad2100b7f0478b8c3c59f0f4aced23e>`(ptr)
	#define :ref:`snd_timer_params_alloca<doxid-group___timer_1ga2e76b7b6f7fe340b4a06935f080fbbbd>`(ptr)
	#define :ref:`snd_timer_status_alloca<doxid-group___timer_1ga6597b8f73b30a3f2bf2aa9f3590b92f2>`(ptr)

.. _details-group___timer:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Timer Interface. See :ref:`Timer interface <doxid-timer>` page for more details.

Typedefs
--------

.. index:: pair: typedef; snd_timer_id_t
.. _doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct _snd_timer_id snd_timer_id_t

timer identification structure

.. index:: pair: typedef; snd_timer_ginfo_t
.. _doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct _snd_timer_ginfo snd_timer_ginfo_t

timer global info structure

.. index:: pair: typedef; snd_timer_gparams_t
.. _doxid-group___timer_1ga891a982092ef97b93001ae2c096b8bf9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct _snd_timer_gparams snd_timer_gparams_t

timer global params structure

.. index:: pair: typedef; snd_timer_gstatus_t
.. _doxid-group___timer_1gac14592347542015d4540e5c91ba2f677:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct _snd_timer_gstatus snd_timer_gstatus_t

timer global status structure

.. index:: pair: typedef; snd_timer_info_t
.. _doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct _snd_timer_info snd_timer_info_t

timer info structure

.. index:: pair: typedef; snd_timer_params_t
.. _doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct _snd_timer_params snd_timer_params_t

timer params structure

.. index:: pair: typedef; snd_timer_status_t
.. _doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct _snd_timer_status snd_timer_status_t

timer status structure

.. index:: pair: typedef; snd_timer_query_t
.. _doxid-group___timer_1ga279f189051eba2c5e072c30198deb81a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct _snd_timer_query snd_timer_query_t

timer query handle

.. index:: pair: typedef; snd_timer_t
.. _doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct _snd_timer snd_timer_t

timer handle

Global Functions
----------------

.. index:: pair: function; snd_timer_query_open
.. _doxid-group___timer_1ga54f6d3838ff4680fcda97952a60376ff:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_query_open(
		:ref:`snd_timer_query_t<doxid-group___timer_1ga279f189051eba2c5e072c30198deb81a>`** handle,
		const char* name,
		int mode
	)

Opens a new connection to the timer query interface.

Opens a new connection to the RawMidi interface specified with an ASCII identifier and mode.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- timer

		- Returned handle (NULL if not wanted)

	*
		- name

		- ASCII identifier of the RawMidi handle

	*
		- mode

		- Open mode



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_timer_query_open_lconf
.. _doxid-group___timer_1ga5d11f58dc15f5d12465f4e6aacae43cf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_query_open_lconf(
		:ref:`snd_timer_query_t<doxid-group___timer_1ga279f189051eba2c5e072c30198deb81a>`** handle,
		const char* name,
		int mode,
		:ref:`snd_config_t<doxid-group___config_1ga1c20905af775ae77d04d1a5696f67985>`* lconf
	)

Opens a new connection to the timer query interface using local configuration.

Opens a new connection to the RawMidi interface specified with an ASCII identifier and mode.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- timer

		- Returned handle (NULL if not wanted)

	*
		- name

		- ASCII identifier of the RawMidi handle

	*
		- mode

		- Open mode

	*
		- lconf

		- Local configuration



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_timer_query_close
.. _doxid-group___timer_1ga13063464032aae91ab4e72dfdb57cb10:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_query_close(:ref:`snd_timer_query_t<doxid-group___timer_1ga279f189051eba2c5e072c30198deb81a>`* handle)

close timer query handle

Closes the specified timer handle and frees all associated resources.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- timer

		- timer handle



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_timer_query_next_device
.. _doxid-group___timer_1ga5c10a9b8dc5f4442908fa3d15ab79169:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_query_next_device(
		:ref:`snd_timer_query_t<doxid-group___timer_1ga279f189051eba2c5e072c30198deb81a>`* handle,
		:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* tid
	)

obtain the next timer identification

if tid->dev_class is -1, then the first device is returned if result tid->dev_class is -1, no more devices are left



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- timer

		- timer handle

	*
		- tid

		- timer identification



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_timer_query_info
.. _doxid-group___timer_1gafcab2e2ce9b0ab69641ca10ba6a5bc17:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_query_info(
		:ref:`snd_timer_query_t<doxid-group___timer_1ga279f189051eba2c5e072c30198deb81a>`* handle,
		:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* info
	)

obtain the timer global information



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- timer

		- timer handle

	*
		- info

		- timer information



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_timer_query_params
.. _doxid-group___timer_1ga03945b4d2bd9512de9a3fd923b71551d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_query_params(
		:ref:`snd_timer_query_t<doxid-group___timer_1ga279f189051eba2c5e072c30198deb81a>`* handle,
		:ref:`snd_timer_gparams_t<doxid-group___timer_1ga891a982092ef97b93001ae2c096b8bf9>`* params
	)

set the timer global parameters



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- timer

		- timer handle

	*
		- params

		- timer parameters



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_timer_query_status
.. _doxid-group___timer_1ga4faf0668a3808f0b0f78f260af193645:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_query_status(
		:ref:`snd_timer_query_t<doxid-group___timer_1ga279f189051eba2c5e072c30198deb81a>`* handle,
		:ref:`snd_timer_gstatus_t<doxid-group___timer_1gac14592347542015d4540e5c91ba2f677>`* status
	)

get the timer global status



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- timer

		- timer handle

	*
		- status

		- timer status



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_timer_open
.. _doxid-group___timer_1ga9fa22f49745d1e383f0d6e5d9e795e2e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_open(
		:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`** handle,
		const char* name,
		int mode
	)

Opens a new connection to the timer interface.

Opens a new connection to the timer interface specified with an ASCII identifier and mode.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- timer

		- Returned handle (NULL if not wanted)

	*
		- name

		- ASCII identifier of the timer handle

	*
		- mode

		- Open mode



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_timer_open_lconf
.. _doxid-group___timer_1gadd7dd0538f800b67fea5f096a73c2fee:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_open_lconf(
		:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`** handle,
		const char* name,
		int mode,
		:ref:`snd_config_t<doxid-group___config_1ga1c20905af775ae77d04d1a5696f67985>`* lconf
	)

Opens a new connection to the timer interface using local configuration.

Opens a new connection to the timer interface specified with an ASCII identifier and mode.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- timer

		- Returned handle (NULL if not wanted)

	*
		- name

		- ASCII identifier of the timer handle

	*
		- mode

		- Open mode

	*
		- lconf

		- Local configuration



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_timer_close
.. _doxid-group___timer_1ga155e0b5c831a3140f49c04932da9404f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_close(:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* handle)

close timer handle

Closes the specified timer handle and frees all associated resources.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- timer

		- timer handle



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_async_add_timer_handler
.. _doxid-group___timer_1ga076a6bbae3bfdb956b0a1a6ea9daa0a2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_async_add_timer_handler(
		:ref:`snd_async_handler_t<doxid-group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d>`** handler,
		:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* timer,
		:ref:`snd_async_callback_t<doxid-group___global_1gaf8937eadd968df14b64e54f49c29821c>` callback,
		void* private_data
	)

Add an async handler for a timer.

The asynchronous callback is called when new timer event occurs.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- handler

		- Returned handler handle

	*
		- timer

		- timer handle

	*
		- callback

		- Callback function

	*
		- private_data

		- Callback private data



.. rubric:: Returns:

0 otherwise a negative error code on failure

.. index:: pair: function; snd_async_handler_get_timer
.. _doxid-group___timer_1gaa497b2873abd234df7e932ecdefad5e0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`*
	snd_async_handler_get_timer(:ref:`snd_async_handler_t<doxid-group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d>`* handler)

Return timer handle related to an async handler.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- handler

		- Async handler handle



.. rubric:: Returns:

timer handle

.. index:: pair: function; snd_timer_poll_descriptors_count
.. _doxid-group___timer_1gaf035c37343afed7f13c60e950e461cdf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_poll_descriptors_count(:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* handle)

get count of poll descriptors for timer handle



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- timer

		- timer handle



.. rubric:: Returns:

count of poll descriptors

.. index:: pair: function; snd_timer_poll_descriptors
.. _doxid-group___timer_1ga89ec000a41fa7dd1269e332324663f61:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_poll_descriptors(
		:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* handle,
		struct pollfd* pfds,
		unsigned int space
	)

get poll descriptors



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- timer

		- timer handle

	*
		- pfds

		- array of poll descriptors

	*
		- space

		- space in the poll descriptor array



.. rubric:: Returns:

count of filled descriptors

.. index:: pair: function; snd_timer_poll_descriptors_revents
.. _doxid-group___timer_1ga395e14d49bbb41794fb1bb6114fdf93f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_poll_descriptors_revents(
		:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* timer,
		struct pollfd* pfds,
		unsigned int nfds,
		unsigned short* revents
	)

get returned events from poll descriptors



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- timer

		- timer handle

	*
		- pfds

		- array of poll descriptors

	*
		- nfds

		- count of poll descriptors

	*
		- revents

		- returned events



.. rubric:: Returns:

zero if success, otherwise a negative error code

.. index:: pair: function; snd_timer_info
.. _doxid-group___timer_1ga608cb266bf1cfd8f3796e6e55a2d5fe8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_info(
		:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* handle,
		:ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`* timer
	)

get information about timer handle



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- timer

		- timer handle

	*
		- info

		- pointer to a snd_timer_info_t structure to be filled



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_timer_params
.. _doxid-group___timer_1ga3fd358a410688c3aba3e2d69acf027a8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_params(
		:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* handle,
		:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params
	)

set parameters for timer handle



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- timer

		- timer handle

	*
		- params

		- pointer to a :ref:`snd_timer_params_t <doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>` structure



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_timer_status
.. _doxid-group___timer_1gaa78c7089909252ee0ca69f7552fa2804:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_status(
		:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* handle,
		:ref:`snd_timer_status_t<doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>`* status
	)

get status from timer handle



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- timer

		- timer handle

	*
		- status

		- pointer to a :ref:`snd_timer_status_t <doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>` structure to be filled



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_timer_start
.. _doxid-group___timer_1gafc990117a12e19a729ff10ef217fe2f9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_start(:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* handle)

start the timer



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- timer

		- timer handle



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_timer_stop
.. _doxid-group___timer_1ga6f8147c0679c820a77f98b1dd5b664a5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_stop(:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* handle)

stop the timer



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- timer

		- timer handle



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_timer_continue
.. _doxid-group___timer_1gaefeb6d7a87d49666470a62cea1440ed3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_continue(:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* handle)

continue the timer



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- timer

		- timer handle



.. rubric:: Returns:

0 on success otherwise a negative error code

.. index:: pair: function; snd_timer_read
.. _doxid-group___timer_1ga724ada94d0bc3564ad77973c0a084682:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	ssize_t
	snd_timer_read(
		:ref:`snd_timer_t<doxid-group___timer_1ga7f514d85bfd93e1e5853a5fded89b668>`* handle,
		void* buffer,
		size_t size
	)

read bytes using timer handle



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- timer

		- timer handle

	*
		- buffer

		- buffer to store the input bytes

	*
		- size

		- input buffer size in bytes

.. index:: pair: function; snd_timer_id_sizeof
.. _doxid-group___timer_1gacc0a4c452e6dc6a9401da8b0f22cd14f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	size_t
	snd_timer_id_sizeof(void)

get size of the snd_timer_id_t structure in bytes



.. rubric:: Returns:

size of the snd_timer_id_t structure in bytes

.. index:: pair: function; snd_timer_id_malloc
.. _doxid-group___timer_1gab60829b0a47dfc5ef88ce74e586ebe23:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_id_malloc(:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`** ptr)

allocate a new snd_timer_id_t structure

Allocates a new snd_timer_id_t structure using the standard malloc C library function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- returned pointer



.. rubric:: Returns:

0 on success otherwise a negative error code if fails

.. index:: pair: function; snd_timer_id_free
.. _doxid-group___timer_1ga4c938bd81f93c364aff08de5e96a3cf6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_timer_id_free(:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* obj)

frees the snd_timer_id_t structure

Frees the given snd_timer_id_t structure using the standard free C library function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- pointer to the snd_timer_id_t structure to free

.. index:: pair: function; snd_timer_id_copy
.. _doxid-group___timer_1gac6d57323807a3ea3f3f9fe1870cd4755:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_timer_id_copy(
		:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* dst,
		const :ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* src
	)

copy one snd_timer_id_t structure to another



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dst

		- destination snd_timer_id_t structure

	*
		- src

		- source snd_timer_id_t structure

.. index:: pair: function; snd_timer_id_set_class
.. _doxid-group___timer_1ga93bce2afe5e3f40f9f7adc17339273c4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_timer_id_set_class(
		:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* id,
		int dev_class
	)

set timer class



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- tid

		- pointer to :ref:`snd_timer_id_t <doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>` structure

	*
		- dev_class

		- class of timer device

.. index:: pair: function; snd_timer_id_get_class
.. _doxid-group___timer_1ga42ea98dbaf720519453c0110bd06fb8b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_id_get_class(:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* id)

get timer class



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- tid

		- pointer to :ref:`snd_timer_id_t <doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>` structure



.. rubric:: Returns:

timer class

.. index:: pair: function; snd_timer_id_set_sclass
.. _doxid-group___timer_1ga2cafa2722ebd48051328c8684c9c544c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_timer_id_set_sclass(
		:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* id,
		int dev_sclass
	)

set timer sub-class



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- tid

		- pointer to :ref:`snd_timer_id_t <doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>` structure

	*
		- dev_sclass

		- sub-class of timer device

.. index:: pair: function; snd_timer_id_get_sclass
.. _doxid-group___timer_1ga82e2754532fa2b5b28733820eab4d600:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_id_get_sclass(:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* id)

get timer sub-class



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- tid

		- pointer to :ref:`snd_timer_id_t <doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>` structure



.. rubric:: Returns:

timer sub-class

.. index:: pair: function; snd_timer_id_set_card
.. _doxid-group___timer_1ga18406bd50ccd2818c7aa6fde6274a303:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_timer_id_set_card(
		:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* id,
		int card
	)

set timer card



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- tid

		- pointer to :ref:`snd_timer_id_t <doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>` structure

	*
		- card

		- card number

.. index:: pair: function; snd_timer_id_get_card
.. _doxid-group___timer_1ga305324f73fc12e7e42891598613a2d29:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_id_get_card(:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* id)

get timer card



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- tid

		- pointer to :ref:`snd_timer_id_t <doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>` structure



.. rubric:: Returns:

timer card number

.. index:: pair: function; snd_timer_id_set_device
.. _doxid-group___timer_1ga3c296e2bf5e2b0e1a71fe6612993e68e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_timer_id_set_device(
		:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* id,
		int device
	)

set timer device



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- tid

		- pointer to :ref:`snd_timer_id_t <doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>` structure

	*
		- device

		- device number

.. index:: pair: function; snd_timer_id_get_device
.. _doxid-group___timer_1gaa864bb9270989329f8acc86c5aec2093:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_id_get_device(:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* id)

get timer device



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- tid

		- pointer to :ref:`snd_timer_id_t <doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>` structure



.. rubric:: Returns:

timer device number

.. index:: pair: function; snd_timer_id_set_subdevice
.. _doxid-group___timer_1ga28a3d45e09fc45f97fd37d7338138544:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_timer_id_set_subdevice(
		:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* id,
		int subdevice
	)

set timer subdevice



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- tid

		- pointer to :ref:`snd_timer_id_t <doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>` structure

	*
		- subdevice

		- subdevice number

.. index:: pair: function; snd_timer_id_get_subdevice
.. _doxid-group___timer_1ga7f52f12140cd97f267143cbcd0832d02:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_id_get_subdevice(:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* id)

get timer subdevice



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- tid

		- pointer to :ref:`snd_timer_id_t <doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>` structure



.. rubric:: Returns:

timer subdevice number

.. index:: pair: function; snd_timer_ginfo_sizeof
.. _doxid-group___timer_1ga5433f9a5020b9db09939b51bfdecd449:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	size_t
	snd_timer_ginfo_sizeof(void)

get size of the snd_timer_ginfo_t structure in bytes



.. rubric:: Returns:

size of the snd_timer_ginfo_t structure in bytes

.. index:: pair: function; snd_timer_ginfo_malloc
.. _doxid-group___timer_1ga7c0c9386149431c24b8260678afe57ea:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_ginfo_malloc(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`** ptr)

allocate a new snd_timer_ginfo_t structure

Allocates a new snd_timer_info_t structure using the standard malloc C library function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- returned pointer



.. rubric:: Returns:

0 on success otherwise a negative error code if fails

.. index:: pair: function; snd_timer_ginfo_free
.. _doxid-group___timer_1gaf223a09c3d076947ed3c09cb4d6fec79:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_timer_ginfo_free(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj)

frees the snd_timer_ginfo_t structure

Frees the given snd_timer_info_t structure using the standard free C library function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- pointer to the snd_timer_ginfo_t structure to free

.. index:: pair: function; snd_timer_ginfo_copy
.. _doxid-group___timer_1gacfde902fd8078764afa3c7cadfc5f53d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_timer_ginfo_copy(
		:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* dst,
		const :ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* src
	)

copy one snd_timer_info_t structure to another



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dst

		- destination snd_timer_info_t structure

	*
		- src

		- source snd_timer_info_t structure

.. index:: pair: function; snd_timer_ginfo_set_tid
.. _doxid-group___timer_1gaebdec979e0c5a70100620cb7bf1c22d8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_ginfo_set_tid(
		:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj,
		:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`* tid
	)

set timer identification



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to :ref:`snd_timer_ginfo_t <doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>` structure

	*
		- tid

		- pointer to :ref:`snd_timer_id_t <doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>` structure



.. rubric:: Returns:

zero on success otherwise a negative error number

.. index:: pair: function; snd_timer_ginfo_get_tid
.. _doxid-group___timer_1ga66c1351ff92884298849d650f98b0a94:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`snd_timer_id_t<doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>`*
	snd_timer_ginfo_get_tid(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj)

get timer identification



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to :ref:`snd_timer_ginfo_t <doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>` structure



.. rubric:: Returns:

pointer to snd_timer_id_t

.. index:: pair: function; snd_timer_ginfo_get_flags
.. _doxid-group___timer_1ga3f4cf1a7e485c18aa16c9de159490f36:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_timer_ginfo_get_flags(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj)

get timer flags



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to :ref:`snd_timer_ginfo_t <doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>` structure



.. rubric:: Returns:

timer flags

.. index:: pair: function; snd_timer_ginfo_get_card
.. _doxid-group___timer_1ga086c81db497d7818afabbaadb888731b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_ginfo_get_card(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj)

get associated card with timer



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to :ref:`snd_timer_ginfo_t <doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>` structure



.. rubric:: Returns:

associated card

.. index:: pair: function; snd_timer_ginfo_get_id
.. _doxid-group___timer_1ga7c95448884b61a0f8a04c2cd134d5a41:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	char*
	snd_timer_ginfo_get_id(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj)

get timer identification



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to :ref:`snd_timer_ginfo_t <doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>` structure



.. rubric:: Returns:

timer identification

.. index:: pair: function; snd_timer_ginfo_get_name
.. _doxid-group___timer_1gadcd41537e9db1c08d816a9f2fe1bea52:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	char*
	snd_timer_ginfo_get_name(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj)

get timer name



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to :ref:`snd_timer_ginfo_t <doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>` structure



.. rubric:: Returns:

timer name

.. index:: pair: function; snd_timer_ginfo_get_resolution
.. _doxid-group___timer_1ga452c539c7c8c949bb446879e4d9151c2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned long
	snd_timer_ginfo_get_resolution(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj)

get timer resolution in ns



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to :ref:`snd_timer_ginfo_t <doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>` structure



.. rubric:: Returns:

timer resolution in ns

.. index:: pair: function; snd_timer_ginfo_get_resolution_min
.. _doxid-group___timer_1ga33c9458b0a47e6448af0acc97d8860f7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned long
	snd_timer_ginfo_get_resolution_min(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj)

get timer minimal resolution in ns



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to :ref:`snd_timer_ginfo_t <doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>` structure



.. rubric:: Returns:

timer minimal resolution in ns

.. index:: pair: function; snd_timer_ginfo_get_resolution_max
.. _doxid-group___timer_1ga6fbb78b3361209c15a0ece5bc2b939c0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned long
	snd_timer_ginfo_get_resolution_max(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj)

get timer maximal resolution in ns



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to :ref:`snd_timer_ginfo_t <doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>` structure



.. rubric:: Returns:

timer maximal resolution in ns

.. index:: pair: function; snd_timer_ginfo_get_clients
.. _doxid-group___timer_1ga497147a128b64374829408beb773316d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_timer_ginfo_get_clients(:ref:`snd_timer_ginfo_t<doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>`* obj)

get current timer clients



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to :ref:`snd_timer_ginfo_t <doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>` structure



.. rubric:: Returns:

current timer clients

.. index:: pair: function; snd_timer_info_sizeof
.. _doxid-group___timer_1ga3845cca41afd0f5ee40132d5b10c1e38:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	size_t
	snd_timer_info_sizeof(void)

get size of the snd_timer_info_t structure in bytes



.. rubric:: Returns:

size of the snd_timer_info_t structure in bytes

.. index:: pair: function; snd_timer_info_malloc
.. _doxid-group___timer_1ga51e754aec623f96bcfeda9511f51b5b7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_info_malloc(:ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`** ptr)

allocate a new snd_timer_info_t structure

Allocates a new snd_timer_info_t structure using the standard malloc C library function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- returned pointer



.. rubric:: Returns:

0 on success otherwise a negative error code if fails

.. index:: pair: function; snd_timer_info_free
.. _doxid-group___timer_1ga10da72bb7ae7a6ed91e7857b61add016:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_timer_info_free(:ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`* obj)

frees the snd_timer_info_t structure

Frees the given snd_timer_info_t structure using the standard free C library function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- pointer to the snd_timer_info_t structure to free

.. index:: pair: function; snd_timer_info_copy
.. _doxid-group___timer_1ga92e91d9222794a1c5e82b7672faa214b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_timer_info_copy(
		:ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`* dst,
		const :ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`* src
	)

copy one snd_timer_info_t structure to another



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dst

		- destination snd_timer_info_t structure

	*
		- src

		- source snd_timer_info_t structure

.. index:: pair: function; snd_timer_info_is_slave
.. _doxid-group___timer_1gaccf0a207b91965e7200355a0daaac6ce:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_info_is_slave(:ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`* info)

determine, if timer is slave



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- pointer to :ref:`snd_timer_info_t <doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>` structure



.. rubric:: Returns:

nonzero if timer is slave

.. index:: pair: function; snd_timer_info_get_card
.. _doxid-group___timer_1gaddb757aa65e9532ced42ff7e9146ff34:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_info_get_card(:ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`* info)

get timer card



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- pointer to :ref:`snd_timer_info_t <doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>` structure



.. rubric:: Returns:

timer card number

.. index:: pair: function; snd_timer_info_get_id
.. _doxid-group___timer_1gaf46477b4ca62a7c2bd87926a45ecbd50:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_timer_info_get_id(:ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`* info)

get timer id



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- pointer to :ref:`snd_timer_info_t <doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>` structure



.. rubric:: Returns:

timer id

.. index:: pair: function; snd_timer_info_get_name
.. _doxid-group___timer_1ga9360acea37a3351ab9d2c17b7a264395:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	snd_timer_info_get_name(:ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`* info)

get timer name



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- pointer to :ref:`snd_timer_info_t <doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>` structure



.. rubric:: Returns:

timer name

.. index:: pair: function; snd_timer_info_get_resolution
.. _doxid-group___timer_1ga3b33c3f0af5c93461e9493b0d4a3b81c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	long
	snd_timer_info_get_resolution(:ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`* info)

get timer resolution in us



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- pointer to :ref:`snd_timer_info_t <doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>` structure



.. rubric:: Returns:

timer resolution

.. index:: pair: function; snd_timer_params_sizeof
.. _doxid-group___timer_1ga8a76df112a4046b72bdd4903215eca09:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	size_t
	snd_timer_params_sizeof(void)

get size of the snd_timer_params_t structure in bytes



.. rubric:: Returns:

size of the snd_timer_params_t structure in bytes

.. index:: pair: function; snd_timer_params_malloc
.. _doxid-group___timer_1ga6bdf00a7a9a2bcd46848c3862e31d7e7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_params_malloc(:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`** ptr)

allocate a new snd_timer_params_t structure

Allocates a new snd_timer_params_t structure using the standard malloc C library function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- returned pointer



.. rubric:: Returns:

0 on success otherwise a negative error code if fails

.. index:: pair: function; snd_timer_params_free
.. _doxid-group___timer_1ga3cba3ec4b6146cc7855d937b7aaf7953:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_timer_params_free(:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* obj)

frees the snd_timer_params_t structure

Frees the given snd_timer_params_t structure using the standard free C library function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- pointer to the snd_timer_params_t structure to free

.. index:: pair: function; snd_timer_params_copy
.. _doxid-group___timer_1ga6beaa69176cf2bb404983da4d133fda5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_timer_params_copy(
		:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* dst,
		const :ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* src
	)

copy one snd_timer_params_t structure to another



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dst

		- destination snd_timer_params_t structure

	*
		- src

		- source snd_timer_params_t structure

.. index:: pair: function; snd_timer_params_set_auto_start
.. _doxid-group___timer_1gac39b36fdcc72cbb05adb909673df04f0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_params_set_auto_start(
		:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params,
		int auto_start
	)

set timer auto start



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- pointer to :ref:`snd_timer_params_t <doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>` structure

	*
		- auto_start

		- The boolean value to set

.. index:: pair: function; snd_timer_params_get_auto_start
.. _doxid-group___timer_1ga0c7537d0729793d242b9263185f24e06:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_params_get_auto_start(:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params)

determine if timer has auto start flag



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- pointer to :ref:`snd_timer_params_t <doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>` structure



.. rubric:: Returns:

nonzero if timer has auto start flag

.. index:: pair: function; snd_timer_params_set_exclusive
.. _doxid-group___timer_1ga497d23da21ec46d58ef3d6c01942d7c1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_params_set_exclusive(
		:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params,
		int exclusive
	)

set timer exclusive use



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- pointer to :ref:`snd_timer_params_t <doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>` structure

	*
		- exclusive

		- The boolean value to set

.. index:: pair: function; snd_timer_params_get_exclusive
.. _doxid-group___timer_1ga66fffdd5b538259b54ebe9570581d52a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_params_get_exclusive(:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params)

determine if timer has exclusive flag



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- pointer to :ref:`snd_timer_params_t <doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>` structure



.. rubric:: Returns:

nonzero if timer has exclusive flag

.. index:: pair: function; snd_timer_params_set_early_event
.. _doxid-group___timer_1gaede871d499497de1199bdf1e8f9c9872:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_params_set_early_event(
		:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params,
		int early_event
	)

set timer early event



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- pointer to :ref:`snd_timer_params_t <doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>` structure

	*
		- early_event

		- The boolean value to set

.. index:: pair: function; snd_timer_params_get_early_event
.. _doxid-group___timer_1ga6e45bbcef976cfac74336f337a0460cd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_params_get_early_event(:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params)

determine if timer has early event flag



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- pointer to :ref:`snd_timer_params_t <doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>` structure



.. rubric:: Returns:

nonzero if timer has early event flag set

.. index:: pair: function; snd_timer_params_set_ticks
.. _doxid-group___timer_1gaa7101edb9ec33fdbbb94e04256388caa:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_timer_params_set_ticks(
		:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params,
		long ticks
	)

set timer ticks



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- pointer to :ref:`snd_timer_params_t <doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>` structure

	*
		- ticks

		- Ticks to set

.. index:: pair: function; snd_timer_params_get_ticks
.. _doxid-group___timer_1ga298418a42230f305c3c4efdf14da3403:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	long
	snd_timer_params_get_ticks(:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params)

get timer ticks



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- pointer to :ref:`snd_timer_params_t <doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>` structure



.. rubric:: Returns:

timer ticks

.. index:: pair: function; snd_timer_params_set_queue_size
.. _doxid-group___timer_1ga3c55b27f682897a1b421b1be46a36289:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_timer_params_set_queue_size(
		:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params,
		long queue_size
	)

set timer queue size (32-1024)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- pointer to :ref:`snd_timer_params_t <doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>` structure

	*
		- queue_size

		- The queue size to set

.. index:: pair: function; snd_timer_params_get_queue_size
.. _doxid-group___timer_1gaa4462f1d878e5f1f10c40549692effcb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	long
	snd_timer_params_get_queue_size(:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params)

get queue size



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- pointer to :ref:`snd_timer_params_t <doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>` structure



.. rubric:: Returns:

queue size

.. index:: pair: function; snd_timer_params_set_filter
.. _doxid-group___timer_1gab6820b66547c333402ea8e66fd600af2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_timer_params_set_filter(
		:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params,
		unsigned int filter
	)

set timer event filter



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- pointer to :ref:`snd_timer_params_t <doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>` structure

	*
		- filter

		- The event filter bits to set

.. index:: pair: function; snd_timer_params_get_filter
.. _doxid-group___timer_1ga94c66976bd4b993c766e81d2452597f1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	snd_timer_params_get_filter(:ref:`snd_timer_params_t<doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>`* params)

get timer event filter



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- pointer to :ref:`snd_timer_params_t <doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>` structure



.. rubric:: Returns:

timer event filter

.. index:: pair: function; snd_timer_status_sizeof
.. _doxid-group___timer_1gaf0ceabb82125265a8bfe6ea85b889063:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	size_t
	snd_timer_status_sizeof(void)

get size of the snd_timer_status_t structure in bytes



.. rubric:: Returns:

size of the snd_timer_status_t structure in bytes

.. index:: pair: function; snd_timer_status_malloc
.. _doxid-group___timer_1ga6fa0de36e4494bd5ece4965ffe832db1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_timer_status_malloc(:ref:`snd_timer_status_t<doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>`** ptr)

allocate a new snd_timer_status_t structure

Allocates a new snd_timer_status_t structure using the standard malloc C library function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- status

		- returned pointer



.. rubric:: Returns:

0 on success otherwise a negative error code if fails

.. index:: pair: function; snd_timer_status_free
.. _doxid-group___timer_1ga60f6cf340f3f4881e1bff8ed11f1e634:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_timer_status_free(:ref:`snd_timer_status_t<doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>`* obj)

frees the snd_timer_status_t structure

Frees the given snd_timer_status_t structure using the standard free C library function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- status

		- pointer to the snd_timer_status_t structure to free

.. index:: pair: function; snd_timer_status_copy
.. _doxid-group___timer_1gac14cf4718333897ecb2b823b738aaff4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_timer_status_copy(
		:ref:`snd_timer_status_t<doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>`* dst,
		const :ref:`snd_timer_status_t<doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>`* src
	)

copy one snd_timer_status_t structure to another



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dst

		- destination snd_timer_status_t structure

	*
		- src

		- source snd_timer_status_t structure

.. index:: pair: function; snd_timer_status_get_timestamp
.. _doxid-group___timer_1ga0c303da4c37285d423f428710409ee08:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`snd_htimestamp_t<doxid-group___global_1ga3a3f5b65c40f498cdbc26944bd9855cf>`
	snd_timer_status_get_timestamp(:ref:`snd_timer_status_t<doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>`* status)

get timestamp



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- status

		- pointer to :ref:`snd_timer_status_t <doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>` structure



.. rubric:: Returns:

timestamp

.. index:: pair: function; snd_timer_status_get_resolution
.. _doxid-group___timer_1gaaab668cc548b6c4a24236504d63da0a0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	long
	snd_timer_status_get_resolution(:ref:`snd_timer_status_t<doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>`* status)

get resolution in us



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- status

		- pointer to :ref:`snd_timer_status_t <doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>` structure



.. rubric:: Returns:

resolution

.. index:: pair: function; snd_timer_status_get_lost
.. _doxid-group___timer_1gaa7ad78e8af9855e71d4951147869693b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	long
	snd_timer_status_get_lost(:ref:`snd_timer_status_t<doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>`* status)

get master tick lost count



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- status

		- pointer to :ref:`snd_timer_status_t <doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>` structure



.. rubric:: Returns:

master tick lost count

.. index:: pair: function; snd_timer_status_get_overrun
.. _doxid-group___timer_1gaf3a83c122c2e19059297599d3486c04d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	long
	snd_timer_status_get_overrun(:ref:`snd_timer_status_t<doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>`* status)

get overrun count



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- status

		- pointer to :ref:`snd_timer_status_t <doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>` structure



.. rubric:: Returns:

overrun count

.. index:: pair: function; snd_timer_status_get_queue
.. _doxid-group___timer_1ga6edb10e32b6b485ecccef73d862ca648:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	long
	snd_timer_status_get_queue(:ref:`snd_timer_status_t<doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>`* status)

get count of used queue elements



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- status

		- pointer to :ref:`snd_timer_status_t <doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>` structure



.. rubric:: Returns:

count of used queue elements

.. index:: pair: function; snd_timer_info_get_ticks
.. _doxid-group___timer_1gad0cf85bf970338f0924e0f642057c9a6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	long
	snd_timer_info_get_ticks(:ref:`snd_timer_info_t<doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>`* info)

(DEPRECATED) get maximum timer ticks



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- pointer to :ref:`snd_timer_info_t <doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>` structure



.. rubric:: Returns:

maximum timer ticks

Macros
------

.. index:: pair: define; SND_TIMER_DLSYM_VERSION
.. _doxid-group___timer_1gae123de10661be511c00d2d7b6a428745:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_TIMER_DLSYM_VERSION

dlsym version for interface entry callback

.. index:: pair: define; SND_TIMER_GLOBAL_HPET
.. _doxid-group___timer_1ga15f5febc65924c9d3b12c7440c13bdd3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_TIMER_GLOBAL_HPET

global timer - HPET

.. index:: pair: define; SND_TIMER_GLOBAL_HRTIMER
.. _doxid-group___timer_1gacf694819483359539a0017b09e9de9ab:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_TIMER_GLOBAL_HRTIMER

global timer - HRTIMER

.. index:: pair: define; SND_TIMER_GLOBAL_RTC
.. _doxid-group___timer_1ga77ddf4d042846b39fc4ed4966e04bee2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_TIMER_GLOBAL_RTC

global timer - RTC

.. index:: pair: define; SND_TIMER_GLOBAL_SYSTEM
.. _doxid-group___timer_1ga1cda350fb4de9a2f7a137c5649e3793c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_TIMER_GLOBAL_SYSTEM

global timer - system

.. index:: pair: define; SND_TIMER_OPEN_NONBLOCK
.. _doxid-group___timer_1gac2c50bf6045560bc13aab81f25b2b740:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_TIMER_OPEN_NONBLOCK

timer open mode flag - non-blocking behaviour

.. index:: pair: define; SND_TIMER_OPEN_TREAD
.. _doxid-group___timer_1ga8d8b1f21a9c9db84a6ffc02e8f2c745b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_TIMER_OPEN_TREAD

use timestamps and event notification - enhanced read

.. index:: pair: define; SND_TIMER_QUERY_DLSYM_VERSION
.. _doxid-group___timer_1ga7439ac1cc9e0958a21f313ca848af77c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SND_TIMER_QUERY_DLSYM_VERSION

dlsym version for interface entry callback

.. index:: pair: define; snd_timer_ginfo_alloca
.. _doxid-group___timer_1ga2b8086e599bd8d1bec750df97f572fcf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define snd_timer_ginfo_alloca(ptr)

allocate :ref:`snd_timer_ginfo_t <doxid-group___timer_1ga794ba3ef840cdb926d415ebb75d2c968>` container on stack

.. index:: pair: define; snd_timer_id_alloca
.. _doxid-group___timer_1gaef1895685cb2f65d1a40cc46fa5a7eb2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define snd_timer_id_alloca(ptr)

allocate :ref:`snd_timer_id_t <doxid-group___timer_1ga87c7e9656e171a76dada7e7e2da37136>` container on stack

.. index:: pair: define; snd_timer_info_alloca
.. _doxid-group___timer_1gafad2100b7f0478b8c3c59f0f4aced23e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define snd_timer_info_alloca(ptr)

allocate :ref:`snd_timer_info_t <doxid-group___timer_1ga8d2a9e26d1f38ce65160d3cd71a2bce3>` container on stack

.. index:: pair: define; snd_timer_params_alloca
.. _doxid-group___timer_1ga2e76b7b6f7fe340b4a06935f080fbbbd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define snd_timer_params_alloca(ptr)

allocate :ref:`snd_timer_params_t <doxid-group___timer_1ga3450759fce8e0863ebce3221e82bafca>` container on stack

.. index:: pair: define; snd_timer_status_alloca
.. _doxid-group___timer_1ga6597b8f73b30a3f2bf2aa9f3590b92f2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define snd_timer_status_alloca(ptr)

allocate :ref:`snd_timer_status_t <doxid-group___timer_1ga6fe20f2c0d1535e3a200944b1244f855>` container on stack

