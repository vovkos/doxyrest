.. index:: pair: group; Device hotplug event notification
.. _doxid-group__libusb__hotplug:

Device hotplug event notification
=================================

.. toctree::
	:hidden:

	enum_libusb_hotplug_event.rst
	enum_libusb_hotplug_flag.rst

Overview
~~~~~~~~

This page details how to use the libusb hotplug interface, where available. :ref:`More...<details-group__libusb__hotplug>`


.. ref-code-block:: c
	:class: doxyrest-overview-code-block

	
	// typedefs

	typedef int :ref:`libusb_hotplug_callback_handle<doxid-group__libusb__hotplug_1ga4868157346bbf2c70b6af0cb0a6c0094>`;

	typedef int (*:ref:`libusb_hotplug_callback_fn<doxid-group__libusb__hotplug_1ga3d45c3fdf4d2e47a007fe2d9463b3f7f>`)(
		libusb_context *ctx,
		libusb_device *device,
		libusb_hotplug_event event,
		void *user_data
		);

	// enums

	enum :ref:`libusb_hotplug_event<doxid-group__libusb__hotplug_1ga556d598ca379618a41bbec3597f55dcf>`;
	enum :ref:`libusb_hotplug_flag<doxid-group__libusb__hotplug_1ga95ce2ec85dec177854c423cea2853c52>`;

	// global functions

	int
	:ref:`libusb_hotplug_register_callback<doxid-group__libusb__hotplug_1ga00e0c69ddf1fb1b6774dc918192e8dc7>`(
		:ref:`libusb_context<doxid-group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833>`* ctx,
		:ref:`libusb_hotplug_event<doxid-group__libusb__hotplug_1ga556d598ca379618a41bbec3597f55dcf>` events,
		:ref:`libusb_hotplug_flag<doxid-group__libusb__hotplug_1ga95ce2ec85dec177854c423cea2853c52>` flags,
		int vendor_id,
		int product_id,
		int dev_class,
		:ref:`libusb_hotplug_callback_fn<doxid-group__libusb__hotplug_1ga3d45c3fdf4d2e47a007fe2d9463b3f7f>` cb_fn,
		void* user_data,
		:ref:`libusb_hotplug_callback_handle<doxid-group__libusb__hotplug_1ga4868157346bbf2c70b6af0cb0a6c0094>`* callback_handle
	);

	void
	:ref:`libusb_hotplug_deregister_callback<doxid-group__libusb__hotplug_1ga8110f57eab2064375934f1449b2602bc>`(
		:ref:`libusb_context<doxid-group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833>`* ctx,
		:ref:`libusb_hotplug_callback_handle<doxid-group__libusb__hotplug_1ga4868157346bbf2c70b6af0cb0a6c0094>` callback_handle
	);

	// macros

	#define :ref:`LIBUSB_HOTPLUG_MATCH_ANY<doxid-group__libusb__hotplug_1ga6d4f5e524a3b7ab4a25b751073335d4c>`

.. _details-group__libusb__hotplug:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This page details how to use the libusb hotplug interface, where available.

Be mindful that not all platforms currently implement hotplug notification and that you should first call on :ref:`libusb_has_capability() <doxid-group__libusb__misc_1ga9b8e324d28c624cd0b8e7ba21607b8db>` with parameter :ref:`LIBUSB_CAP_HAS_HOTPLUG <doxid-group__libusb__misc_1ggaab1b3fa0728c06fafbee897795889bd5a8b1bbccc648a6677cb9030a6ba827438>` to confirm that hotplug support is available.

Typedefs
--------

.. index:: pair: typedef; libusb_hotplug_callback_handle
.. _doxid-group__libusb__hotplug_1ga4868157346bbf2c70b6af0cb0a6c0094:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	typedef int libusb_hotplug_callback_handle

Callback handle.

Callbacks handles are generated by :ref:`libusb_hotplug_register_callback() <doxid-group__libusb__hotplug_1ga00e0c69ddf1fb1b6774dc918192e8dc7>` and can be used to deregister callbacks. Callback handles are unique per libusb_context and it is safe to call :ref:`libusb_hotplug_deregister_callback() <doxid-group__libusb__hotplug_1ga8110f57eab2064375934f1449b2602bc>` on an already deregisted callback.

Since version 1.0.16, :ref:`LIBUSB_API_VERSION <doxid-group__libusb__misc_1gaabe4bc36a83358685d36a6c853cbb4de>`>= 0x01000102

For more information, see :ref:`Device hotplug event notification <doxid-libusb_hotplug>`.

.. index:: pair: typedef; libusb_hotplug_callback_fn
.. _doxid-group__libusb__hotplug_1ga3d45c3fdf4d2e47a007fe2d9463b3f7f:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	typedef int (*libusb_hotplug_callback_fn)(
		libusb_context *ctx,
		libusb_device *device,
		libusb_hotplug_event event,
		void *user_data
		)

Hotplug callback function type.

When requesting hotplug event notifications, you pass a pointer to a callback function of this type.

This callback may be called by an internal event thread and as such it is recommended the callback do minimal processing before returning.

libusb will call this function later, when a matching event had happened on a matching device. See :ref:`Device hotplug event notification <doxid-libusb_hotplug>` for more information.

It is safe to call either :ref:`libusb_hotplug_register_callback() <doxid-group__libusb__hotplug_1ga00e0c69ddf1fb1b6774dc918192e8dc7>` or :ref:`libusb_hotplug_deregister_callback() <doxid-group__libusb__hotplug_1ga8110f57eab2064375934f1449b2602bc>` from within a callback function.

Since version 1.0.16, :ref:`LIBUSB_API_VERSION <doxid-group__libusb__misc_1gaabe4bc36a83358685d36a6c853cbb4de>`>= 0x01000102



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctx

		- context of this notification

	*
		- device

		- libusb_device this event occurred on

	*
		- event

		- event that occurred

	*
		- user_data

		- user data provided when this callback was registered



.. rubric:: Returns:

bool whether this callback is finished processing events. returning 1 will cause this callback to be deregistered

Global Functions
----------------

.. index:: pair: function; libusb_hotplug_register_callback
.. _doxid-group__libusb__hotplug_1ga00e0c69ddf1fb1b6774dc918192e8dc7:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	int
	libusb_hotplug_register_callback(
		:ref:`libusb_context<doxid-group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833>`* ctx,
		:ref:`libusb_hotplug_event<doxid-group__libusb__hotplug_1ga556d598ca379618a41bbec3597f55dcf>` events,
		:ref:`libusb_hotplug_flag<doxid-group__libusb__hotplug_1ga95ce2ec85dec177854c423cea2853c52>` flags,
		int vendor_id,
		int product_id,
		int dev_class,
		:ref:`libusb_hotplug_callback_fn<doxid-group__libusb__hotplug_1ga3d45c3fdf4d2e47a007fe2d9463b3f7f>` cb_fn,
		void* user_data,
		:ref:`libusb_hotplug_callback_handle<doxid-group__libusb__hotplug_1ga4868157346bbf2c70b6af0cb0a6c0094>`* callback_handle
	)

Register a hotplug callback function.

Register a callback with the libusb_context. The callback will fire when a matching event occurs on a matching device. The callback is armed until either it is deregistered with :ref:`libusb_hotplug_deregister_callback() <doxid-group__libusb__hotplug_1ga8110f57eab2064375934f1449b2602bc>` or the supplied callback returns 1 to indicate it is finished processing events.

If the :ref:`LIBUSB_HOTPLUG_ENUMERATE <doxid-group__libusb__hotplug_1gga95ce2ec85dec177854c423cea2853c52a01a1c0c9f4e6852cb6df713f2e8a7f6b>` is passed the callback will be called with a :ref:`LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED <doxid-group__libusb__hotplug_1gga556d598ca379618a41bbec3597f55dcfac012270cba6e08dafe7e3bec204dffd6>` for all devices already plugged into the machine. Note that libusb modifies its internal device list from a separate thread, while calling hotplug callbacks from :ref:`libusb_handle_events() <doxid-group__libusb__poll_1ga4989086e3f0327f3886a4c474ec7c327>`, so it is possible for a device to already be present on, or removed from, its internal device list, while the hotplug callbacks still need to be dispatched. This means that when using :ref:`LIBUSB_HOTPLUG_ENUMERATE <doxid-group__libusb__hotplug_1gga95ce2ec85dec177854c423cea2853c52a01a1c0c9f4e6852cb6df713f2e8a7f6b>`, your callback may be called twice for the arrival of the same device, once from :ref:`libusb_hotplug_register_callback() <doxid-group__libusb__hotplug_1ga00e0c69ddf1fb1b6774dc918192e8dc7>` and once from :ref:`libusb_handle_events() <doxid-group__libusb__poll_1ga4989086e3f0327f3886a4c474ec7c327>`; and/or your callback may be called for the removal of a device for which an arrived call was never made.

Since version 1.0.16, :ref:`LIBUSB_API_VERSION <doxid-group__libusb__misc_1gaabe4bc36a83358685d36a6c853cbb4de>`>= 0x01000102



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctx

		- context to register this callback with

	*
		- events

		- bitwise or of events that will trigger this callback. See :ref:`libusb_hotplug_event <doxid-group__libusb__hotplug_1ga556d598ca379618a41bbec3597f55dcf>`

	*
		- flags

		- hotplug callback flags. See :ref:`libusb_hotplug_flag <doxid-group__libusb__hotplug_1ga95ce2ec85dec177854c423cea2853c52>`

	*
		- vendor_id

		- the vendor id to match or :ref:`LIBUSB_HOTPLUG_MATCH_ANY <doxid-group__libusb__hotplug_1ga6d4f5e524a3b7ab4a25b751073335d4c>`

	*
		- product_id

		- the product id to match or :ref:`LIBUSB_HOTPLUG_MATCH_ANY <doxid-group__libusb__hotplug_1ga6d4f5e524a3b7ab4a25b751073335d4c>`

	*
		- dev_class

		- the device class to match or :ref:`LIBUSB_HOTPLUG_MATCH_ANY <doxid-group__libusb__hotplug_1ga6d4f5e524a3b7ab4a25b751073335d4c>`

	*
		- cb_fn

		- the function to be invoked on a matching event/device

	*
		- user_data

		- user data to pass to the callback function

	*
		- callback_handle

		- pointer to store the handle of the allocated callback (can be NULL)



.. rubric:: Returns:

LIBUSB_SUCCESS on success LIBUSB_ERROR code on failure

.. index:: pair: function; libusb_hotplug_deregister_callback
.. _doxid-group__libusb__hotplug_1ga8110f57eab2064375934f1449b2602bc:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	void
	libusb_hotplug_deregister_callback(
		:ref:`libusb_context<doxid-group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833>`* ctx,
		:ref:`libusb_hotplug_callback_handle<doxid-group__libusb__hotplug_1ga4868157346bbf2c70b6af0cb0a6c0094>` callback_handle
	)

Deregisters a hotplug callback.

Deregister a callback from a libusb_context. This function is safe to call from within a hotplug callback.

Since version 1.0.16, :ref:`LIBUSB_API_VERSION <doxid-group__libusb__misc_1gaabe4bc36a83358685d36a6c853cbb4de>`>= 0x01000102



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctx

		- context this callback is registered with

	*
		- callback_handle

		- the handle of the callback to deregister

Macros
------

.. index:: pair: define; LIBUSB_HOTPLUG_MATCH_ANY
.. _doxid-group__libusb__hotplug_1ga6d4f5e524a3b7ab4a25b751073335d4c:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	#define LIBUSB_HOTPLUG_MATCH_ANY

Wildcard matching for hotplug events.

