.. index:: pair: group; Random Functions
.. _doxid-group__apr__random:

Random Functions
================

.. toctree::
	:hidden:

	struct_apr_crypto_hash_t.rst

Overview
~~~~~~~~




.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// typedefs

	typedef struct :ref:`apr_crypto_hash_t<doxid-structapr__crypto__hash__t>` :target:`apr_crypto_hash_t<doxid-group__apr__random_1ga30fbaf80424a9f1a0e9cc51072f65127>`;
	typedef void :target:`apr_crypto_hash_init_t<doxid-group__apr__random_1gad2775bc1cdb376d9dec0e97283b4bdd9>`(apr_crypto_hash_t *hash);

	typedef void :target:`apr_crypto_hash_add_t<doxid-group__apr__random_1ga2f8a4fb18078a76357327ea55936c1ea>`(
		apr_crypto_hash_t *hash,
		const void *data,
		apr_size_t bytes
		);

	typedef void :target:`apr_crypto_hash_finish_t<doxid-group__apr__random_1gab70ea9133870efdb5532d20d4bcf7442>`(
		apr_crypto_hash_t *hash,
		unsigned char *result
		);

	typedef struct :ref:`apr_random_t<doxid-group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96>` :ref:`apr_random_t<doxid-group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96>`;

	// structs

	struct :ref:`apr_crypto_hash_t<doxid-structapr__crypto__hash__t>`;

	// global functions

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_generate_random_bytes<doxid-group__apr__random_1ga564e4c380e820a9b0d9e877d4852a65e>`(
		unsigned char* buf,
		apr_size_t length
	);

	:ref:`apr_crypto_hash_t<doxid-structapr__crypto__hash__t>`*
	:ref:`apr_crypto_sha256_new<doxid-group__apr__random_1gae992c6f642e9661d2417cd8f2df8d345>`(:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p);

	void
	:ref:`apr_random_init<doxid-group__apr__random_1ga0184a90774212132f883c463811aacdc>`(
		:ref:`apr_random_t<doxid-group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96>`* g,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		:ref:`apr_crypto_hash_t<doxid-structapr__crypto__hash__t>`* pool_hash,
		:ref:`apr_crypto_hash_t<doxid-structapr__crypto__hash__t>`* key_hash,
		:ref:`apr_crypto_hash_t<doxid-structapr__crypto__hash__t>`* prng_hash
	);

	:ref:`apr_random_t<doxid-group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96>`*
	:ref:`apr_random_standard_new<doxid-group__apr__random_1ga7a73c9bcf026b63847aeae483c53191f>`(:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p);

	void
	:ref:`apr_random_add_entropy<doxid-group__apr__random_1ga8cf2875644c1dffc0c336289bd370efb>`(
		:ref:`apr_random_t<doxid-group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96>`* g,
		const void* entropy_,
		apr_size_t bytes
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_random_insecure_bytes<doxid-group__apr__random_1gab9a63359bb9543d746e6fd46933b7256>`(
		:ref:`apr_random_t<doxid-group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96>`* g,
		void* random,
		apr_size_t bytes
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_random_secure_bytes<doxid-group__apr__random_1ga9f0607e06656a1c76cc5ee878fd94f09>`(
		:ref:`apr_random_t<doxid-group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96>`* g,
		void* random,
		apr_size_t bytes
	);

	void
	:ref:`apr_random_barrier<doxid-group__apr__random_1ga37d8d7529cf972c605ebce97c57f8825>`(:ref:`apr_random_t<doxid-group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96>`* g);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_random_secure_ready<doxid-group__apr__random_1ga99d0c0722eeef2951e8ccede2e1451fa>`(:ref:`apr_random_t<doxid-group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96>`* r);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_random_insecure_ready<doxid-group__apr__random_1ga6465698bdc752d07abc8c515aac6e2c0>`(:ref:`apr_random_t<doxid-group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96>`* r);

	void
	:ref:`apr_random_after_fork<doxid-group__apr__random_1gaa1ab9b8adeeb6e37bb29def249ff9e6a>`(:ref:`apr_proc_t<doxid-structapr__proc__t>`* proc);

.. _details-group__apr__random:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~



Typedefs
--------

.. index:: pair: typedef; apr_random_t
.. _doxid-group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct :ref:`apr_random_t<doxid-group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96>` apr_random_t

Opaque PRNG structure.

Global Functions
----------------

.. index:: pair: function; apr_generate_random_bytes
.. _doxid-group__apr__random_1ga564e4c380e820a9b0d9e877d4852a65e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_generate_random_bytes(
		unsigned char* buf,
		apr_size_t length
	)

Generate random bytes.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- buf

		- Buffer to fill with random bytes

	*
		- length

		- Length of buffer in bytes

.. index:: pair: function; apr_crypto_sha256_new
.. _doxid-group__apr__random_1gae992c6f642e9661d2417cd8f2df8d345:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_crypto_hash_t<doxid-structapr__crypto__hash__t>`*
	apr_crypto_sha256_new(:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p)

Allocate and initialize the SHA-256 context



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- The pool to allocate from

.. index:: pair: function; apr_random_init
.. _doxid-group__apr__random_1ga0184a90774212132f883c463811aacdc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	apr_random_init(
		:ref:`apr_random_t<doxid-group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96>`* g,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		:ref:`apr_crypto_hash_t<doxid-structapr__crypto__hash__t>`* pool_hash,
		:ref:`apr_crypto_hash_t<doxid-structapr__crypto__hash__t>`* key_hash,
		:ref:`apr_crypto_hash_t<doxid-structapr__crypto__hash__t>`* prng_hash
	)

Initialize a PRNG state



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- g

		- The PRNG state

	*
		- p

		- The pool to allocate from

	*
		- pool_hash

		- Pool hash functions

	*
		- key_hash

		- Key hash functions

	*
		- prng_hash

		- PRNG hash functions

.. index:: pair: function; apr_random_standard_new
.. _doxid-group__apr__random_1ga7a73c9bcf026b63847aeae483c53191f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_random_t<doxid-group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96>`*
	apr_random_standard_new(:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p)

Allocate and initialize (apr_crypto_sha256_new) a new PRNG state.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- The pool to allocate from

.. index:: pair: function; apr_random_add_entropy
.. _doxid-group__apr__random_1ga8cf2875644c1dffc0c336289bd370efb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	apr_random_add_entropy(
		:ref:`apr_random_t<doxid-group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96>`* g,
		const void* entropy_,
		apr_size_t bytes
	)

Mix the randomness pools.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- g

		- The PRNG state

	*
		- entropy\_

		- Entropy buffer

	*
		- bytes

		- Length of entropy\_ in bytes

.. index:: pair: function; apr_random_insecure_bytes
.. _doxid-group__apr__random_1gab9a63359bb9543d746e6fd46933b7256:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_random_insecure_bytes(
		:ref:`apr_random_t<doxid-group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96>`* g,
		void* random,
		apr_size_t bytes
	)

Generate cryptographically insecure random bytes.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- g

		- The RNG state

	*
		- random

		- Buffer to fill with random bytes

	*
		- bytes

		- Length of buffer in bytes

.. index:: pair: function; apr_random_secure_bytes
.. _doxid-group__apr__random_1ga9f0607e06656a1c76cc5ee878fd94f09:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_random_secure_bytes(
		:ref:`apr_random_t<doxid-group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96>`* g,
		void* random,
		apr_size_t bytes
	)

Generate cryptographically secure random bytes.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- g

		- The RNG state

	*
		- random

		- Buffer to fill with random bytes

	*
		- bytes

		- Length of buffer in bytes

.. index:: pair: function; apr_random_barrier
.. _doxid-group__apr__random_1ga37d8d7529cf972c605ebce97c57f8825:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	apr_random_barrier(:ref:`apr_random_t<doxid-group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96>`* g)

Ensures that E bits of conditional entropy are mixed into the PRNG before any further randomness is extracted.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- g

		- The RNG state

.. index:: pair: function; apr_random_secure_ready
.. _doxid-group__apr__random_1ga99d0c0722eeef2951e8ccede2e1451fa:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_random_secure_ready(:ref:`apr_random_t<doxid-group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96>`* r)

Return APR_SUCCESS if the cryptographic PRNG has been seeded with enough data, APR_ENOTENOUGHENTROPY otherwise.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- r

		- The RNG state

.. index:: pair: function; apr_random_insecure_ready
.. _doxid-group__apr__random_1ga6465698bdc752d07abc8c515aac6e2c0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_random_insecure_ready(:ref:`apr_random_t<doxid-group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96>`* r)

Return APR_SUCCESS if the PRNG has been seeded with enough data, APR_ENOTENOUGHENTROPY otherwise.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- r

		- The PRNG state

.. index:: pair: function; apr_random_after_fork
.. _doxid-group__apr__random_1gaa1ab9b8adeeb6e37bb29def249ff9e6a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	apr_random_after_fork(:ref:`apr_proc_t<doxid-structapr__proc__t>`* proc)

Mix the randomness pools after forking. Call this in the child after forking to mix the randomness pools. Note that its generally a bad idea to fork a process with a real PRNG in it - better to have the PRNG externally and get the randomness from there. However, if you really must do it, then you should supply all your entropy to all the PRNGs - don't worry, they won't produce the same output.

Note that :ref:`apr_proc_fork() <doxid-group__apr__thread__proc_1ga3d0415bf69b0a629a929833e82758b85>` calls this for you, so only weird applications need ever call it themselves.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- proc

		- The resulting process handle from :ref:`apr_proc_fork() <doxid-group__apr__thread__proc_1ga3d0415bf69b0a629a929833e82758b85>`

