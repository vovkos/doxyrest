.. index:: pair: group; The libssh C++ wrapper
.. _doxid-group__ssh__cpp:

The libssh C++ wrapper
======================

.. toctree::
	:hidden:

	namespace_ssh.rst

Overview
~~~~~~~~

The C++ bindings for libssh are completely embedded in a single .hpp file, and this for two reasons: :ref:`More...<details-group__ssh__cpp>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// namespaces

	namespace :ref:`ssh<doxid-namespacessh>`;

	// macros

	#define :target:`LIBSSH_LEGACY_0_4<doxid-group__ssh__cpp_1gaac932f504b4caca5f0da77f9e474e147>`

.. _details-group__ssh__cpp:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

The C++ bindings for libssh are completely embedded in a single .hpp file, and this for two reasons:

* C++ is hard to keep binary compatible, C is easy. We try to keep libssh C version as much as possible binary compatible between releases, while this would be hard for C++. If you compile your program with these headers, you will only link to the C version of libssh which will be kept ABI compatible. No need to recompile your C++ program each time a new binary-compatible version of libssh is out

* Most of the functions in this file are really short and are probably worth the "inline" linking mode, which the compiler can decide to do in some case. There would be nearly no performance penalty of using the wrapper rather than native calls.

Please visit the documentation of :ref:`ssh::Session <doxid-classssh_1_1_session>` and :ref:`ssh::Channel <doxid-classssh_1_1_channel>` If you wish not to use C++ exceptions, please define SSH_NO_CPP_EXCEPTIONS:

.. ref-code-block:: cpp

	#define SSH_NO_CPP_EXCEPTIONS
	#include <libssh/libsshpp.hpp>

All functions will then return SSH_ERROR in case of error.



.. rubric:: See also:

:ref:`ssh::Session <doxid-classssh_1_1_session>`

:ref:`ssh::Channel <doxid-classssh_1_1_channel>`

