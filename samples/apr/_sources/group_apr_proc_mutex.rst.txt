.. index:: pair: group; Process Locking Routines
.. _doxid-group__apr__proc__mutex:

Process Locking Routines
========================

.. toctree::
	:hidden:

	enum_apr_lockmech_e.rst

Overview
~~~~~~~~




.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// typedefs

	typedef struct :ref:`apr_proc_mutex_t<doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2>` :ref:`apr_proc_mutex_t<doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2>`;

	// enums

	enum :ref:`apr_lockmech_e<doxid-group__apr__proc__mutex_1ga75dd95a48a1e855a87b509b522746ed4>`;

	// global functions

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_proc_mutex_create<doxid-group__apr__proc__mutex_1ga57a0ad8cc6209dcbc8cf7c4bdf4a2c22>`(
		:ref:`apr_proc_mutex_t<doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2>`** mutex,
		const char* fname,
		:ref:`apr_lockmech_e<doxid-group__apr__proc__mutex_1ga75dd95a48a1e855a87b509b522746ed4>` mech,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* pool
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_proc_mutex_child_init<doxid-group__apr__proc__mutex_1ga52c440b92eda07dc9c851a4e98f2ac83>`(
		:ref:`apr_proc_mutex_t<doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2>`** mutex,
		const char* fname,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* pool
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_proc_mutex_lock<doxid-group__apr__proc__mutex_1ga9af7c9eabf4f99a5a33b41dc322af06f>`(:ref:`apr_proc_mutex_t<doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2>`* mutex);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_proc_mutex_trylock<doxid-group__apr__proc__mutex_1ga7c41927ce5014374eb4fc66d410f9513>`(:ref:`apr_proc_mutex_t<doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2>`* mutex);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_proc_mutex_unlock<doxid-group__apr__proc__mutex_1ga4ecd9a73fbb0e6e6853e5d0769bbb183>`(:ref:`apr_proc_mutex_t<doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2>`* mutex);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_proc_mutex_destroy<doxid-group__apr__proc__mutex_1gaa692ccd799305e0166fb81f258870830>`(:ref:`apr_proc_mutex_t<doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2>`* mutex);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_proc_mutex_cleanup<doxid-group__apr__proc__mutex_1ga71ec4d283f58e893322f44116e6f8ea2>`(void* mutex);

	const char*
	:ref:`apr_proc_mutex_lockfile<doxid-group__apr__proc__mutex_1gad4dcc5ec2a5a6ede7be178e13f56377a>`(:ref:`apr_proc_mutex_t<doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2>`* mutex);

	const char*
	:ref:`apr_proc_mutex_name<doxid-group__apr__proc__mutex_1ga3e5cf6b6fd0736502efd91312d50881c>`(:ref:`apr_proc_mutex_t<doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2>`* mutex);

	const char*
	:ref:`apr_proc_mutex_defname<doxid-group__apr__proc__mutex_1gaf4425adc130f83784c552b6bc1563036>`(void);

	:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`*
	:ref:`apr_proc_mutex_pool_get<doxid-group__apr__proc__mutex_1ga9d7eda31ec4ad2183ddfcbff2f07daf9>`(const :ref:`apr_proc_mutex_t<doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2>`* theproc_mutex);

.. _details-group__apr__proc__mutex:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~



Typedefs
--------

.. index:: pair: typedef; apr_proc_mutex_t
.. _doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct :ref:`apr_proc_mutex_t<doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2>` apr_proc_mutex_t

Opaque structure representing a process mutex.

Global Functions
----------------

.. index:: pair: function; apr_proc_mutex_create
.. _doxid-group__apr__proc__mutex_1ga57a0ad8cc6209dcbc8cf7c4bdf4a2c22:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_proc_mutex_create(
		:ref:`apr_proc_mutex_t<doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2>`** mutex,
		const char* fname,
		:ref:`apr_lockmech_e<doxid-group__apr__proc__mutex_1ga75dd95a48a1e855a87b509b522746ed4>` mech,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* pool
	)

Create and initialize a mutex that can be used to synchronize processes.

.. warning::

	Check APR_HAS_foo_SERIALIZE defines to see if the platform supports APR_LOCK_foo. Only APR_LOCK_DEFAULT is portable.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mutex

		- the memory address where the newly created mutex will be stored.

	*
		- fname

		- A file name to use if the lock mechanism requires one. This argument should always be provided. The lock code itself will determine if it should be used.

	*
		- mech

		- 
		  The mechanism to use for the interprocess lock, if any; one of
		  
		  .. code-block:: none
		  
		  
		  	APR_LOCK_FCNTL
		  	APR_LOCK_FLOCK
		  	APR_LOCK_SYSVSEM
		  	APR_LOCK_POSIXSEM
		  	APR_LOCK_PROC_PTHREAD
		  	APR_LOCK_DEFAULT     pick the default mechanism for the platform

	*
		- pool

		- the pool from which to allocate the mutex.



.. rubric:: See also:

:ref:`apr_lockmech_e <doxid-group__apr__proc__mutex_1ga75dd95a48a1e855a87b509b522746ed4>`

.. index:: pair: function; apr_proc_mutex_child_init
.. _doxid-group__apr__proc__mutex_1ga52c440b92eda07dc9c851a4e98f2ac83:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_proc_mutex_child_init(
		:ref:`apr_proc_mutex_t<doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2>`** mutex,
		const char* fname,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* pool
	)

Re-open a mutex in a child process. This function must be called to maintain portability, even if the underlying lock mechanism does not require it.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mutex

		- The newly re-opened mutex structure.

	*
		- fname

		- A file name to use if the mutex mechanism requires one. This argument should always be provided. The mutex code itself will determine if it should be used. This filename should be the same one that was passed to :ref:`apr_proc_mutex_create() <doxid-group__apr__proc__mutex_1ga57a0ad8cc6209dcbc8cf7c4bdf4a2c22>`.

	*
		- pool

		- The pool to operate on.

.. index:: pair: function; apr_proc_mutex_lock
.. _doxid-group__apr__proc__mutex_1ga9af7c9eabf4f99a5a33b41dc322af06f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_proc_mutex_lock(:ref:`apr_proc_mutex_t<doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2>`* mutex)

Acquire the lock for the given mutex. If the mutex is already locked, the current thread will be put to sleep until the lock becomes available.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mutex

		- the mutex on which to acquire the lock.

.. index:: pair: function; apr_proc_mutex_trylock
.. _doxid-group__apr__proc__mutex_1ga7c41927ce5014374eb4fc66d410f9513:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_proc_mutex_trylock(:ref:`apr_proc_mutex_t<doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2>`* mutex)

Attempt to acquire the lock for the given mutex. If the mutex has already been acquired, the call returns immediately with APR_EBUSY. Note: it is important that the :ref:`APR_STATUS_IS_EBUSY(s) <doxid-group___a_p_r___s_t_a_t_u_s___i_s_1gabb92ad7b6ef304132de70e9e5cbaa896>` macro be used to determine if the return value was APR_EBUSY, for portability reasons.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mutex

		- the mutex on which to attempt the lock acquiring.

.. index:: pair: function; apr_proc_mutex_unlock
.. _doxid-group__apr__proc__mutex_1ga4ecd9a73fbb0e6e6853e5d0769bbb183:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_proc_mutex_unlock(:ref:`apr_proc_mutex_t<doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2>`* mutex)

Release the lock for the given mutex.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mutex

		- the mutex from which to release the lock.

.. index:: pair: function; apr_proc_mutex_destroy
.. _doxid-group__apr__proc__mutex_1gaa692ccd799305e0166fb81f258870830:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_proc_mutex_destroy(:ref:`apr_proc_mutex_t<doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2>`* mutex)

Destroy the mutex and free the memory associated with the lock.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mutex

		- the mutex to destroy.

.. index:: pair: function; apr_proc_mutex_cleanup
.. _doxid-group__apr__proc__mutex_1ga71ec4d283f58e893322f44116e6f8ea2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_proc_mutex_cleanup(void* mutex)

Destroy the mutex and free the memory associated with the lock.

.. note::

	This function is generally used to kill a cleanup on an already created mutex



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mutex

		- the mutex to destroy.

.. index:: pair: function; apr_proc_mutex_lockfile
.. _doxid-group__apr__proc__mutex_1gad4dcc5ec2a5a6ede7be178e13f56377a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	apr_proc_mutex_lockfile(:ref:`apr_proc_mutex_t<doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2>`* mutex)

Return the name of the lockfile for the mutex, or NULL if the mutex doesn't use a lock file

.. index:: pair: function; apr_proc_mutex_name
.. _doxid-group__apr__proc__mutex_1ga3e5cf6b6fd0736502efd91312d50881c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	apr_proc_mutex_name(:ref:`apr_proc_mutex_t<doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2>`* mutex)

Display the name of the mutex, as it relates to the actual method used. This matches the valid options for Apache's AcceptMutex directive



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mutex

		- the name of the mutex

.. index:: pair: function; apr_proc_mutex_defname
.. _doxid-group__apr__proc__mutex_1gaf4425adc130f83784c552b6bc1563036:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	apr_proc_mutex_defname(void)

Display the name of the default mutex: APR_LOCK_DEFAULT

.. index:: pair: function; apr_proc_mutex_pool_get
.. _doxid-group__apr__proc__mutex_1ga9d7eda31ec4ad2183ddfcbff2f07daf9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`*
	apr_proc_mutex_pool_get(const :ref:`apr_proc_mutex_t<doxid-group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2>`* theproc_mutex)

Get the pool used by this proc_mutex.



.. rubric:: Returns:

apr_pool_t the pool

