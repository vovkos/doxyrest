.. index:: pair: group; snprintf implementations
.. _doxid-group___a_p_r___strings___snprintf:

snprintf implementations
========================

.. toctree::
	:hidden:

Overview
~~~~~~~~

.. :ref:`More...<details-group___a_p_r___strings___snprintf>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// global functions

	int
	:ref:`apr_snprintf<doxid-group___a_p_r___strings___snprintf_1gaf0d0becc04278df5172f0ce5905f8ff9>`(
		char* buf,
		apr_size_t len,
		const char* format,
		...
	);

	int
	:ref:`apr_vsnprintf<doxid-group___a_p_r___strings___snprintf_1gaf6bf63e240e48b517644ff3e99e49c26>`(
		char* buf,
		apr_size_t len,
		const char* format,
		va_list ap
	);

.. _details-group___a_p_r___strings___snprintf:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

.. warning::

	These are snprintf implementations based on :ref:`apr_vformatter() <doxid-group__apr__lib_1gad2cd3594aeaafd45931d1034965f48c1>`.

Note that various standards and implementations disagree on the return value of snprintf, and side-effects due to n in the formatting string. apr_snprintf (and apr_vsnprintf) behaves as follows:

Process the format string until the entire string is exhausted, or the buffer fills. If the buffer fills then stop processing immediately (so no further n arguments are processed), and return the buffer length. In all cases the buffer is NUL terminated. It will return the number of characters inserted into the buffer, not including the terminating NUL. As a special case, if len is 0, apr_snprintf will return the number of characters that would have been inserted if the buffer had been infinite (in this case, \*buffer can be NULL)

In no event does apr_snprintf return a negative number.

Global Functions
----------------

.. index:: pair: function; apr_snprintf
.. _doxid-group___a_p_r___strings___snprintf_1gaf0d0becc04278df5172f0ce5905f8ff9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	apr_snprintf(
		char* buf,
		apr_size_t len,
		const char* format,
		...
	)

snprintf routine based on apr_vformatter. This means it understands the same extensions.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- buf

		- The buffer to write to

	*
		- len

		- The size of the buffer

	*
		- format

		- The format string

	*
		- ...

		- The arguments to use to fill out the format string.

.. index:: pair: function; apr_vsnprintf
.. _doxid-group___a_p_r___strings___snprintf_1gaf6bf63e240e48b517644ff3e99e49c26:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	apr_vsnprintf(
		char* buf,
		apr_size_t len,
		const char* format,
		va_list ap
	)

vsnprintf routine based on apr_vformatter. This means it understands the same extensions.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- buf

		- The buffer to write to

	*
		- len

		- The size of the buffer

	*
		- format

		- The format string

	*
		- ap

		- The arguments to use to fill out the format string.

