.. index:: pair: group; Software Parameters
.. _doxid-group___p_c_m___s_w___params:

Software Parameters
===================

.. toctree::
	:hidden:

Overview
~~~~~~~~

See the :ref:`PCM (digital audio) interface <doxid-pcm>` page for more details. :ref:`More...<details-group___p_c_m___s_w___params>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// global functions

	size_t
	:ref:`snd_pcm_sw_params_sizeof<doxid-group___p_c_m___s_w___params_1ga7886ee5b3a48fb58ef8f70886472029a>`(void);

	int
	:ref:`snd_pcm_sw_params_malloc<doxid-group___p_c_m___s_w___params_1ga23382b62e7fc0de94b279c9f5dd08e5e>`(:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`** ptr);

	void
	:ref:`snd_pcm_sw_params_free<doxid-group___p_c_m___s_w___params_1ga35af2df23ec46619a82cb52e3733d47a>`(:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* obj);

	void
	:ref:`snd_pcm_sw_params_copy<doxid-group___p_c_m___s_w___params_1gafe9ebe9ea669012af58b728d55fc295b>`(
		:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* dst,
		const :ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* src
	);

	int
	:ref:`snd_pcm_sw_params_get_boundary<doxid-group___p_c_m___s_w___params_1ga8bdb67600cf3c0705518b6c0a79c56fe>`(
		const :ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>`* val
	);

	int
	:ref:`snd_pcm_sw_params_set_tstamp_mode<doxid-group___p_c_m___s_w___params_1gac2fba23ba6ac1636785e27f0f5381a15>`(
		:ref:`snd_pcm_t<doxid-group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea>`* pcm,
		:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_tstamp_t<doxid-group___p_c_m_1ga695a9755880cf886c13d07938f92ea77>` val
	);

	int
	:ref:`snd_pcm_sw_params_get_tstamp_mode<doxid-group___p_c_m___s_w___params_1ga4caef7435210cd7f4878d55dadeed0f8>`(
		const :ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_tstamp_t<doxid-group___p_c_m_1ga695a9755880cf886c13d07938f92ea77>`* val
	);

	int
	:ref:`snd_pcm_sw_params_set_tstamp_type<doxid-group___p_c_m___s_w___params_1ga912bad749f6317000eede607bb0bc935>`(
		:ref:`snd_pcm_t<doxid-group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea>`* pcm,
		:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_tstamp_type_t<doxid-group___p_c_m_1ga6e7869809e23ed1a3595e94fbd9a275c>` val
	);

	int
	:ref:`snd_pcm_sw_params_get_tstamp_type<doxid-group___p_c_m___s_w___params_1ga1cd956ea3dc0e32e32abc99af50f0819>`(
		const :ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_tstamp_type_t<doxid-group___p_c_m_1ga6e7869809e23ed1a3595e94fbd9a275c>`* val
	);

	int
	:ref:`snd_pcm_sw_params_set_avail_min<doxid-group___p_c_m___s_w___params_1ga79b12cbbd309750156261e7f5a39167b>`(
		:ref:`snd_pcm_t<doxid-group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea>`* pcm,
		:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>` val
	);

	int
	:ref:`snd_pcm_sw_params_get_avail_min<doxid-group___p_c_m___s_w___params_1ga587ccbb0b025dc97d2af5db9516163d4>`(
		const :ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>`* val
	);

	int
	:ref:`snd_pcm_sw_params_set_period_event<doxid-group___p_c_m___s_w___params_1gaf62ce50d6242b4f4dc9d6534a97e5c09>`(
		:ref:`snd_pcm_t<doxid-group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea>`* pcm,
		:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		int val
	);

	int
	:ref:`snd_pcm_sw_params_get_period_event<doxid-group___p_c_m___s_w___params_1ga0458a8fe480a7887726748052bd77211>`(
		const :ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		int* val
	);

	int
	:ref:`snd_pcm_sw_params_set_start_threshold<doxid-group___p_c_m___s_w___params_1ga1d338f1f7e33b7a6d0f9a8f61f87f057>`(
		:ref:`snd_pcm_t<doxid-group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea>`* pcm,
		:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>` val
	);

	int
	:ref:`snd_pcm_sw_params_get_start_threshold<doxid-group___p_c_m___s_w___params_1ga1ee7116c68bdea12606aab57db86a1d1>`(
		const :ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* paramsm,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>`* val
	);

	int
	:ref:`snd_pcm_sw_params_set_stop_threshold<doxid-group___p_c_m___s_w___params_1ga6a41bf533207d56fdb1ff10aeeac28e4>`(
		:ref:`snd_pcm_t<doxid-group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea>`* pcm,
		:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>` val
	);

	int
	:ref:`snd_pcm_sw_params_get_stop_threshold<doxid-group___p_c_m___s_w___params_1ga8a55577d7f3d8e4ce63a710921199c66>`(
		const :ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>`* val
	);

	int
	:ref:`snd_pcm_sw_params_set_silence_threshold<doxid-group___p_c_m___s_w___params_1ga5a0158bf962f20bd9fd5ed2c52dd682b>`(
		:ref:`snd_pcm_t<doxid-group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea>`* pcm,
		:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>` val
	);

	int
	:ref:`snd_pcm_sw_params_get_silence_threshold<doxid-group___p_c_m___s_w___params_1ga896ece8b418f6d6e92d2df5a4b59c3a2>`(
		const :ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>`* val
	);

	int
	:ref:`snd_pcm_sw_params_set_silence_size<doxid-group___p_c_m___s_w___params_1gaeb4a335a16981b5ea3fa671946fbdca3>`(
		:ref:`snd_pcm_t<doxid-group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea>`* pcm,
		:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>` val
	);

	int
	:ref:`snd_pcm_sw_params_get_silence_size<doxid-group___p_c_m___s_w___params_1ga6a197020c09c8a20e697d12e9fac3e11>`(
		const :ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>`* val
	);

	// macros

	#define :ref:`snd_pcm_sw_params_alloca<doxid-group___p_c_m___s_w___params_1ga8e564553bdc89948c918729e3cc7beb0>`(ptr)

.. _details-group___p_c_m___s_w___params:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

See the :ref:`PCM (digital audio) interface <doxid-pcm>` page for more details.

Global Functions
----------------

.. index:: pair: function; snd_pcm_sw_params_sizeof
.. _doxid-group___p_c_m___s_w___params_1ga7886ee5b3a48fb58ef8f70886472029a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	size_t
	snd_pcm_sw_params_sizeof(void)

get size of :ref:`snd_pcm_sw_params_t <doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`



.. rubric:: Returns:

size in bytes

.. index:: pair: function; snd_pcm_sw_params_malloc
.. _doxid-group___p_c_m___s_w___params_1ga23382b62e7fc0de94b279c9f5dd08e5e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_pcm_sw_params_malloc(:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`** ptr)

allocate an invalid :ref:`snd_pcm_sw_params_t <doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>` using standard malloc



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ptr

		- returned pointer



.. rubric:: Returns:

0 on success otherwise negative error code

.. index:: pair: function; snd_pcm_sw_params_free
.. _doxid-group___p_c_m___s_w___params_1ga35af2df23ec46619a82cb52e3733d47a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_pcm_sw_params_free(:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* obj)

frees a previously allocated :ref:`snd_pcm_sw_params_t <doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- obj

		- pointer to object to free

.. index:: pair: function; snd_pcm_sw_params_copy
.. _doxid-group___p_c_m___s_w___params_1gafe9ebe9ea669012af58b728d55fc295b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	snd_pcm_sw_params_copy(
		:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* dst,
		const :ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* src
	)

copy one :ref:`snd_pcm_sw_params_t <doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>` to another



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dst

		- pointer to destination

	*
		- src

		- pointer to source

.. index:: pair: function; snd_pcm_sw_params_get_boundary
.. _doxid-group___p_c_m___s_w___params_1ga8bdb67600cf3c0705518b6c0a79c56fe:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_pcm_sw_params_get_boundary(
		const :ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>`* val
	)

Get boundary for ring pointers from a software configuration container.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- Software configuration container

	*
		- val

		- Returned boundary in frames



.. rubric:: Returns:

0 otherwise a negative error code

.. index:: pair: function; snd_pcm_sw_params_set_tstamp_mode
.. _doxid-group___p_c_m___s_w___params_1gac2fba23ba6ac1636785e27f0f5381a15:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_pcm_sw_params_set_tstamp_mode(
		:ref:`snd_pcm_t<doxid-group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea>`* pcm,
		:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_tstamp_t<doxid-group___p_c_m_1ga695a9755880cf886c13d07938f92ea77>` val
	)

Set timestamp mode inside a software configuration container.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- pcm

		- PCM handle

	*
		- params

		- Software configuration container

	*
		- val

		- Timestamp mode



.. rubric:: Returns:

0 otherwise a negative error code

.. index:: pair: function; snd_pcm_sw_params_get_tstamp_mode
.. _doxid-group___p_c_m___s_w___params_1ga4caef7435210cd7f4878d55dadeed0f8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_pcm_sw_params_get_tstamp_mode(
		const :ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_tstamp_t<doxid-group___p_c_m_1ga695a9755880cf886c13d07938f92ea77>`* val
	)

Get timestamp mode from a software configuration container.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- Software configuration container

	*
		- val

		- Returned timestamp



.. rubric:: Returns:

0 otherwise a negative error code

.. index:: pair: function; snd_pcm_sw_params_set_tstamp_type
.. _doxid-group___p_c_m___s_w___params_1ga912bad749f6317000eede607bb0bc935:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_pcm_sw_params_set_tstamp_type(
		:ref:`snd_pcm_t<doxid-group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea>`* pcm,
		:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_tstamp_type_t<doxid-group___p_c_m_1ga6e7869809e23ed1a3595e94fbd9a275c>` val
	)

Set timestamp type inside a software configuration container.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- pcm

		- PCM handle

	*
		- params

		- Software configuration container

	*
		- val

		- Timestamp type



.. rubric:: Returns:

0 otherwise a negative error code

.. index:: pair: function; snd_pcm_sw_params_get_tstamp_type
.. _doxid-group___p_c_m___s_w___params_1ga1cd956ea3dc0e32e32abc99af50f0819:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_pcm_sw_params_get_tstamp_type(
		const :ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_tstamp_type_t<doxid-group___p_c_m_1ga6e7869809e23ed1a3595e94fbd9a275c>`* val
	)

Get timestamp type from a software configuration container.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- Software configuration container

	*
		- val

		- Returned timestamp type



.. rubric:: Returns:

0 otherwise a negative error code

.. index:: pair: function; snd_pcm_sw_params_set_avail_min
.. _doxid-group___p_c_m___s_w___params_1ga79b12cbbd309750156261e7f5a39167b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_pcm_sw_params_set_avail_min(
		:ref:`snd_pcm_t<doxid-group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea>`* pcm,
		:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>` val
	)

Set avail min inside a software configuration container.

Note: This is similar to setting an OSS wakeup point. The valid values for 'val' are determined by the specific hardware. Most PC sound cards can only accept power of 2 frame counts (i.e. 512, 1024, 2048). You cannot use this as a high resolution timer - it is limited to how often the sound card hardware raises an interrupt.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- pcm

		- PCM handle

	*
		- params

		- Software configuration container

	*
		- val

		- Minimum avail frames to consider PCM ready



.. rubric:: Returns:

0 otherwise a negative error code

.. index:: pair: function; snd_pcm_sw_params_get_avail_min
.. _doxid-group___p_c_m___s_w___params_1ga587ccbb0b025dc97d2af5db9516163d4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_pcm_sw_params_get_avail_min(
		const :ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>`* val
	)

Get avail min from a software configuration container.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- Software configuration container

	*
		- val

		- returned minimum available frames to consider PCM ready



.. rubric:: Returns:

0 otherwise a negative error code

.. index:: pair: function; snd_pcm_sw_params_set_period_event
.. _doxid-group___p_c_m___s_w___params_1gaf62ce50d6242b4f4dc9d6534a97e5c09:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_pcm_sw_params_set_period_event(
		:ref:`snd_pcm_t<doxid-group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea>`* pcm,
		:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		int val
	)

Set period event inside a software configuration container.

An poll (select) wakeup event is raised if enabled.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- pcm

		- PCM handle

	*
		- params

		- Software configuration container

	*
		- val

		- 0 = disable period event, 1 = enable period event



.. rubric:: Returns:

0 otherwise a negative error code

.. index:: pair: function; snd_pcm_sw_params_get_period_event
.. _doxid-group___p_c_m___s_w___params_1ga0458a8fe480a7887726748052bd77211:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_pcm_sw_params_get_period_event(
		const :ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		int* val
	)

Get period event from a software configuration container.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- Software configuration container

	*
		- val

		- returned period event state



.. rubric:: Returns:

0 otherwise a negative error code

.. index:: pair: function; snd_pcm_sw_params_set_start_threshold
.. _doxid-group___p_c_m___s_w___params_1ga1d338f1f7e33b7a6d0f9a8f61f87f057:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_pcm_sw_params_set_start_threshold(
		:ref:`snd_pcm_t<doxid-group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea>`* pcm,
		:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>` val
	)

Set start threshold inside a software configuration container.

PCM is automatically started when playback frames available to PCM are >= threshold or when requested capture frames are >= threshold



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- pcm

		- PCM handle

	*
		- params

		- Software configuration container

	*
		- val

		- Start threshold in frames



.. rubric:: Returns:

0 otherwise a negative error code

.. index:: pair: function; snd_pcm_sw_params_get_start_threshold
.. _doxid-group___p_c_m___s_w___params_1ga1ee7116c68bdea12606aab57db86a1d1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_pcm_sw_params_get_start_threshold(
		const :ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* paramsm,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>`* val
	)

Get start threshold from a software configuration container.

PCM is automatically started when playback frames available to PCM are >= threshold or when requested capture frames are >= threshold



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- Software configuration container

	*
		- val

		- Returned start threshold in frames



.. rubric:: Returns:

0 otherwise a negative error code

.. index:: pair: function; snd_pcm_sw_params_set_stop_threshold
.. _doxid-group___p_c_m___s_w___params_1ga6a41bf533207d56fdb1ff10aeeac28e4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_pcm_sw_params_set_stop_threshold(
		:ref:`snd_pcm_t<doxid-group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea>`* pcm,
		:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>` val
	)

Set stop threshold inside a software configuration container.

PCM is automatically stopped in :ref:`SND_PCM_STATE_XRUN <doxid-group___p_c_m_1gga61ac499cb3701ce536d4d83725908860ab63b5b90201110cd586b686355fd5d83>` state when available frames is >= threshold. If the stop threshold is equal to boundary (also software parameter - sw_param) then automatic stop will be disabled (thus device will do the endless loop in the ring buffer).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- pcm

		- PCM handle

	*
		- params

		- Software configuration container

	*
		- val

		- Stop threshold in frames



.. rubric:: Returns:

0 otherwise a negative error code

.. index:: pair: function; snd_pcm_sw_params_get_stop_threshold
.. _doxid-group___p_c_m___s_w___params_1ga8a55577d7f3d8e4ce63a710921199c66:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_pcm_sw_params_get_stop_threshold(
		const :ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>`* val
	)

Get stop threshold from a software configuration container.

PCM is automatically stopped in :ref:`SND_PCM_STATE_XRUN <doxid-group___p_c_m_1gga61ac499cb3701ce536d4d83725908860ab63b5b90201110cd586b686355fd5d83>` state when available frames is >= threshold. If the stop threshold is equal to boundary (also software parameter - sw_param) then automatic stop will be disabled (thus device will do the endless loop in the ring buffer).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- Software configuration container

	*
		- val

		- Returned stop threshold in frames



.. rubric:: Returns:

0 otherwise a negative error code

.. index:: pair: function; snd_pcm_sw_params_set_silence_threshold
.. _doxid-group___p_c_m___s_w___params_1ga5a0158bf962f20bd9fd5ed2c52dd682b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_pcm_sw_params_set_silence_threshold(
		:ref:`snd_pcm_t<doxid-group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea>`* pcm,
		:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>` val
	)

Set silence threshold inside a software configuration container.

A portion of playback buffer is overwritten with silence (see :ref:`snd_pcm_sw_params_set_silence_size <doxid-group___p_c_m___s_w___params_1gaeb4a335a16981b5ea3fa671946fbdca3>`) when playback underrun is nearer than silence threshold.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- pcm

		- PCM handle

	*
		- params

		- Software configuration container

	*
		- val

		- Silence threshold in frames



.. rubric:: Returns:

0 otherwise a negative error code

.. index:: pair: function; snd_pcm_sw_params_get_silence_threshold
.. _doxid-group___p_c_m___s_w___params_1ga896ece8b418f6d6e92d2df5a4b59c3a2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_pcm_sw_params_get_silence_threshold(
		const :ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>`* val
	)

Get silence threshold from a software configuration container.

A portion of playback buffer is overwritten with silence (see :ref:`snd_pcm_sw_params_set_silence_size <doxid-group___p_c_m___s_w___params_1gaeb4a335a16981b5ea3fa671946fbdca3>`) when playback underrun is nearer than silence threshold.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- Software configuration container

	*
		- val

		- Returned silence threshold in frames



.. rubric:: Returns:

0 otherwise a negative error value

.. index:: pair: function; snd_pcm_sw_params_set_silence_size
.. _doxid-group___p_c_m___s_w___params_1gaeb4a335a16981b5ea3fa671946fbdca3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_pcm_sw_params_set_silence_size(
		:ref:`snd_pcm_t<doxid-group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea>`* pcm,
		:ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>` val
	)

Set silence size inside a software configuration container.

A portion of playback buffer is overwritten with silence when playback underrun is nearer than silence threshold (see :ref:`snd_pcm_sw_params_set_silence_threshold <doxid-group___p_c_m___s_w___params_1ga5a0158bf962f20bd9fd5ed2c52dd682b>`)

The special case is when silence size value is equal or greater than boundary. The unused portion of the ring buffer (initial written samples are untouched) is filled with silence at start. Later, only just processed sample area is filled with silence. Note: silence_threshold must be set to zero.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- pcm

		- PCM handle

	*
		- params

		- Software configuration container

	*
		- val

		- Silence size in frames (0 for disabled)



.. rubric:: Returns:

0 otherwise a negative error code

.. index:: pair: function; snd_pcm_sw_params_get_silence_size
.. _doxid-group___p_c_m___s_w___params_1ga6a197020c09c8a20e697d12e9fac3e11:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	snd_pcm_sw_params_get_silence_size(
		const :ref:`snd_pcm_sw_params_t<doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>`* params,
		:ref:`snd_pcm_uframes_t<doxid-group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a>`* val
	)

Get silence size from a software configuration container.

A portion of playback buffer is overwritten with silence when playback underrun is nearer than silence threshold (see :ref:`snd_pcm_sw_params_set_silence_threshold <doxid-group___p_c_m___s_w___params_1ga5a0158bf962f20bd9fd5ed2c52dd682b>`)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- params

		- Software configuration container

	*
		- val

		- Returned silence size in frames (0 for disabled)



.. rubric:: Returns:

0 otherwise a negative error code

Macros
------

.. index:: pair: define; snd_pcm_sw_params_alloca
.. _doxid-group___p_c_m___s_w___params_1ga8e564553bdc89948c918729e3cc7beb0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define snd_pcm_sw_params_alloca(ptr)

allocate an invalid :ref:`snd_pcm_sw_params_t <doxid-group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09>` using standard alloca



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ptr

		- returned pointer

