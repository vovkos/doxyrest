.. index:: pair: group; USB descriptors
.. _doxid-group__libusb__desc:

USB descriptors
===============

.. toctree::
	:hidden:

	enum_libusb_class_code.rst
	enum_libusb_descriptor_type.rst
	enum_libusb_endpoint_direction.rst
	enum_libusb_iso_sync_type.rst
	enum_libusb_iso_usage_type.rst
	enum_libusb_transfer_type.rst
	struct_libusb_bos_descriptor.rst
	struct_libusb_bos_dev_capability_descriptor.rst
	struct_libusb_config_descriptor.rst
	struct_libusb_container_id_descriptor.rst
	struct_libusb_device_descriptor.rst
	struct_libusb_endpoint_descriptor.rst
	struct_libusb_interface.rst
	struct_libusb_interface_descriptor.rst
	struct_libusb_ss_endpoint_companion_descriptor.rst
	struct_libusb_ss_usb_device_capability_descriptor.rst
	struct_libusb_usb_2_0_extension_descriptor.rst

Overview
~~~~~~~~

This page details how to examine the various standard USB descriptors for detected devices. :ref:`More...<details-group__libusb__desc>`


.. ref-code-block:: c
	:class: doxyrest-overview-code-block

	
	// enums

	enum :ref:`libusb_class_code<doxid-group__libusb__desc_1gac529888effbefef8af4f9d17ebc903a1>`;
	enum :ref:`libusb_descriptor_type<doxid-group__libusb__desc_1ga0a2e8a25dfdebf29fdd4764dcdbc1a9c>`;
	enum :ref:`libusb_endpoint_direction<doxid-group__libusb__desc_1ga86c880af878493aa8f805c2aba654b8b>`;
	enum :ref:`libusb_iso_sync_type<doxid-group__libusb__desc_1gaa2231202dfe12eddca49b1193d44a441>`;
	enum :ref:`libusb_iso_usage_type<doxid-group__libusb__desc_1gab72474551b0eb965401e6febb856007c>`;
	enum :ref:`libusb_transfer_type<doxid-group__libusb__desc_1gacb52027036a07de6ecc6c2bf07d07c71>`;

	// structs

	struct :ref:`libusb_bos_descriptor<doxid-structlibusb__bos__descriptor>`;
	struct :ref:`libusb_bos_dev_capability_descriptor<doxid-structlibusb__bos__dev__capability__descriptor>`;
	struct :ref:`libusb_config_descriptor<doxid-structlibusb__config__descriptor>`;
	struct :ref:`libusb_container_id_descriptor<doxid-structlibusb__container__id__descriptor>`;
	struct :ref:`libusb_device_descriptor<doxid-structlibusb__device__descriptor>`;
	struct :ref:`libusb_endpoint_descriptor<doxid-structlibusb__endpoint__descriptor>`;
	struct :ref:`libusb_interface<doxid-structlibusb__interface>`;
	struct :ref:`libusb_interface_descriptor<doxid-structlibusb__interface__descriptor>`;
	struct :ref:`libusb_ss_endpoint_companion_descriptor<doxid-structlibusb__ss__endpoint__companion__descriptor>`;
	struct :ref:`libusb_ss_usb_device_capability_descriptor<doxid-structlibusb__ss__usb__device__capability__descriptor>`;
	struct :ref:`libusb_usb_2_0_extension_descriptor<doxid-structlibusb__usb__2__0__extension__descriptor>`;

	// global functions

	int
	:ref:`libusb_get_device_descriptor<doxid-group__libusb__desc_1ga5e9ab08d490a7704cf3a9b0439f16f00>`(
		:ref:`libusb_device<doxid-group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b>`* dev,
		struct :ref:`libusb_device_descriptor<doxid-structlibusb__device__descriptor>`* desc
	);

	int
	:ref:`libusb_get_active_config_descriptor<doxid-group__libusb__desc_1ga425885149172b53b3975a07629c8dab3>`(
		:ref:`libusb_device<doxid-group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b>`* dev,
		struct :ref:`libusb_config_descriptor<doxid-structlibusb__config__descriptor>`** config
	);

	int
	:ref:`libusb_get_config_descriptor<doxid-group__libusb__desc_1gaa635d9aec77de4895dd0896ccf001532>`(
		:ref:`libusb_device<doxid-group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b>`* dev,
		uint8_t config_index,
		struct :ref:`libusb_config_descriptor<doxid-structlibusb__config__descriptor>`** config
	);

	int
	:ref:`libusb_get_config_descriptor_by_value<doxid-group__libusb__desc_1ga3e7bffc5d08404c4d6491e73b967bf67>`(
		:ref:`libusb_device<doxid-group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b>`* dev,
		uint8_t bConfigurationValue,
		struct :ref:`libusb_config_descriptor<doxid-structlibusb__config__descriptor>`** config
	);

	void
	:ref:`libusb_free_config_descriptor<doxid-group__libusb__desc_1ga18d2b08a065857ff7ae4f3f719c115cc>`(struct :ref:`libusb_config_descriptor<doxid-structlibusb__config__descriptor>`* config);

	int
	:ref:`libusb_get_ss_endpoint_companion_descriptor<doxid-group__libusb__desc_1gade95f9708956c3d45d9969e860fc7241>`(
		struct :ref:`libusb_context<doxid-group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833>`* ctx,
		const struct :ref:`libusb_endpoint_descriptor<doxid-structlibusb__endpoint__descriptor>`* endpoint,
		struct :ref:`libusb_ss_endpoint_companion_descriptor<doxid-structlibusb__ss__endpoint__companion__descriptor>`** ep_comp
	);

	void
	:ref:`libusb_free_ss_endpoint_companion_descriptor<doxid-group__libusb__desc_1ga52738e36d2c0e6a0607405d783a2c894>`(struct :ref:`libusb_ss_endpoint_companion_descriptor<doxid-structlibusb__ss__endpoint__companion__descriptor>`* ep_comp);

	int
	:ref:`libusb_get_bos_descriptor<doxid-group__libusb__desc_1ga68fd9576677c12aa397192916dc49a0b>`(
		:ref:`libusb_device_handle<doxid-group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4>`* dev_handle,
		struct :ref:`libusb_bos_descriptor<doxid-structlibusb__bos__descriptor>`** bos
	);

	void
	:ref:`libusb_free_bos_descriptor<doxid-group__libusb__desc_1gac9bff9809a7b8663190dda0455998767>`(struct :ref:`libusb_bos_descriptor<doxid-structlibusb__bos__descriptor>`* bos);

	int
	:ref:`libusb_get_usb_2_0_extension_descriptor<doxid-group__libusb__desc_1gac76954b54b97d90c760716fc048b6555>`(
		struct :ref:`libusb_context<doxid-group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833>`* ctx,
		struct :ref:`libusb_bos_dev_capability_descriptor<doxid-structlibusb__bos__dev__capability__descriptor>`* dev_cap,
		struct :ref:`libusb_usb_2_0_extension_descriptor<doxid-structlibusb__usb__2__0__extension__descriptor>`** usb_2_0_extension
	);

	void
	:ref:`libusb_free_usb_2_0_extension_descriptor<doxid-group__libusb__desc_1ga5efd69bf490c4359356f5e5bea8dd48c>`(struct :ref:`libusb_usb_2_0_extension_descriptor<doxid-structlibusb__usb__2__0__extension__descriptor>`* usb_2_0_extension);

	int
	:ref:`libusb_get_ss_usb_device_capability_descriptor<doxid-group__libusb__desc_1ga6f9118c2c4c5a42f9e4040e78af63f78>`(
		struct :ref:`libusb_context<doxid-group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833>`* ctx,
		struct :ref:`libusb_bos_dev_capability_descriptor<doxid-structlibusb__bos__dev__capability__descriptor>`* dev_cap,
		struct :ref:`libusb_ss_usb_device_capability_descriptor<doxid-structlibusb__ss__usb__device__capability__descriptor>`** ss_usb_device_cap
	);

	void
	:ref:`libusb_free_ss_usb_device_capability_descriptor<doxid-group__libusb__desc_1ga8fbf4e49c3ae0c6b7bc2d540ad9a75fb>`(struct :ref:`libusb_ss_usb_device_capability_descriptor<doxid-structlibusb__ss__usb__device__capability__descriptor>`* ss_usb_device_cap);

	int
	:ref:`libusb_get_container_id_descriptor<doxid-group__libusb__desc_1gabe419223add0c8190a940cc4fae19c7f>`(
		struct :ref:`libusb_context<doxid-group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833>`* ctx,
		struct :ref:`libusb_bos_dev_capability_descriptor<doxid-structlibusb__bos__dev__capability__descriptor>`* dev_cap,
		struct :ref:`libusb_container_id_descriptor<doxid-structlibusb__container__id__descriptor>`** container_id
	);

	void
	:ref:`libusb_free_container_id_descriptor<doxid-group__libusb__desc_1gafeb7c49aa9d3a9c4964f397220d8eab4>`(struct :ref:`libusb_container_id_descriptor<doxid-structlibusb__container__id__descriptor>`* container_id);

	int
	:ref:`libusb_get_string_descriptor_ascii<doxid-group__libusb__desc_1ga240aac96d92cb9f51e3aea79a4adbf42>`(
		:ref:`libusb_device_handle<doxid-group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4>`* dev_handle,
		uint8_t desc_index,
		unsigned char* data,
		int length
	);

	static
	int
	:ref:`libusb_get_descriptor<doxid-group__libusb__desc_1ga9e34f7ecf3817e9bfe77ed09238940df>`(
		:ref:`libusb_device_handle<doxid-group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4>`* dev_handle,
		uint8_t desc_type,
		uint8_t desc_index,
		unsigned char* data,
		int length
	);

	static
	int
	:ref:`libusb_get_string_descriptor<doxid-group__libusb__desc_1ga09103309f98471387561bce0719d88ad>`(
		:ref:`libusb_device_handle<doxid-group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4>`* dev_handle,
		uint8_t desc_index,
		uint16_t langid,
		unsigned char* data,
		int length
	);

.. _details-group__libusb__desc:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This page details how to examine the various standard USB descriptors for detected devices.

Global Functions
----------------

.. index:: pair: function; libusb_get_device_descriptor
.. _doxid-group__libusb__desc_1ga5e9ab08d490a7704cf3a9b0439f16f00:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	int
	libusb_get_device_descriptor(
		:ref:`libusb_device<doxid-group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b>`* dev,
		struct :ref:`libusb_device_descriptor<doxid-structlibusb__device__descriptor>`* desc
	)

Get the USB device descriptor for a given device.

This is a non-blocking function; the device descriptor is cached in memory.

Note since libusb-1.0.16, :ref:`LIBUSB_API_VERSION <doxid-group__libusb__misc_1gaabe4bc36a83358685d36a6c853cbb4de>`>= 0x01000102, this function always succeeds.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dev

		- the device

	*
		- desc

		- output location for the descriptor data



.. rubric:: Returns:

0 on success or a LIBUSB_ERROR code on failure

.. index:: pair: function; libusb_get_active_config_descriptor
.. _doxid-group__libusb__desc_1ga425885149172b53b3975a07629c8dab3:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	int
	libusb_get_active_config_descriptor(
		:ref:`libusb_device<doxid-group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b>`* dev,
		struct :ref:`libusb_config_descriptor<doxid-structlibusb__config__descriptor>`** config
	)

Get the USB configuration descriptor for the currently active configuration.

This is a non-blocking function which does not involve any requests being sent to the device.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dev

		- a device

	*
		- config

		- output location for the USB configuration descriptor. Only valid if 0 was returned. Must be freed with :ref:`libusb_free_config_descriptor() <doxid-group__libusb__desc_1ga18d2b08a065857ff7ae4f3f719c115cc>` after use.



.. rubric:: Returns:

0 on success

LIBUSB_ERROR_NOT_FOUND if the device is in unconfigured state

another LIBUSB_ERROR code on error



.. rubric:: See also:

:ref:`libusb_get_config_descriptor <doxid-group__libusb__desc_1gaa635d9aec77de4895dd0896ccf001532>`

.. index:: pair: function; libusb_get_config_descriptor
.. _doxid-group__libusb__desc_1gaa635d9aec77de4895dd0896ccf001532:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	int
	libusb_get_config_descriptor(
		:ref:`libusb_device<doxid-group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b>`* dev,
		uint8_t config_index,
		struct :ref:`libusb_config_descriptor<doxid-structlibusb__config__descriptor>`** config
	)

Get a USB configuration descriptor based on its index.

This is a non-blocking function which does not involve any requests being sent to the device.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dev

		- a device

	*
		- config_index

		- the index of the configuration you wish to retrieve

	*
		- config

		- output location for the USB configuration descriptor. Only valid if 0 was returned. Must be freed with :ref:`libusb_free_config_descriptor() <doxid-group__libusb__desc_1ga18d2b08a065857ff7ae4f3f719c115cc>` after use.



.. rubric:: Returns:

0 on success

LIBUSB_ERROR_NOT_FOUND if the configuration does not exist

another LIBUSB_ERROR code on error



.. rubric:: See also:

:ref:`libusb_get_active_config_descriptor() <doxid-group__libusb__desc_1ga425885149172b53b3975a07629c8dab3>`

:ref:`libusb_get_config_descriptor_by_value() <doxid-group__libusb__desc_1ga3e7bffc5d08404c4d6491e73b967bf67>`

.. index:: pair: function; libusb_get_config_descriptor_by_value
.. _doxid-group__libusb__desc_1ga3e7bffc5d08404c4d6491e73b967bf67:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	int
	libusb_get_config_descriptor_by_value(
		:ref:`libusb_device<doxid-group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b>`* dev,
		uint8_t bConfigurationValue,
		struct :ref:`libusb_config_descriptor<doxid-structlibusb__config__descriptor>`** config
	)

Get a USB configuration descriptor with a specific bConfigurationValue.

This is a non-blocking function which does not involve any requests being sent to the device.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dev

		- a device

	*
		- bConfigurationValue

		- the bConfigurationValue of the configuration you wish to retrieve

	*
		- config

		- output location for the USB configuration descriptor. Only valid if 0 was returned. Must be freed with :ref:`libusb_free_config_descriptor() <doxid-group__libusb__desc_1ga18d2b08a065857ff7ae4f3f719c115cc>` after use.



.. rubric:: Returns:

0 on success

LIBUSB_ERROR_NOT_FOUND if the configuration does not exist

another LIBUSB_ERROR code on error



.. rubric:: See also:

:ref:`libusb_get_active_config_descriptor() <doxid-group__libusb__desc_1ga425885149172b53b3975a07629c8dab3>`

:ref:`libusb_get_config_descriptor() <doxid-group__libusb__desc_1gaa635d9aec77de4895dd0896ccf001532>`

.. index:: pair: function; libusb_free_config_descriptor
.. _doxid-group__libusb__desc_1ga18d2b08a065857ff7ae4f3f719c115cc:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	void
	libusb_free_config_descriptor(struct :ref:`libusb_config_descriptor<doxid-structlibusb__config__descriptor>`* config)

Free a configuration descriptor obtained from :ref:`libusb_get_active_config_descriptor() <doxid-group__libusb__desc_1ga425885149172b53b3975a07629c8dab3>` or :ref:`libusb_get_config_descriptor() <doxid-group__libusb__desc_1gaa635d9aec77de4895dd0896ccf001532>`.

It is safe to call this function with a NULL config parameter, in which case the function simply returns.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- config

		- the configuration descriptor to free

.. index:: pair: function; libusb_get_ss_endpoint_companion_descriptor
.. _doxid-group__libusb__desc_1gade95f9708956c3d45d9969e860fc7241:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	int
	libusb_get_ss_endpoint_companion_descriptor(
		struct :ref:`libusb_context<doxid-group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833>`* ctx,
		const struct :ref:`libusb_endpoint_descriptor<doxid-structlibusb__endpoint__descriptor>`* endpoint,
		struct :ref:`libusb_ss_endpoint_companion_descriptor<doxid-structlibusb__ss__endpoint__companion__descriptor>`** ep_comp
	)

Get an endpoints superspeed endpoint companion descriptor (if any)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctx

		- the context to operate on, or NULL for the default context

	*
		- endpoint

		- endpoint descriptor from which to get the superspeed endpoint companion descriptor

	*
		- ep_comp

		- output location for the superspeed endpoint companion descriptor. Only valid if 0 was returned. Must be freed with :ref:`libusb_free_ss_endpoint_companion_descriptor() <doxid-group__libusb__desc_1ga52738e36d2c0e6a0607405d783a2c894>` after use.



.. rubric:: Returns:

0 on success

LIBUSB_ERROR_NOT_FOUND if the configuration does not exist

another LIBUSB_ERROR code on error

.. index:: pair: function; libusb_free_ss_endpoint_companion_descriptor
.. _doxid-group__libusb__desc_1ga52738e36d2c0e6a0607405d783a2c894:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	void
	libusb_free_ss_endpoint_companion_descriptor(struct :ref:`libusb_ss_endpoint_companion_descriptor<doxid-structlibusb__ss__endpoint__companion__descriptor>`* ep_comp)

Free a superspeed endpoint companion descriptor obtained from :ref:`libusb_get_ss_endpoint_companion_descriptor() <doxid-group__libusb__desc_1gade95f9708956c3d45d9969e860fc7241>`.

It is safe to call this function with a NULL ep_comp parameter, in which case the function simply returns.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ep_comp

		- the superspeed endpoint companion descriptor to free

.. index:: pair: function; libusb_get_bos_descriptor
.. _doxid-group__libusb__desc_1ga68fd9576677c12aa397192916dc49a0b:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	int
	libusb_get_bos_descriptor(
		:ref:`libusb_device_handle<doxid-group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4>`* dev_handle,
		struct :ref:`libusb_bos_descriptor<doxid-structlibusb__bos__descriptor>`** bos
	)

Get a Binary Object Store (BOS) descriptor This is a BLOCKING function, which will send requests to the device.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dev_handle

		- the handle of an open libusb device

	*
		- bos

		- output location for the BOS descriptor. Only valid if 0 was returned. Must be freed with :ref:`libusb_free_bos_descriptor() <doxid-group__libusb__desc_1gac9bff9809a7b8663190dda0455998767>` after use.



.. rubric:: Returns:

0 on success

LIBUSB_ERROR_NOT_FOUND if the device doesn't have a BOS descriptor

another LIBUSB_ERROR code on error

.. index:: pair: function; libusb_free_bos_descriptor
.. _doxid-group__libusb__desc_1gac9bff9809a7b8663190dda0455998767:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	void
	libusb_free_bos_descriptor(struct :ref:`libusb_bos_descriptor<doxid-structlibusb__bos__descriptor>`* bos)

Free a BOS descriptor obtained from :ref:`libusb_get_bos_descriptor() <doxid-group__libusb__desc_1ga68fd9576677c12aa397192916dc49a0b>`.

It is safe to call this function with a NULL bos parameter, in which case the function simply returns.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- bos

		- the BOS descriptor to free

.. index:: pair: function; libusb_get_usb_2_0_extension_descriptor
.. _doxid-group__libusb__desc_1gac76954b54b97d90c760716fc048b6555:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	int
	libusb_get_usb_2_0_extension_descriptor(
		struct :ref:`libusb_context<doxid-group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833>`* ctx,
		struct :ref:`libusb_bos_dev_capability_descriptor<doxid-structlibusb__bos__dev__capability__descriptor>`* dev_cap,
		struct :ref:`libusb_usb_2_0_extension_descriptor<doxid-structlibusb__usb__2__0__extension__descriptor>`** usb_2_0_extension
	)

Get an USB 2.0 Extension descriptor.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctx

		- the context to operate on, or NULL for the default context

	*
		- dev_cap

		- Device Capability descriptor with a bDevCapabilityType of :ref:`libusb_capability_type::LIBUSB_BT_USB_2_0_EXTENSION <doxid-group__libusb__dev_1gga6ccabbf3b3728ae69608ba83bba4e64ca243b090db95a0fdf7104fbf581724b86>` LIBUSB_BT_USB_2_0_EXTENSION

	*
		- usb_2_0_extension

		- output location for the USB 2.0 Extension descriptor. Only valid if 0 was returned. Must be freed with :ref:`libusb_free_usb_2_0_extension_descriptor() <doxid-group__libusb__desc_1ga5efd69bf490c4359356f5e5bea8dd48c>` after use.



.. rubric:: Returns:

0 on success

a LIBUSB_ERROR code on error

.. index:: pair: function; libusb_free_usb_2_0_extension_descriptor
.. _doxid-group__libusb__desc_1ga5efd69bf490c4359356f5e5bea8dd48c:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	void
	libusb_free_usb_2_0_extension_descriptor(struct :ref:`libusb_usb_2_0_extension_descriptor<doxid-structlibusb__usb__2__0__extension__descriptor>`* usb_2_0_extension)

Free a USB 2.0 Extension descriptor obtained from :ref:`libusb_get_usb_2_0_extension_descriptor() <doxid-group__libusb__desc_1gac76954b54b97d90c760716fc048b6555>`.

It is safe to call this function with a NULL usb_2_0_extension parameter, in which case the function simply returns.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- usb_2_0_extension

		- the USB 2.0 Extension descriptor to free

.. index:: pair: function; libusb_get_ss_usb_device_capability_descriptor
.. _doxid-group__libusb__desc_1ga6f9118c2c4c5a42f9e4040e78af63f78:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	int
	libusb_get_ss_usb_device_capability_descriptor(
		struct :ref:`libusb_context<doxid-group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833>`* ctx,
		struct :ref:`libusb_bos_dev_capability_descriptor<doxid-structlibusb__bos__dev__capability__descriptor>`* dev_cap,
		struct :ref:`libusb_ss_usb_device_capability_descriptor<doxid-structlibusb__ss__usb__device__capability__descriptor>`** ss_usb_device_cap
	)

Get a SuperSpeed USB Device Capability descriptor.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctx

		- the context to operate on, or NULL for the default context

	*
		- dev_cap

		- Device Capability descriptor with a bDevCapabilityType of :ref:`libusb_capability_type::LIBUSB_BT_SS_USB_DEVICE_CAPABILITY <doxid-group__libusb__dev_1gga6ccabbf3b3728ae69608ba83bba4e64ca2f1ab0d2d1e14d4942c079749b1b6c85>` LIBUSB_BT_SS_USB_DEVICE_CAPABILITY

	*
		- ss_usb_device_cap

		- output location for the SuperSpeed USB Device Capability descriptor. Only valid if 0 was returned. Must be freed with :ref:`libusb_free_ss_usb_device_capability_descriptor() <doxid-group__libusb__desc_1ga8fbf4e49c3ae0c6b7bc2d540ad9a75fb>` after use.



.. rubric:: Returns:

0 on success

a LIBUSB_ERROR code on error

.. index:: pair: function; libusb_free_ss_usb_device_capability_descriptor
.. _doxid-group__libusb__desc_1ga8fbf4e49c3ae0c6b7bc2d540ad9a75fb:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	void
	libusb_free_ss_usb_device_capability_descriptor(struct :ref:`libusb_ss_usb_device_capability_descriptor<doxid-structlibusb__ss__usb__device__capability__descriptor>`* ss_usb_device_cap)

Free a SuperSpeed USB Device Capability descriptor obtained from :ref:`libusb_get_ss_usb_device_capability_descriptor() <doxid-group__libusb__desc_1ga6f9118c2c4c5a42f9e4040e78af63f78>`.

It is safe to call this function with a NULL ss_usb_device_cap parameter, in which case the function simply returns.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ss_usb_device_cap

		- the USB 2.0 Extension descriptor to free

.. index:: pair: function; libusb_get_container_id_descriptor
.. _doxid-group__libusb__desc_1gabe419223add0c8190a940cc4fae19c7f:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	int
	libusb_get_container_id_descriptor(
		struct :ref:`libusb_context<doxid-group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833>`* ctx,
		struct :ref:`libusb_bos_dev_capability_descriptor<doxid-structlibusb__bos__dev__capability__descriptor>`* dev_cap,
		struct :ref:`libusb_container_id_descriptor<doxid-structlibusb__container__id__descriptor>`** container_id
	)

Get a Container ID descriptor.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ctx

		- the context to operate on, or NULL for the default context

	*
		- dev_cap

		- Device Capability descriptor with a bDevCapabilityType of :ref:`libusb_capability_type::LIBUSB_BT_CONTAINER_ID <doxid-group__libusb__dev_1gga6ccabbf3b3728ae69608ba83bba4e64cac3c00e8861b4b596ea1f53c505809e5e>` LIBUSB_BT_CONTAINER_ID

	*
		- container_id

		- output location for the Container ID descriptor. Only valid if 0 was returned. Must be freed with :ref:`libusb_free_container_id_descriptor() <doxid-group__libusb__desc_1gafeb7c49aa9d3a9c4964f397220d8eab4>` after use.



.. rubric:: Returns:

0 on success

a LIBUSB_ERROR code on error

.. index:: pair: function; libusb_free_container_id_descriptor
.. _doxid-group__libusb__desc_1gafeb7c49aa9d3a9c4964f397220d8eab4:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	void
	libusb_free_container_id_descriptor(struct :ref:`libusb_container_id_descriptor<doxid-structlibusb__container__id__descriptor>`* container_id)

Free a Container ID descriptor obtained from :ref:`libusb_get_container_id_descriptor() <doxid-group__libusb__desc_1gabe419223add0c8190a940cc4fae19c7f>`.

It is safe to call this function with a NULL container_id parameter, in which case the function simply returns.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- container_id

		- the USB 2.0 Extension descriptor to free

.. index:: pair: function; libusb_get_string_descriptor_ascii
.. _doxid-group__libusb__desc_1ga240aac96d92cb9f51e3aea79a4adbf42:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	int
	libusb_get_string_descriptor_ascii(
		:ref:`libusb_device_handle<doxid-group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4>`* dev_handle,
		uint8_t desc_index,
		unsigned char* data,
		int length
	)

Retrieve a string descriptor in C style ASCII.

Wrapper around :ref:`libusb_get_string_descriptor() <doxid-group__libusb__desc_1ga09103309f98471387561bce0719d88ad>`. Uses the first language supported by the device.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dev_handle

		- a device handle

	*
		- desc_index

		- the index of the descriptor to retrieve

	*
		- data

		- output buffer for ASCII string descriptor

	*
		- length

		- size of data buffer



.. rubric:: Returns:

number of bytes returned in data, or LIBUSB_ERROR code on failure

.. index:: pair: function; libusb_get_descriptor
.. _doxid-group__libusb__desc_1ga9e34f7ecf3817e9bfe77ed09238940df:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	static
	int
	libusb_get_descriptor(
		:ref:`libusb_device_handle<doxid-group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4>`* dev_handle,
		uint8_t desc_type,
		uint8_t desc_index,
		unsigned char* data,
		int length
	)

Retrieve a descriptor from the default control pipe.

This is a convenience function which formulates the appropriate control message to retrieve the descriptor.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dev_handle

		- a device handle

	*
		- desc_type

		- the descriptor type, see :ref:`libusb_descriptor_type <doxid-group__libusb__desc_1ga0a2e8a25dfdebf29fdd4764dcdbc1a9c>`

	*
		- desc_index

		- the index of the descriptor to retrieve

	*
		- data

		- output buffer for descriptor

	*
		- length

		- size of data buffer



.. rubric:: Returns:

number of bytes returned in data, or LIBUSB_ERROR code on failure

.. index:: pair: function; libusb_get_string_descriptor
.. _doxid-group__libusb__desc_1ga09103309f98471387561bce0719d88ad:

.. ref-code-block:: c
	:class: doxyrest-title-code-block

	static
	int
	libusb_get_string_descriptor(
		:ref:`libusb_device_handle<doxid-group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4>`* dev_handle,
		uint8_t desc_index,
		uint16_t langid,
		unsigned char* data,
		int length
	)

Retrieve a descriptor from a device.

This is a convenience function which formulates the appropriate control message to retrieve the descriptor. The string returned is Unicode, as detailed in the USB specifications.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dev_handle

		- a device handle

	*
		- desc_index

		- the index of the descriptor to retrieve

	*
		- langid

		- the language ID for the string descriptor

	*
		- data

		- output buffer for descriptor

	*
		- length

		- size of data buffer



.. rubric:: Returns:

number of bytes returned in data, or LIBUSB_ERROR code on failure



.. rubric:: See also:

:ref:`libusb_get_string_descriptor_ascii() <doxid-group__libusb__desc_1ga240aac96d92cb9f51e3aea79a4adbf42>`

