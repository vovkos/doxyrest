.. index:: pair: group; Escape functions
.. _doxid-group___a_p_r___util___escaping:

Escape functions
================

.. toctree::
	:hidden:

Overview
~~~~~~~~




.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// global functions

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_escape_shell<doxid-group___a_p_r___util___escaping_1gafdfca9adc06570fa6efd802e24dce6d1>`(
		char* escaped,
		const char* str,
		apr_ssize_t slen,
		apr_size_t* len
	);

	const char*
	:ref:`apr_pescape_shell<doxid-group___a_p_r___util___escaping_1ga81e97334f8033bfbc3acd5e15262323e>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* str
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_unescape_url<doxid-group___a_p_r___util___escaping_1ga9a6b08630ef5a605def1dfa4a54b026f>`(
		char* escaped,
		const char* url,
		apr_ssize_t slen,
		const char* forbid,
		const char* reserved,
		int plus,
		apr_size_t* len
	);

	const char*
	:ref:`apr_punescape_url<doxid-group___a_p_r___util___escaping_1gac713d5687a00134cef5c795dbf4e6dbe>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* url,
		const char* forbid,
		const char* reserved,
		int plus
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_escape_path_segment<doxid-group___a_p_r___util___escaping_1ga2fba5a28f4924f00f1ba9a56bc87f651>`(
		char* escaped,
		const char* str,
		apr_ssize_t slen,
		apr_size_t* len
	);

	const char*
	:ref:`apr_pescape_path_segment<doxid-group___a_p_r___util___escaping_1ga36bd45eb1f919fe61f04f5e9087c6242>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* str
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_escape_path<doxid-group___a_p_r___util___escaping_1gae67859a1d260f354c16e939d24d67058>`(
		char* escaped,
		const char* path,
		apr_ssize_t slen,
		int partial,
		apr_size_t* len
	);

	const char*
	:ref:`apr_pescape_path<doxid-group___a_p_r___util___escaping_1gacd4fc208448eb07af16350802077783a>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* str,
		int partial
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_escape_urlencoded<doxid-group___a_p_r___util___escaping_1ga0a2cb4e99758afd5bed8fd62df05e16f>`(
		char* escaped,
		const char* str,
		apr_ssize_t slen,
		apr_size_t* len
	);

	const char*
	:ref:`apr_pescape_urlencoded<doxid-group___a_p_r___util___escaping_1ga9caffb30731e3a07a8e23fa6464d35b5>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* str
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_escape_entity<doxid-group___a_p_r___util___escaping_1ga6973ca9a596c8fc9fc34eab647cff11c>`(
		char* escaped,
		const char* str,
		apr_ssize_t slen,
		int toasc,
		apr_size_t* len
	);

	const char*
	:ref:`apr_pescape_entity<doxid-group___a_p_r___util___escaping_1gad99b0f505645b63b5f552f5d35f174af>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* str,
		int toasc
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_unescape_entity<doxid-group___a_p_r___util___escaping_1ga9b835b2da5bf35c33f6c69e8e3100c99>`(
		char* unescaped,
		const char* str,
		apr_ssize_t slen,
		apr_size_t* len
	);

	const char*
	:ref:`apr_punescape_entity<doxid-group___a_p_r___util___escaping_1gabaaeff6e19e92cf1f138b21e87889e05>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* str
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_escape_echo<doxid-group___a_p_r___util___escaping_1ga4ebbadaffa33c6aa34e92108c45cd38e>`(
		char* escaped,
		const char* str,
		apr_ssize_t slen,
		int quote,
		apr_size_t* len
	);

	const char*
	:ref:`apr_pescape_echo<doxid-group___a_p_r___util___escaping_1ga1265c454e145b9fca52d2feafacd4a02>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* str,
		int quote
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_escape_hex<doxid-group___a_p_r___util___escaping_1gac87b3c2f42fb60f6ea4d8321e60ce69e>`(
		char* dest,
		const void* src,
		apr_size_t srclen,
		int colon,
		apr_size_t* len
	);

	const char*
	:ref:`apr_pescape_hex<doxid-group___a_p_r___util___escaping_1ga2a12cd35230cc148da52ea983da4b211>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const void* src,
		apr_size_t slen,
		int colon
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_unescape_hex<doxid-group___a_p_r___util___escaping_1ga98c3558219d7ce3dd29420c0124ddd73>`(
		void* dest,
		const char* str,
		apr_ssize_t slen,
		int colon,
		apr_size_t* len
	);

	const void*
	:ref:`apr_punescape_hex<doxid-group___a_p_r___util___escaping_1ga8cba37bcacb5e1c9440f2b35d44afc49>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* str,
		int colon,
		apr_size_t* len
	);

	// macros

	#define :ref:`APR_ESCAPE_STRING<doxid-group___a_p_r___util___escaping_1ga793ae1b187ce490c65eeee2eb59d2831>`

.. _details-group___a_p_r___util___escaping:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~



Global Functions
----------------

.. index:: pair: function; apr_escape_shell
.. _doxid-group___a_p_r___util___escaping_1gafdfca9adc06570fa6efd802e24dce6d1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_escape_shell(
		char* escaped,
		const char* str,
		apr_ssize_t slen,
		apr_size_t* len
	)

Perform shell escaping on the provided string.

Shell escaping causes characters to be prefixed with a '\' character.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- escaped

		- Optional buffer to write the encoded string, can be NULL

	*
		- str

		- The original string

	*
		- slen

		- The length of the original string, or APR_ESCAPE_STRING

	*
		- len

		- If present, returns the length of the string



.. rubric:: Returns:

APR_SUCCESS, or APR_NOTFOUND if no changes to the string were detected or the string was NULL

.. index:: pair: function; apr_pescape_shell
.. _doxid-group___a_p_r___util___escaping_1ga81e97334f8033bfbc3acd5e15262323e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	apr_pescape_shell(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* str
	)

Perform shell escaping on the provided string, returning the result from the pool.

Shell escaping causes characters to be prefixed with a '\' character.

If no characters were escaped, the original string is returned.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- Pool to allocate from

	*
		- str

		- The original string



.. rubric:: Returns:

the encoded string, allocated from the pool, or the original string if no escaping took place or the string was NULL.

.. index:: pair: function; apr_unescape_url
.. _doxid-group___a_p_r___util___escaping_1ga9a6b08630ef5a605def1dfa4a54b026f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_unescape_url(
		char* escaped,
		const char* url,
		apr_ssize_t slen,
		const char* forbid,
		const char* reserved,
		int plus,
		apr_size_t* len
	)

Unescapes a URL, leaving reserved characters intact.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- escaped

		- Optional buffer to write the encoded string, can be NULL

	*
		- url

		- String to be unescaped

	*
		- slen

		- The length of the original url, or APR_ESCAPE_STRING

	*
		- forbid

		- Optional list of forbidden characters, in addition to 0x00

	*
		- reserved

		- Optional list of reserved characters that will be left unescaped

	*
		- plus

		- If non zero, '+' is converted to ' ' as per application/x-www-form-urlencoded encoding

	*
		- len

		- If set, the length of the escaped string will be returned



.. rubric:: Returns:

APR_SUCCESS on success, APR_NOTFOUND if no characters are decoded or the string is NULL, APR_EINVAL if a bad escape sequence is found, APR_BADCH if a character on the forbid list is found.

.. index:: pair: function; apr_punescape_url
.. _doxid-group___a_p_r___util___escaping_1gac713d5687a00134cef5c795dbf4e6dbe:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	apr_punescape_url(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* url,
		const char* forbid,
		const char* reserved,
		int plus
	)

Unescapes a URL, leaving reserved characters intact, returning the result from a pool.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- Pool to allocate from

	*
		- url

		- String to be unescaped in place

	*
		- forbid

		- Optional list of forbidden characters, in addition to 0x00

	*
		- reserved

		- Optional list of reserved characters that will be left unescaped

	*
		- plus

		- If non zero, '+' is converted to ' ' as per application/x-www-form-urlencoded encoding



.. rubric:: Returns:

A string allocated from the pool on success, the original string if no characters are decoded, or NULL if a bad escape sequence is found or if a character on the forbid list is found, or if the original string was NULL.

.. index:: pair: function; apr_escape_path_segment
.. _doxid-group___a_p_r___util___escaping_1ga2fba5a28f4924f00f1ba9a56bc87f651:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_escape_path_segment(
		char* escaped,
		const char* str,
		apr_ssize_t slen,
		apr_size_t* len
	)

Escape a path segment, as defined in RFC1808.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- escaped

		- Optional buffer to write the encoded string, can be NULL

	*
		- str

		- The original string

	*
		- slen

		- The length of the original string, or APR_ESCAPE_STRING

	*
		- len

		- If present, returns the length of the string



.. rubric:: Returns:

APR_SUCCESS, or APR_NOTFOUND if no changes to the string were detected or the string was NULL

.. index:: pair: function; apr_pescape_path_segment
.. _doxid-group___a_p_r___util___escaping_1ga36bd45eb1f919fe61f04f5e9087c6242:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	apr_pescape_path_segment(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* str
	)

Escape a path segment, as defined in RFC1808, returning the result from a pool.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- Pool to allocate from

	*
		- str

		- String to be escaped



.. rubric:: Returns:

A string allocated from the pool on success, the original string if no characters are encoded or the string is NULL.

.. index:: pair: function; apr_escape_path
.. _doxid-group___a_p_r___util___escaping_1gae67859a1d260f354c16e939d24d67058:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_escape_path(
		char* escaped,
		const char* path,
		apr_ssize_t slen,
		int partial,
		apr_size_t* len
	)

Converts an OS path to a URL, in an OS dependent way, as defined in RFC1808. In all cases if a ':' occurs before the first '/' in the URL, the URL should be prefixed with "./" (or the ':' escaped). In the case of Unix, this means leaving '/' alone, but otherwise doing what escape_path_segment() does. For efficiency reasons, we don't use escape_path_segment(), which is provided for reference. Again, RFC 1808 is where this stuff is defined.

If partial is set, os_escape_path() assumes that the path will be appended to something with a '/' in it (and thus does not prefix "./").



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- escaped

		- Optional buffer to write the encoded string, can be NULL

	*
		- path

		- The original string

	*
		- slen

		- The length of the original string, or APR_ESCAPE_STRING

	*
		- partial

		- If non zero, suppresses the prepending of "./"

	*
		- len

		- If present, returns the length of the string



.. rubric:: Returns:

APR_SUCCESS, or APR_NOTFOUND if no changes to the string were detected or if the string was NULL

.. index:: pair: function; apr_pescape_path
.. _doxid-group___a_p_r___util___escaping_1gacd4fc208448eb07af16350802077783a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	apr_pescape_path(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* str,
		int partial
	)

Converts an OS path to a URL, in an OS dependent way, as defined in RFC1808, returning the result from a pool.

In all cases if a ':' occurs before the first '/' in the URL, the URL should be prefixed with "./" (or the ':' escaped). In the case of Unix, this means leaving '/' alone, but otherwise doing what escape_path_segment() does. For efficiency reasons, we don't use escape_path_segment(), which is provided for reference. Again, RFC 1808 is where this stuff is defined.

If partial is set, os_escape_path() assumes that the path will be appended to something with a '/' in it (and thus does not prefix "./").



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- Pool to allocate from

	*
		- str

		- The original string

	*
		- partial

		- If non zero, suppresses the prepending of "./"



.. rubric:: Returns:

A string allocated from the pool on success, the original string if no characters are encoded or if the string was NULL.

.. index:: pair: function; apr_escape_urlencoded
.. _doxid-group___a_p_r___util___escaping_1ga0a2cb4e99758afd5bed8fd62df05e16f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_escape_urlencoded(
		char* escaped,
		const char* str,
		apr_ssize_t slen,
		apr_size_t* len
	)

Urlencode a string, as defined in `http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1 <http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1>`__.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- escaped

		- Optional buffer to write the encoded string, can be NULL

	*
		- str

		- The original string

	*
		- slen

		- The length of the original string, or APR_ESCAPE_STRING

	*
		- len

		- If present, returns the length of the string



.. rubric:: Returns:

APR_SUCCESS, or APR_NOTFOUND if no changes to the string were detected or if the stirng was NULL

.. index:: pair: function; apr_pescape_urlencoded
.. _doxid-group___a_p_r___util___escaping_1ga9caffb30731e3a07a8e23fa6464d35b5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	apr_pescape_urlencoded(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* str
	)

Urlencode a string, as defined in `http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1, <http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1,>`__ returning the result from a pool.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- Pool to allocate from

	*
		- str

		- String to be escaped



.. rubric:: Returns:

A string allocated from the pool on success, the original string if no characters are encoded or if the string was NULL.

.. index:: pair: function; apr_escape_entity
.. _doxid-group___a_p_r___util___escaping_1ga6973ca9a596c8fc9fc34eab647cff11c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_escape_entity(
		char* escaped,
		const char* str,
		apr_ssize_t slen,
		int toasc,
		apr_size_t* len
	)

Apply entity encoding to a string. Characters are replaced as follows: '<' becomes '<', '>' becomes '>', '&' becomes '&', the double quote becomes '"" and the single quote becomes '''.

If toasc is not zero, any non ascii character will be encoded as '%#ddd;', where ddd is the decimal code of the character.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- escaped

		- Optional buffer to write the encoded string, can be NULL

	*
		- str

		- The original string

	*
		- slen

		- The length of the original string, or APR_ESCAPE_STRING

	*
		- toasc

		- If non zero, encode non ascii characters

	*
		- len

		- If present, returns the length of the string



.. rubric:: Returns:

APR_SUCCESS, or APR_NOTFOUND if no changes to the string were detected or the string was NULL

.. index:: pair: function; apr_pescape_entity
.. _doxid-group___a_p_r___util___escaping_1gad99b0f505645b63b5f552f5d35f174af:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	apr_pescape_entity(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* str,
		int toasc
	)

Apply entity encoding to a string, returning the result from a pool. Characters are replaced as follows: '<' becomes '<', '>' becomes '>', '&' becomes '&', the double quote becomes '"" and the single quote becomes '''.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- Pool to allocate from

	*
		- str

		- The original string

	*
		- toasc

		- If non zero, encode non ascii characters



.. rubric:: Returns:

A string allocated from the pool on success, the original string if no characters are encoded or the string is NULL.

.. index:: pair: function; apr_unescape_entity
.. _doxid-group___a_p_r___util___escaping_1ga9b835b2da5bf35c33f6c69e8e3100c99:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_unescape_entity(
		char* unescaped,
		const char* str,
		apr_ssize_t slen,
		apr_size_t* len
	)

Decodes html entities or numeric character references in a string. If the string to be unescaped is syntactically incorrect, then the following fixups will be made: unknown entities will be left undecoded; references to unused numeric characters will be deleted. In particular, &#00; will not be decoded, but will be deleted.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- unescaped

		- Optional buffer to write the encoded string, can be NULL

	*
		- str

		- The original string

	*
		- slen

		- The length of the original string, or APR_ESCAPE_STRING

	*
		- len

		- If present, returns the length of the string



.. rubric:: Returns:

APR_SUCCESS, or APR_NOTFOUND if no changes to the string were detected or the string was NULL

.. index:: pair: function; apr_punescape_entity
.. _doxid-group___a_p_r___util___escaping_1gabaaeff6e19e92cf1f138b21e87889e05:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	apr_punescape_entity(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* str
	)

Decodes html entities or numeric character references in a string. If the string to be unescaped is syntactically incorrect, then the following fixups will be made: unknown entities will be left undecoded; references to unused numeric characters will be deleted. In particular, &#00; will not be decoded, but will be deleted.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- Pool to allocate from

	*
		- str

		- The original string



.. rubric:: Returns:

A string allocated from the pool on success, the original string if no characters are encoded or the string is NULL.

.. index:: pair: function; apr_escape_echo
.. _doxid-group___a_p_r___util___escaping_1ga4ebbadaffa33c6aa34e92108c45cd38e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_escape_echo(
		char* escaped,
		const char* str,
		apr_ssize_t slen,
		int quote,
		apr_size_t* len
	)

Escape control characters in a string, as performed by the shell's 'echo' command. Characters are replaced as follows: \a alert (bell), \b backspace, \f form feed, \n new line, \r carriage return, \t horizontal tab, \v vertical tab, \ backslash.

Any non ascii character will be encoded as '\xHH', where HH is the hex code of the character.

If quote is not zero, the double quote character will also be escaped.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- escaped

		- Optional buffer to write the encoded string, can be NULL

	*
		- str

		- The original string

	*
		- slen

		- The length of the original string, or APR_ESCAPE_STRING

	*
		- quote

		- If non zero, encode double quotes

	*
		- len

		- If present, returns the length of the string



.. rubric:: Returns:

APR_SUCCESS, or APR_NOTFOUND if no changes to the string were detected or the string was NULL

.. index:: pair: function; apr_pescape_echo
.. _doxid-group___a_p_r___util___escaping_1ga1265c454e145b9fca52d2feafacd4a02:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	apr_pescape_echo(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* str,
		int quote
	)

Escape control characters in a string, as performed by the shell's 'echo' command, and return the results from a pool. Characters are replaced as follows: \a alert (bell), \b backspace, \f form feed, \n new line, \r carriage return, \t horizontal tab, \v vertical tab, \ backslash.

Any non ascii character will be encoded as '\xHH', where HH is the hex code of the character.

If quote is not zero, the double quote character will also be escaped.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- Pool to allocate from

	*
		- str

		- The original string

	*
		- quote

		- If non zero, encode double quotes



.. rubric:: Returns:

A string allocated from the pool on success, the original string if no characters are encoded or the string is NULL.

.. index:: pair: function; apr_escape_hex
.. _doxid-group___a_p_r___util___escaping_1gac87b3c2f42fb60f6ea4d8321e60ce69e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_escape_hex(
		char* dest,
		const void* src,
		apr_size_t srclen,
		int colon,
		apr_size_t* len
	)

Convert binary data to a hex encoding.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dest

		- The destination buffer, can be NULL

	*
		- src

		- The original buffer

	*
		- srclen

		- The length of the original buffer

	*
		- colon

		- If not zero, insert colon characters between hex digits.

	*
		- len

		- If present, returns the length of the string



.. rubric:: Returns:

APR_SUCCESS, or APR_NOTFOUND if the string was NULL

.. index:: pair: function; apr_pescape_hex
.. _doxid-group___a_p_r___util___escaping_1ga2a12cd35230cc148da52ea983da4b211:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	apr_pescape_hex(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const void* src,
		apr_size_t slen,
		int colon
	)

Convert binary data to a hex encoding, and return the results from a pool.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- Pool to allocate from

	*
		- src

		- The original buffer

	*
		- slen

		- The length of the original buffer

	*
		- colon

		- If not zero, insert colon characters between hex digits.



.. rubric:: Returns:

A zero padded buffer allocated from the pool on success, or NULL if src was NULL.

.. index:: pair: function; apr_unescape_hex
.. _doxid-group___a_p_r___util___escaping_1ga98c3558219d7ce3dd29420c0124ddd73:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_unescape_hex(
		void* dest,
		const char* str,
		apr_ssize_t slen,
		int colon,
		apr_size_t* len
	)

Convert hex encoded string to binary data.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dest

		- The destination buffer, can be NULL

	*
		- str

		- The original buffer

	*
		- slen

		- The length of the original buffer

	*
		- colon

		- If not zero, ignore colon characters between hex digits.

	*
		- len

		- If present, returns the length of the string



.. rubric:: Returns:

APR_SUCCESS, or APR_NOTFOUND if the string was NULL, or APR_BADCH if a non hex character is present.

.. index:: pair: function; apr_punescape_hex
.. _doxid-group___a_p_r___util___escaping_1ga8cba37bcacb5e1c9440f2b35d44afc49:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const void*
	apr_punescape_hex(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* str,
		int colon,
		apr_size_t* len
	)

Convert hex encoding to binary data, and return the results from a pool. If the colon character appears between pairs of hex digits, it will be ignored.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- Pool to allocate from

	*
		- str

		- The original string

	*
		- colon

		- If not zero, ignore colon characters between hex digits.

	*
		- len

		- If present, returns the length of the final buffer



.. rubric:: Returns:

A buffer allocated from the pool on success, or NULL if src was NULL, or a bad character was present.

Macros
------

.. index:: pair: define; APR_ESCAPE_STRING
.. _doxid-group___a_p_r___util___escaping_1ga793ae1b187ce490c65eeee2eb59d2831:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define APR_ESCAPE_STRING

When passing a string to one of the escape functions, this value can be passed to indicate a string-valued key, and have the length computed automatically.

