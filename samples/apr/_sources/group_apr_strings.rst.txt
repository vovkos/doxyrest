.. index:: pair: group; String routines
.. _doxid-group__apr__strings:

String routines
===============

.. toctree::
	:hidden:

	group_APR_Strings_Snprintf.rst

Overview
~~~~~~~~



|	:ref:`snprintf implementations<doxid-group___a_p_r___strings___snprintf>`



.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// global functions

	int
	:ref:`apr_strnatcmp<doxid-group__apr__strings_1gabe7e226c26e1535d787a7836b9c8d0a1>`(
		char const* a,
		char const* b
	);

	int
	:ref:`apr_strnatcasecmp<doxid-group__apr__strings_1ga1708d51c4989934fec663b23366430f3>`(
		char const* a,
		char const* b
	);

	char*
	:ref:`apr_pstrdup<doxid-group__apr__strings_1gabc79e99ff19abbd7cfd18308c5f85d47>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* s
	);

	char*
	:ref:`apr_pstrmemdup<doxid-group__apr__strings_1ga0eae1185559578c0f9792413305eca25>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* s,
		apr_size_t n
	);

	char*
	:ref:`apr_pstrndup<doxid-group__apr__strings_1gad17053ffe6604d908ae7cac33543a6b4>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* s,
		apr_size_t n
	);

	void*
	:ref:`apr_pmemdup<doxid-group__apr__strings_1gac3886f14ecf5aed8fe4493087799685c>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const void* m,
		apr_size_t n
	);

	char*
	:ref:`apr_pstrcat<doxid-group__apr__strings_1ga7bd80c95ffb7b3f96bc78e7b5b5b0045>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		...
	);

	char*
	:ref:`apr_pstrcatv<doxid-group__apr__strings_1ga15d0853af252a894e288c682b8f84309>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const struct iovec* vec,
		apr_size_t nvec,
		apr_size_t* nbytes
	);

	char*
	:ref:`apr_pvsprintf<doxid-group__apr__strings_1ga05248544edebc71070140d2ce5969c10>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* fmt,
		va_list ap
	);

	char*
	:ref:`apr_psprintf<doxid-group__apr__strings_1ga3eca76b8d293c5c3f8021e45eda813d8>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* fmt,
		...
	);

	char*
	:ref:`apr_cpystrn<doxid-group__apr__strings_1ga69700a825e82dd646f9f166599040431>`(
		char* dst,
		const char* src,
		apr_size_t dst_size
	);

	char*
	:ref:`apr_collapse_spaces<doxid-group__apr__strings_1gafd92441a5f4fa3b5f5aa49e1f9884bc7>`(
		char* dest,
		const char* src
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_tokenize_to_argv<doxid-group__apr__strings_1ga5213cee7e8ba799df9dc2e57f71cd4dd>`(
		const char* arg_str,
		char*** argv_out,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* token_context
	);

	char*
	:ref:`apr_strtok<doxid-group__apr__strings_1ga1cf7fcb5843707ece733e27aad85c516>`(
		char* str,
		const char* sep,
		char** last
	);

	char*
	:ref:`apr_itoa<doxid-group__apr__strings_1gae1c780f2d908a286a141e4b885254a9c>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		int n
	);

	char*
	:ref:`apr_ltoa<doxid-group__apr__strings_1ga578ea3fa78957c6b2e9b8ab4cbfd60b1>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		long n
	);

	char*
	:ref:`apr_off_t_toa<doxid-group__apr__strings_1gabce9fb74bbad08d795389bfe859053d3>`(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		apr_off_t n
	);

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	:ref:`apr_strtoff<doxid-group__apr__strings_1ga1583688e0777398174f62e46a522ae8f>`(
		apr_off_t* offset,
		const char* buf,
		char** end,
		int base
	);

	apr_int64_t
	:ref:`apr_strtoi64<doxid-group__apr__strings_1ga1da34829609e8976f498b235afd6cbe4>`(
		const char* buf,
		char** end,
		int base
	);

	apr_int64_t
	:ref:`apr_atoi64<doxid-group__apr__strings_1gaf0653577ee64efb5406d932db95cce3d>`(const char* buf);

	char*
	:ref:`apr_strfsize<doxid-group__apr__strings_1gaf66522fda6d2dfa540fdc58831405980>`(
		apr_off_t size,
		char* buf
	);

.. _details-group__apr__strings:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~



Global Functions
----------------

.. index:: pair: function; apr_strnatcmp
.. _doxid-group__apr__strings_1gabe7e226c26e1535d787a7836b9c8d0a1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	apr_strnatcmp(
		char const* a,
		char const* b
	)

Do a natural order comparison of two strings.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- a

		- The first string to compare

	*
		- b

		- The second string to compare



.. rubric:: Returns:

Either <0, 0, or >0. If the first string is less than the second this returns <0, if they are equivalent it returns 0, and if the first string is greater than second string it retuns >0.

.. index:: pair: function; apr_strnatcasecmp
.. _doxid-group__apr__strings_1ga1708d51c4989934fec663b23366430f3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	apr_strnatcasecmp(
		char const* a,
		char const* b
	)

Do a natural order comparison of two strings ignoring the case of the strings.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- a

		- The first string to compare

	*
		- b

		- The second string to compare



.. rubric:: Returns:

Either <0, 0, or >0. If the first string is less than the second this returns <0, if they are equivalent it returns 0, and if the first string is greater than second string it retuns >0.

.. index:: pair: function; apr_pstrdup
.. _doxid-group__apr__strings_1gabc79e99ff19abbd7cfd18308c5f85d47:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	char*
	apr_pstrdup(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* s
	)

duplicate a string into memory allocated out of a pool



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- The pool to allocate out of

	*
		- s

		- The string to duplicate



.. rubric:: Returns:

The new string or NULL if s == NULL

.. index:: pair: function; apr_pstrmemdup
.. _doxid-group__apr__strings_1ga0eae1185559578c0f9792413305eca25:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	char*
	apr_pstrmemdup(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* s,
		apr_size_t n
	)

Create a null-terminated string by making a copy of a sequence of characters and appending a null byte This is a faster alternative to apr_pstrndup, for use when you know that the string being duplicated really has 'n' or more characters. If the string might contain fewer characters, use apr_pstrndup.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- The pool to allocate out of

	*
		- s

		- The block of characters to duplicate

	*
		- n

		- The number of characters to duplicate



.. rubric:: Returns:

The new string or NULL if s == NULL

.. index:: pair: function; apr_pstrndup
.. _doxid-group__apr__strings_1gad17053ffe6604d908ae7cac33543a6b4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	char*
	apr_pstrndup(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* s,
		apr_size_t n
	)

Duplicate at most n characters of a string into memory allocated out of a pool; the new string will be NUL-terminated The amount of memory allocated from the pool is the length of the returned string including the NUL terminator



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- The pool to allocate out of

	*
		- s

		- The string to duplicate

	*
		- n

		- The maximum number of characters to duplicate



.. rubric:: Returns:

The new string or NULL if s == NULL

.. index:: pair: function; apr_pmemdup
.. _doxid-group__apr__strings_1gac3886f14ecf5aed8fe4493087799685c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void*
	apr_pmemdup(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const void* m,
		apr_size_t n
	)

Duplicate a block of memory.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- The pool to allocate from

	*
		- m

		- The memory to duplicate

	*
		- n

		- The number of bytes to duplicate



.. rubric:: Returns:

The new block of memory or NULL if m == NULL

.. index:: pair: function; apr_pstrcat
.. _doxid-group__apr__strings_1ga7bd80c95ffb7b3f96bc78e7b5b5b0045:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	char*
	apr_pstrcat(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		...
	)

Concatenate multiple strings, allocating memory out a pool



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- The pool to allocate out of

	*
		- ...

		- The strings to concatenate. The final string must be NULL



.. rubric:: Returns:

The new string

.. index:: pair: function; apr_pstrcatv
.. _doxid-group__apr__strings_1ga15d0853af252a894e288c682b8f84309:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	char*
	apr_pstrcatv(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const struct iovec* vec,
		apr_size_t nvec,
		apr_size_t* nbytes
	)

Concatenate multiple strings specified in a writev-style vector



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- The pool from which to allocate

	*
		- vec

		- The strings to concatenate

	*
		- nvec

		- The number of strings to concatenate

	*
		- nbytes

		- (output) strlen of new string (pass in NULL to omit)



.. rubric:: Returns:

The new string

.. index:: pair: function; apr_pvsprintf
.. _doxid-group__apr__strings_1ga05248544edebc71070140d2ce5969c10:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	char*
	apr_pvsprintf(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* fmt,
		va_list ap
	)

printf-style style printing routine. The data is output to a string allocated from a pool



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- The pool to allocate out of

	*
		- fmt

		- The format of the string

	*
		- ap

		- The arguments to use while printing the data



.. rubric:: Returns:

The new string

.. index:: pair: function; apr_psprintf
.. _doxid-group__apr__strings_1ga3eca76b8d293c5c3f8021e45eda813d8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	char*
	apr_psprintf(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		const char* fmt,
		...
	)

printf-style style printing routine. The data is output to a string allocated from a pool



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- The pool to allocate out of

	*
		- fmt

		- The format of the string

	*
		- ...

		- The arguments to use while printing the data



.. rubric:: Returns:

The new string

.. index:: pair: function; apr_cpystrn
.. _doxid-group__apr__strings_1ga69700a825e82dd646f9f166599040431:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	char*
	apr_cpystrn(
		char* dst,
		const char* src,
		apr_size_t dst_size
	)

Copy up to dst_size characters from src to dst; does not copy past a NUL terminator in src, but always terminates dst with a NUL regardless... code-block:: none

	
	Note the differences between this function and strncpy():
	 1) strncpy() doesn't always NUL terminate; :ref:`apr_cpystrn() <doxid-group__apr__strings_1ga69700a825e82dd646f9f166599040431>` does.
	 2) strncpy() pads the destination string with NULs, which is often 
	    unnecessary; :ref:`apr_cpystrn() <doxid-group__apr__strings_1ga69700a825e82dd646f9f166599040431>` does not.
	 3) strncpy() returns a pointer to the beginning of the dst string;
	    :ref:`apr_cpystrn() <doxid-group__apr__strings_1ga69700a825e82dd646f9f166599040431>` returns a pointer to the NUL terminator of dst, 
	    to allow a check for truncation.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dst

		- The destination string

	*
		- src

		- The source string

	*
		- dst_size

		- The space available in dst; dst always receives NUL termination, so if src is longer than dst_size, the actual number of characters copied is dst_size - 1.



.. rubric:: Returns:

Pointer to the NUL terminator of the destination string, dst

.. index:: pair: function; apr_collapse_spaces
.. _doxid-group__apr__strings_1gafd92441a5f4fa3b5f5aa49e1f9884bc7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	char*
	apr_collapse_spaces(
		char* dest,
		const char* src
	)

Remove all whitespace from a string



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dest

		- The destination string. It is okay to modify the string in place. Namely dest == src

	*
		- src

		- The string to rid the spaces from.



.. rubric:: Returns:

A pointer to the destination string's null terminator.

.. index:: pair: function; apr_tokenize_to_argv
.. _doxid-group__apr__strings_1ga5213cee7e8ba799df9dc2e57f71cd4dd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_tokenize_to_argv(
		const char* arg_str,
		char*** argv_out,
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* token_context
	)

Convert the arguments to a program from one string to an array of strings terminated by a NULL pointer



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arg_str

		- The arguments to convert

	*
		- argv_out

		- Output location. This is a pointer to an array of strings.

	*
		- token_context

		- Pool to use.

.. index:: pair: function; apr_strtok
.. _doxid-group__apr__strings_1ga1cf7fcb5843707ece733e27aad85c516:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	char*
	apr_strtok(
		char* str,
		const char* sep,
		char** last
	)

Split a string into separate null-terminated tokens. The tokens are delimited in the string by one or more characters from the sep argument.

.. note::

	the 'last' state points to the trailing NUL char of the final token, otherwise it points to the character following the current token (all successive or empty occurances of sep are skiped on the subsequent call to apr_strtok). Therefore it is possible to avoid a strlen() determination, with the following logic; toklen = last - retval; if (\*last) toklen;



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- str

		- The string to separate; this should be specified on the first call to :ref:`apr_strtok() <doxid-group__apr__strings_1ga1cf7fcb5843707ece733e27aad85c516>` for a given string, and NULL on subsequent calls.

	*
		- sep

		- The set of delimiters

	*
		- last

		- State saved by :ref:`apr_strtok() <doxid-group__apr__strings_1ga1cf7fcb5843707ece733e27aad85c516>` between calls.



.. rubric:: Returns:

The next token from the string

.. index:: pair: function; apr_itoa
.. _doxid-group__apr__strings_1gae1c780f2d908a286a141e4b885254a9c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	char*
	apr_itoa(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		int n
	)

create a string representation of an int, allocated from a pool



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- The pool from which to allocate

	*
		- n

		- The number to format



.. rubric:: Returns:

The string representation of the number

.. index:: pair: function; apr_ltoa
.. _doxid-group__apr__strings_1ga578ea3fa78957c6b2e9b8ab4cbfd60b1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	char*
	apr_ltoa(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		long n
	)

create a string representation of a long, allocated from a pool



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- The pool from which to allocate

	*
		- n

		- The number to format



.. rubric:: Returns:

The string representation of the number

.. index:: pair: function; apr_off_t_toa
.. _doxid-group__apr__strings_1gabce9fb74bbad08d795389bfe859053d3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	char*
	apr_off_t_toa(
		:ref:`apr_pool_t<doxid-group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb>`* p,
		apr_off_t n
	)

create a string representation of an apr_off_t, allocated from a pool



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- The pool from which to allocate

	*
		- n

		- The number to format



.. rubric:: Returns:

The string representation of the number

.. index:: pair: function; apr_strtoff
.. _doxid-group__apr__strings_1ga1583688e0777398174f62e46a522ae8f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`apr_status_t<doxid-group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c>`
	apr_strtoff(
		apr_off_t* offset,
		const char* buf,
		char** end,
		int base
	)

Convert a numeric string into an apr_off_t numeric value. Bug \*end breaks type safety; where \*buf is const, \*end needs to be declared as const in APR 2.0



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- offset

		- The value of the parsed string.

	*
		- buf

		- The string to parse. It may contain optional whitespace, followed by an optional '+' (positive, default) or '-' (negative) character, followed by an optional '0x' prefix if base is 0 or 16, followed by numeric digits appropriate for base.

	*
		- end

		- A pointer to the end of the valid character in buf. If not NULL, it is set to the first invalid character in buf.

	*
		- base

		- A numeric base in the range between 2 and 36 inclusive, or 0. If base is zero, buf will be treated as base ten unless its digits are prefixed with '0x', in which case it will be treated as base 16.

.. index:: pair: function; apr_strtoi64
.. _doxid-group__apr__strings_1ga1da34829609e8976f498b235afd6cbe4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	apr_int64_t
	apr_strtoi64(
		const char* buf,
		char** end,
		int base
	)

parse a numeric string into a 64-bit numeric value



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- buf

		- The string to parse. It may contain optional whitespace, followed by an optional '+' (positive, default) or '-' (negative) character, followed by an optional '0x' prefix if base is 0 or 16, followed by numeric digits appropriate for base.

	*
		- end

		- A pointer to the end of the valid character in buf. If not NULL, it is set to the first invalid character in buf.

	*
		- base

		- A numeric base in the range between 2 and 36 inclusive, or 0. If base is zero, buf will be treated as base ten unless its digits are prefixed with '0x', in which case it will be treated as base 16.



.. rubric:: Returns:

The numeric value of the string. On overflow, errno is set to ERANGE. On success, errno is set to 0.

.. index:: pair: function; apr_atoi64
.. _doxid-group__apr__strings_1gaf0653577ee64efb5406d932db95cce3d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	apr_int64_t
	apr_atoi64(const char* buf)

parse a base-10 numeric string into a 64-bit numeric value. Equivalent to apr_strtoi64(buf, (char\*\*)NULL, 10).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- buf

		- The string to parse



.. rubric:: Returns:

The numeric value of the string. On overflow, errno is set to ERANGE. On success, errno is set to 0.

.. index:: pair: function; apr_strfsize
.. _doxid-group__apr__strings_1gaf66522fda6d2dfa540fdc58831405980:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	char*
	apr_strfsize(
		apr_off_t size,
		char* buf
	)

Format a binary size (magnitiudes are 2^10 rather than 10^3) from an apr_off_t, as bytes, K, M, T, etc, to a four character compacted human readable string. All negative sizes report ' - ', apr_strfsize only formats positive values.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- size

		- The size to format

	*
		- buf

		- The 5 byte text buffer (counting the trailing null)



.. rubric:: Returns:

The buf passed to :ref:`apr_strfsize() <doxid-group__apr__strings_1gaf66522fda6d2dfa540fdc58831405980>`

